{
  "projectRoot": "/home/cordlesssteve/projects/topolop",
  "issues": [
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-0",
      "entity": {
        "canonicalPath": "src/analyzers/ast-analyzer/src/analyzer.js",
        "originalIdentifier": "src/analyzers/ast-analyzer/src/analyzer.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 288,
      "column": 38,
      "endLine": 288,
      "endColumn": 49,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.352Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-1",
      "entity": {
        "canonicalPath": "src/analyzers/ast-analyzer/src/analyzer.js",
        "originalIdentifier": "src/analyzers/ast-analyzer/src/analyzer.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 288,
      "column": 51,
      "endLine": 288,
      "endColumn": 61,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-2",
      "entity": {
        "canonicalPath": "src/analyzers/checkmarx-analyzer/src/index.js",
        "originalIdentifier": "src/analyzers/checkmarx-analyzer/src/index.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 304,
      "column": 32,
      "endLine": 304,
      "endColumn": 42,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-3",
      "entity": {
        "canonicalPath": "src/analyzers/checkmarx-analyzer/src/index.js",
        "originalIdentifier": "src/analyzers/checkmarx-analyzer/src/index.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 304,
      "column": 44,
      "endLine": 304,
      "endColumn": 52,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-4",
      "entity": {
        "canonicalPath": "src/analyzers/codacy-analyzer/src/cli.js",
        "originalIdentifier": "src/analyzers/codacy-analyzer/src/cli.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 395,
      "column": 38,
      "endLine": 395,
      "endColumn": 66,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-5",
      "entity": {
        "canonicalPath": "src/analyzers/codacy-analyzer/src/index.js",
        "originalIdentifier": "src/analyzers/codacy-analyzer/src/index.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 338,
      "column": 32,
      "endLine": 338,
      "endColumn": 42,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-6",
      "entity": {
        "canonicalPath": "src/analyzers/codacy-analyzer/src/index.js",
        "originalIdentifier": "src/analyzers/codacy-analyzer/src/index.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 338,
      "column": 44,
      "endLine": 338,
      "endColumn": 52,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring-7",
      "entity": {
        "canonicalPath": "src/analyzers/codeclimate-analyzer/src/codeclimate-client.js",
        "originalIdentifier": "src/analyzers/codeclimate-analyzer/src/codeclimate-client.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "ruleId": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "line": 285,
      "column": 21,
      "endLine": 285,
      "endColumn": 65,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring-8",
      "entity": {
        "canonicalPath": "src/analyzers/codeclimate-analyzer/src/index.js",
        "originalIdentifier": "src/analyzers/codeclimate-analyzer/src/index.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "ruleId": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "line": 91,
      "column": 21,
      "endLine": 91,
      "endColumn": 76,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop-9",
      "entity": {
        "canonicalPath": "src/analyzers/config/default-config.js",
        "originalIdentifier": "src/analyzers/config/default-config.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.",
      "description": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.",
      "ruleId": "javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop",
      "line": 149,
      "column": 7,
      "endLine": 149,
      "endColumn": 29,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"
        ],
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring-10",
      "entity": {
        "canonicalPath": "src/analyzers/deepsource-analyzer/src/index.js",
        "originalIdentifier": "src/analyzers/deepsource-analyzer/src/index.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "ruleId": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "line": 108,
      "column": 21,
      "endLine": 108,
      "endColumn": 79,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-11",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 45,
      "column": 34,
      "endLine": 45,
      "endColumn": 46,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-12",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 65,
      "column": 38,
      "endLine": 65,
      "endColumn": 50,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-13",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 65,
      "column": 52,
      "endLine": 65,
      "endColumn": 62,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-14",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `filePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `filePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 100,
      "column": 31,
      "endLine": 100,
      "endColumn": 42,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-15",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 136,
      "column": 38,
      "endLine": 136,
      "endColumn": 41,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-16",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 136,
      "column": 43,
      "endLine": 136,
      "endColumn": 52,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-17",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 46,
      "column": 33,
      "endLine": 46,
      "endColumn": 45,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-18",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 47,
      "column": 32,
      "endLine": 47,
      "endColumn": 41,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-19",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 66,
      "column": 31,
      "endLine": 66,
      "endColumn": 42,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-20",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `options`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `options`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 66,
      "column": 31,
      "endLine": 66,
      "endColumn": 42,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-21",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 108,
      "column": 33,
      "endLine": 108,
      "endColumn": 45,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-22",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 111,
      "column": 33,
      "endLine": 111,
      "endColumn": 45,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-23",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 114,
      "column": 33,
      "endLine": 114,
      "endColumn": 45,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-24",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 134,
      "column": 38,
      "endLine": 134,
      "endColumn": 41,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-25",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 134,
      "column": 43,
      "endLine": 134,
      "endColumn": 52,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-26",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 158,
      "column": 38,
      "endLine": 158,
      "endColumn": 41,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.353Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-27",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 158,
      "column": 43,
      "endLine": 158,
      "endColumn": 52,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-28",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `outputDir`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `outputDir`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 276,
      "column": 18,
      "endLine": 276,
      "endColumn": 27,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-29",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 132,
      "column": 38,
      "endLine": 132,
      "endColumn": 41,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-30",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 132,
      "column": 43,
      "endLine": 132,
      "endColumn": 52,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-31",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 184,
      "column": 38,
      "endLine": 184,
      "endColumn": 41,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-32",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 184,
      "column": 43,
      "endLine": 184,
      "endColumn": 52,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-33",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 203,
      "column": 34,
      "endLine": 203,
      "endColumn": 58,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-34",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 203,
      "column": 60,
      "endLine": 203,
      "endColumn": 86,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-35",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `sourceFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `sourceFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 213,
      "column": 16,
      "endLine": 213,
      "endColumn": 30,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-36",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `executable`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `executable`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 232,
      "column": 18,
      "endLine": 232,
      "endColumn": 33,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp-37",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "RegExp() called with a `tagName` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
      "description": "RegExp() called with a `tagName` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
      "ruleId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
      "line": 310,
      "column": 21,
      "endLine": 310,
      "endColumn": 68,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-1333: Inefficient Regular Expression Complexity"
        ],
        "owasp": [
          "A05:2021 - Security Misconfiguration",
          "A06:2017 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-38",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `executable`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `executable`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 346,
      "column": 16,
      "endLine": 346,
      "endColumn": 33,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-39",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 40,
      "column": 43,
      "endLine": 40,
      "endColumn": 53,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-40",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 63,
      "column": 44,
      "endLine": 63,
      "endColumn": 47,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-41",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 63,
      "column": 49,
      "endLine": 63,
      "endColumn": 59,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-42",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `command`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `command`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 133,
      "column": 35,
      "endLine": 133,
      "endColumn": 45,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-43",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 196,
      "column": 41,
      "endLine": 196,
      "endColumn": 50,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-44",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 204,
      "column": 69,
      "endLine": 204,
      "endColumn": 78,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-45",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 204,
      "column": 80,
      "endLine": 204,
      "endColumn": 84,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-46",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 272,
      "column": 42,
      "endLine": 272,
      "endColumn": 51,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-47",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 181,
      "column": 38,
      "endLine": 181,
      "endColumn": 41,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-48",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 181,
      "column": 43,
      "endLine": 181,
      "endColumn": 53,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-49",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 224,
      "column": 39,
      "endLine": 224,
      "endColumn": 47,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-50",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 225,
      "column": 39,
      "endLine": 225,
      "endColumn": 47,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-51",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/javascript/madge-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/javascript/madge-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 107,
      "column": 39,
      "endLine": 107,
      "endColumn": 51,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-52",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/javascript/madge-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/javascript/madge-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 235,
      "column": 35,
      "endLine": 235,
      "endColumn": 43,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-53",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/javascript/madge-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/javascript/madge-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 257,
      "column": 40,
      "endLine": 257,
      "endColumn": 49,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-54",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/javascript/madge-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/javascript/madge-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 258,
      "column": 39,
      "endLine": 258,
      "endColumn": 47,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-55",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/bandit-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/bandit-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 45,
      "column": 34,
      "endLine": 45,
      "endColumn": 46,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-56",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/bandit-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/bandit-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 50,
      "column": 16,
      "endLine": 50,
      "endColumn": 29,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-57",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/mypy-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/mypy-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 48,
      "column": 31,
      "endLine": 48,
      "endColumn": 42,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-58",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/mypy-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/mypy-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 61,
      "column": 11,
      "endLine": 61,
      "endColumn": 100,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-59",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/pylint-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pylint-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 44,
      "column": 34,
      "endLine": 44,
      "endColumn": 46,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-60",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/pylint-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pylint-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 49,
      "column": 16,
      "endLine": 49,
      "endColumn": 29,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-61",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/pylint-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pylint-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 57,
      "column": 9,
      "endLine": 57,
      "endColumn": 108,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-62",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 45,
      "column": 31,
      "endLine": 45,
      "endColumn": 43,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-63",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 55,
      "column": 16,
      "endLine": 55,
      "endColumn": 30,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-64",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 58,
      "column": 16,
      "endLine": 58,
      "endColumn": 28,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-65",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 91,
      "column": 34,
      "endLine": 91,
      "endColumn": 41,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-66",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 91,
      "column": 43,
      "endLine": 91,
      "endColumn": 58,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-67",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 140,
      "column": 36,
      "endLine": 140,
      "endColumn": 39,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-68",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 140,
      "column": 41,
      "endLine": 140,
      "endColumn": 50,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-69",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 222,
      "column": 35,
      "endLine": 222,
      "endColumn": 42,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-70",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 222,
      "column": 44,
      "endLine": 222,
      "endColumn": 48,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-71",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/secure-bandit-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/secure-bandit-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `pythonPath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `pythonPath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 92,
      "column": 27,
      "endLine": 92,
      "endColumn": 37,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-72",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/secure-bandit-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/secure-bandit-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 398,
      "column": 36,
      "endLine": 398,
      "endColumn": 43,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-73",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/secure-bandit-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/secure-bandit-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 398,
      "column": 45,
      "endLine": 398,
      "endColumn": 55,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-74",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/secure-container-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/secure-container-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 29,
      "column": 47,
      "endLine": 29,
      "endColumn": 56,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-75",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/secure-container-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/secure-container-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `command`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `command`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 139,
      "column": 35,
      "endLine": 139,
      "endColumn": 42,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-76",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/secure-mypy-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/secure-mypy-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `pythonPath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `pythonPath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 92,
      "column": 27,
      "endLine": 92,
      "endColumn": 37,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-77",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/secure-mypy-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/secure-mypy-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 348,
      "column": 36,
      "endLine": 348,
      "endColumn": 43,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-78",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/secure-mypy-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/secure-mypy-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 348,
      "column": 45,
      "endLine": 348,
      "endColumn": 55,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-79",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/secure-pylint-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/secure-pylint-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `pythonPath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `pythonPath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 94,
      "column": 27,
      "endLine": 94,
      "endColumn": 37,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-80",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/secure-pylint-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/secure-pylint-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 344,
      "column": 36,
      "endLine": 344,
      "endColumn": 43,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-81",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/python/secure-pylint-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/python/secure-pylint-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 344,
      "column": 45,
      "endLine": 344,
      "endColumn": 55,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-82",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/security/input-validator.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/security/input-validator.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 275,
      "column": 41,
      "endLine": 275,
      "endColumn": 49,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-83",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/security/input-validator.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/security/input-validator.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 372,
      "column": 38,
      "endLine": 372,
      "endColumn": 41,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-84",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/security/input-validator.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/security/input-validator.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 372,
      "column": 43,
      "endLine": 372,
      "endColumn": 53,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-85",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 122,
      "column": 41,
      "endLine": 122,
      "endColumn": 49,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-86",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 148,
      "column": 38,
      "endLine": 148,
      "endColumn": 46,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-87",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `basePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `basePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 206,
      "column": 31,
      "endLine": 206,
      "endColumn": 38,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-88",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `tsconfigPath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `tsconfigPath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 206,
      "column": 31,
      "endLine": 206,
      "endColumn": 38,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-89",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 111,
      "column": 38,
      "endLine": 111,
      "endColumn": 41,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-90",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 111,
      "column": 43,
      "endLine": 111,
      "endColumn": 52,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-91",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 149,
      "column": 34,
      "endLine": 149,
      "endColumn": 58,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-92",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 149,
      "column": 60,
      "endLine": 149,
      "endColumn": 75,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-93",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `sourceFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `sourceFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 155,
      "column": 16,
      "endLine": 155,
      "endColumn": 30,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-94",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 191,
      "column": 33,
      "endLine": 191,
      "endColumn": 58,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-95",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `bitcodeFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `bitcodeFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 208,
      "column": 31,
      "endLine": 208,
      "endColumn": 42,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-96",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `options`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `options`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 208,
      "column": 31,
      "endLine": 208,
      "endColumn": 42,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-97",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 328,
      "column": 37,
      "endLine": 328,
      "endColumn": 46,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-98",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 328,
      "column": 48,
      "endLine": 328,
      "endColumn": 52,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-99",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `outputDir`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `outputDir`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 424,
      "column": 16,
      "endLine": 424,
      "endColumn": 25,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-100",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 137,
      "column": 38,
      "endLine": 137,
      "endColumn": 41,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-101",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 137,
      "column": 43,
      "endLine": 137,
      "endColumn": 52,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-102",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 167,
      "column": 33,
      "endLine": 167,
      "endColumn": 45,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-103",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 170,
      "column": 33,
      "endLine": 170,
      "endColumn": 45,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-104",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 173,
      "column": 33,
      "endLine": 173,
      "endColumn": 45,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-105",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 176,
      "column": 33,
      "endLine": 176,
      "endColumn": 45,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-106",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `target`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `target`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 190,
      "column": 31,
      "endLine": 190,
      "endColumn": 42,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-107",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `basePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `basePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 345,
      "column": 16,
      "endLine": 345,
      "endColumn": 29,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-108",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `target`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `target`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 345,
      "column": 16,
      "endLine": 345,
      "endColumn": 29,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-109",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `basePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `basePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 353,
      "column": 37,
      "endLine": 353,
      "endColumn": 50,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-110",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 124,
      "column": 38,
      "endLine": 124,
      "endColumn": 41,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-111",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 124,
      "column": 43,
      "endLine": 124,
      "endColumn": 52,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-112",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 143,
      "column": 34,
      "endLine": 143,
      "endColumn": 37,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-113",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 143,
      "column": 39,
      "endLine": 143,
      "endColumn": 55,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-114",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `tlaFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `tlaFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 156,
      "column": 31,
      "endLine": 156,
      "endColumn": 42,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-115",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `configFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `configFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 362,
      "column": 31,
      "endLine": 362,
      "endColumn": 41,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-116",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `tlaFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `tlaFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 362,
      "column": 31,
      "endLine": 362,
      "endColumn": 41,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-117",
      "entity": {
        "canonicalPath": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "Detected calls to child_process from a function argument `tlaFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "description": "Detected calls to child_process from a function argument `tlaFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
      "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
      "line": 484,
      "column": 31,
      "endLine": 484,
      "endColumn": 43,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
        ],
        "owasp": [
          "A01:2017 - Injection",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-118",
      "entity": {
        "canonicalPath": "src/analyzers/git-analyzer/src/git-reader.js",
        "originalIdentifier": "src/analyzers/git-analyzer/src/git-reader.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 6,
      "column": 34,
      "endLine": 6,
      "endColumn": 42,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-119",
      "entity": {
        "canonicalPath": "src/analyzers/github-codeql-analyzer/src/codeql-client.js",
        "originalIdentifier": "src/analyzers/github-codeql-analyzer/src/codeql-client.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 21,
      "column": 70,
      "endLine": 21,
      "endColumn": 91,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-120",
      "entity": {
        "canonicalPath": "src/analyzers/github-codeql-analyzer/src/codeql-client.js",
        "originalIdentifier": "src/analyzers/github-codeql-analyzer/src/codeql-client.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 63,
      "column": 61,
      "endLine": 63,
      "endColumn": 73,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-121",
      "entity": {
        "canonicalPath": "src/analyzers/github-codeql-analyzer/src/codeql-client.js",
        "originalIdentifier": "src/analyzers/github-codeql-analyzer/src/codeql-client.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 114,
      "column": 56,
      "endLine": 114,
      "endColumn": 82,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-122",
      "entity": {
        "canonicalPath": "src/analyzers/github-codeql-analyzer/src/codeql-client.js",
        "originalIdentifier": "src/analyzers/github-codeql-analyzer/src/codeql-client.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 114,
      "column": 84,
      "endLine": 114,
      "endColumn": 129,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring-123",
      "entity": {
        "canonicalPath": "src/analyzers/github-codeql-analyzer/src/codeql-client.js",
        "originalIdentifier": "src/analyzers/github-codeql-analyzer/src/codeql-client.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "ruleId": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "line": 191,
      "column": 21,
      "endLine": 191,
      "endColumn": 72,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring-124",
      "entity": {
        "canonicalPath": "src/analyzers/github-codeql-analyzer/src/codeql-client.js",
        "originalIdentifier": "src/analyzers/github-codeql-analyzer/src/codeql-client.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "ruleId": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "line": 235,
      "column": 20,
      "endLine": 235,
      "endColumn": 71,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-125",
      "entity": {
        "canonicalPath": "src/analyzers/github-codeql-analyzer/src/codeql-client.js",
        "originalIdentifier": "src/analyzers/github-codeql-analyzer/src/codeql-client.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 366,
      "column": 36,
      "endLine": 366,
      "endColumn": 48,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring-126",
      "entity": {
        "canonicalPath": "src/analyzers/github-codeql-analyzer/src/index.js",
        "originalIdentifier": "src/analyzers/github-codeql-analyzer/src/index.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "ruleId": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "line": 89,
      "column": 21,
      "endLine": 89,
      "endColumn": 67,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring-127",
      "entity": {
        "canonicalPath": "src/analyzers/github-codeql-analyzer/src/index.js",
        "originalIdentifier": "src/analyzers/github-codeql-analyzer/src/index.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "ruleId": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "line": 324,
      "column": 21,
      "endLine": 324,
      "endColumn": 64,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-128",
      "entity": {
        "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "originalIdentifier": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 71,
      "column": 17,
      "endLine": 71,
      "endColumn": 28,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-129",
      "entity": {
        "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "originalIdentifier": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 71,
      "column": 30,
      "endLine": 71,
      "endColumn": 40,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-130",
      "entity": {
        "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "originalIdentifier": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 72,
      "column": 17,
      "endLine": 72,
      "endColumn": 28,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-131",
      "entity": {
        "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "originalIdentifier": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 73,
      "column": 17,
      "endLine": 73,
      "endColumn": 28,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-132",
      "entity": {
        "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "originalIdentifier": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 74,
      "column": 17,
      "endLine": 74,
      "endColumn": 28,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-133",
      "entity": {
        "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "originalIdentifier": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 75,
      "column": 17,
      "endLine": 75,
      "endColumn": 28,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-134",
      "entity": {
        "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "originalIdentifier": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 76,
      "column": 17,
      "endLine": 76,
      "endColumn": 28,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-135",
      "entity": {
        "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "originalIdentifier": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 90,
      "column": 41,
      "endLine": 90,
      "endColumn": 52,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-136",
      "entity": {
        "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "originalIdentifier": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 93,
      "column": 36,
      "endLine": 93,
      "endColumn": 47,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.354Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-137",
      "entity": {
        "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "originalIdentifier": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 93,
      "column": 49,
      "endLine": 93,
      "endColumn": 65,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-138",
      "entity": {
        "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "originalIdentifier": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 106,
      "column": 37,
      "endLine": 106,
      "endColumn": 46,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring-139",
      "entity": {
        "canonicalPath": "src/analyzers/semgrep-analyzer/src/index.js",
        "originalIdentifier": "src/analyzers/semgrep-analyzer/src/index.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "ruleId": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "line": 92,
      "column": 21,
      "endLine": 92,
      "endColumn": 68,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-140",
      "entity": {
        "canonicalPath": "src/analyzers/semgrep-analyzer/src/semgrep-client.js",
        "originalIdentifier": "src/analyzers/semgrep-analyzer/src/semgrep-client.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 165,
      "column": 28,
      "endLine": 165,
      "endColumn": 38,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-141",
      "entity": {
        "canonicalPath": "src/analyzers/snyk-analyzer/src/cli.js",
        "originalIdentifier": "src/analyzers/snyk-analyzer/src/cli.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 52,
      "column": 46,
      "endLine": 52,
      "endColumn": 56,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-142",
      "entity": {
        "canonicalPath": "src/analyzers/snyk-analyzer/src/cli.js",
        "originalIdentifier": "src/analyzers/snyk-analyzer/src/cli.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 404,
      "column": 41,
      "endLine": 404,
      "endColumn": 51,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring-143",
      "entity": {
        "canonicalPath": "src/analyzers/snyk-analyzer/src/index.js",
        "originalIdentifier": "src/analyzers/snyk-analyzer/src/index.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "ruleId": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "line": 114,
      "column": 21,
      "endLine": 114,
      "endColumn": 65,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring-144",
      "entity": {
        "canonicalPath": "src/analyzers/snyk-analyzer/src/index.js",
        "originalIdentifier": "src/analyzers/snyk-analyzer/src/index.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "ruleId": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "line": 168,
      "column": 21,
      "endLine": 168,
      "endColumn": 74,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring-145",
      "entity": {
        "canonicalPath": "src/analyzers/snyk-analyzer/src/index.js",
        "originalIdentifier": "src/analyzers/snyk-analyzer/src/index.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "ruleId": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "line": 201,
      "column": 21,
      "endLine": 201,
      "endColumn": 70,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-146",
      "entity": {
        "canonicalPath": "src/analyzers/snyk-analyzer/src/index.js",
        "originalIdentifier": "src/analyzers/snyk-analyzer/src/index.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 241,
      "column": 42,
      "endLine": 241,
      "endColumn": 52,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-147",
      "entity": {
        "canonicalPath": "src/analyzers/snyk-analyzer/src/snyk-client.js",
        "originalIdentifier": "src/analyzers/snyk-analyzer/src/snyk-client.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 96,
      "column": 37,
      "endLine": 96,
      "endColumn": 47,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-148",
      "entity": {
        "canonicalPath": "src/analyzers/snyk-analyzer/src/snyk-client.js",
        "originalIdentifier": "src/analyzers/snyk-analyzer/src/snyk-client.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 122,
      "column": 37,
      "endLine": 122,
      "endColumn": 45,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-149",
      "entity": {
        "canonicalPath": "src/analyzers/snyk-analyzer/src/snyk-client.js",
        "originalIdentifier": "src/analyzers/snyk-analyzer/src/snyk-client.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 122,
      "column": 47,
      "endLine": 122,
      "endColumn": 51,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-150",
      "entity": {
        "canonicalPath": "src/analyzers/snyk-analyzer/src/snyk-client.js",
        "originalIdentifier": "src/analyzers/snyk-analyzer/src/snyk-client.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 198,
      "column": 27,
      "endLine": 198,
      "endColumn": 37,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-151",
      "entity": {
        "canonicalPath": "src/analyzers/snyk-analyzer/src/snyk-client.js",
        "originalIdentifier": "src/analyzers/snyk-analyzer/src/snyk-client.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 219,
      "column": 34,
      "endLine": 219,
      "endColumn": 44,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-152",
      "entity": {
        "canonicalPath": "src/analyzers/snyk-analyzer/src/snyk-client.js",
        "originalIdentifier": "src/analyzers/snyk-analyzer/src/snyk-client.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 312,
      "column": 27,
      "endLine": 312,
      "endColumn": 37,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-153",
      "entity": {
        "canonicalPath": "src/analyzers/snyk-analyzer/src/snyk-client.js",
        "originalIdentifier": "src/analyzers/snyk-analyzer/src/snyk-client.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 343,
      "column": 34,
      "endLine": 343,
      "endColumn": 44,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring-154",
      "entity": {
        "canonicalPath": "src/analyzers/sonarqube-analyzer/src/index.js",
        "originalIdentifier": "src/analyzers/sonarqube-analyzer/src/index.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "ruleId": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "line": 78,
      "column": 21,
      "endLine": 78,
      "endColumn": 70,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring-155",
      "entity": {
        "canonicalPath": "src/analyzers/sonarqube-analyzer/src/sonarqube-client.js",
        "originalIdentifier": "src/analyzers/sonarqube-analyzer/src/sonarqube-client.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "ruleId": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "line": 342,
      "column": 21,
      "endLine": 342,
      "endColumn": 66,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-156",
      "entity": {
        "canonicalPath": "src/analyzers/utils/cache-manager.js",
        "originalIdentifier": "src/analyzers/utils/cache-manager.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 322,
      "column": 32,
      "endLine": 322,
      "endColumn": 50,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-157",
      "entity": {
        "canonicalPath": "src/analyzers/utils/fs-utils.js",
        "originalIdentifier": "src/analyzers/utils/fs-utils.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 190,
      "column": 34,
      "endLine": 190,
      "endColumn": 43,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-158",
      "entity": {
        "canonicalPath": "src/analyzers/utils/fs-utils.js",
        "originalIdentifier": "src/analyzers/utils/fs-utils.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 194,
      "column": 37,
      "endLine": 194,
      "endColumn": 48,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-159",
      "entity": {
        "canonicalPath": "src/analyzers/utils/fs-utils.js",
        "originalIdentifier": "src/analyzers/utils/fs-utils.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 194,
      "column": 50,
      "endLine": 194,
      "endColumn": 58,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-160",
      "entity": {
        "canonicalPath": "src/analyzers/utils/fs-utils.js",
        "originalIdentifier": "src/analyzers/utils/fs-utils.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 256,
      "column": 38,
      "endLine": 256,
      "endColumn": 46,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-161",
      "entity": {
        "canonicalPath": "src/analyzers/utils/path-utils.js",
        "originalIdentifier": "src/analyzers/utils/path-utils.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 55,
      "column": 51,
      "endLine": 55,
      "endColumn": 58,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-162",
      "entity": {
        "canonicalPath": "src/analyzers/utils/path-utils.js",
        "originalIdentifier": "src/analyzers/utils/path-utils.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 70,
      "column": 51,
      "endLine": 70,
      "endColumn": 58,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-163",
      "entity": {
        "canonicalPath": "src/analyzers/utils/path-utils.js",
        "originalIdentifier": "src/analyzers/utils/path-utils.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 87,
      "column": 51,
      "endLine": 87,
      "endColumn": 59,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-164",
      "entity": {
        "canonicalPath": "src/analyzers/utils/path-utils.js",
        "originalIdentifier": "src/analyzers/utils/path-utils.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 101,
      "column": 29,
      "endLine": 101,
      "endColumn": 38,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-165",
      "entity": {
        "canonicalPath": "src/analyzers/utils/path-utils.js",
        "originalIdentifier": "src/analyzers/utils/path-utils.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 102,
      "column": 30,
      "endLine": 102,
      "endColumn": 39,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-166",
      "entity": {
        "canonicalPath": "src/analyzers/utils/path-utils.js",
        "originalIdentifier": "src/analyzers/utils/path-utils.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 106,
      "column": 28,
      "endLine": 106,
      "endColumn": 37,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-167",
      "entity": {
        "canonicalPath": "src/analyzers/utils/path-utils.js",
        "originalIdentifier": "src/analyzers/utils/path-utils.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 107,
      "column": 30,
      "endLine": 107,
      "endColumn": 39,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-168",
      "entity": {
        "canonicalPath": "src/analyzers/utils/path-utils.js",
        "originalIdentifier": "src/analyzers/utils/path-utils.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 111,
      "column": 30,
      "endLine": 111,
      "endColumn": 39,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-169",
      "entity": {
        "canonicalPath": "src/analyzers/utils/path-utils.js",
        "originalIdentifier": "src/analyzers/utils/path-utils.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 112,
      "column": 30,
      "endLine": 112,
      "endColumn": 39,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-170",
      "entity": {
        "canonicalPath": "src/analyzers/utils/path-utils.js",
        "originalIdentifier": "src/analyzers/utils/path-utils.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 116,
      "column": 30,
      "endLine": 116,
      "endColumn": 39,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-171",
      "entity": {
        "canonicalPath": "src/analyzers/utils/path-utils.js",
        "originalIdentifier": "src/analyzers/utils/path-utils.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 120,
      "column": 30,
      "endLine": 120,
      "endColumn": 39,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-172",
      "entity": {
        "canonicalPath": "src/analyzers/utils/path-utils.js",
        "originalIdentifier": "src/analyzers/utils/path-utils.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 124,
      "column": 50,
      "endLine": 124,
      "endColumn": 59,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-173",
      "entity": {
        "canonicalPath": "src/analyzers/utils/path-utils.js",
        "originalIdentifier": "src/analyzers/utils/path-utils.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 124,
      "column": 61,
      "endLine": 124,
      "endColumn": 65,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-174",
      "entity": {
        "canonicalPath": "src/analyzers/utils/path-utils.js",
        "originalIdentifier": "src/analyzers/utils/path-utils.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 142,
      "column": 35,
      "endLine": 142,
      "endColumn": 43,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring-175",
      "entity": {
        "canonicalPath": "src/analyzers/utils/path-utils.js",
        "originalIdentifier": "src/analyzers/utils/path-utils.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "ruleId": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "line": 231,
      "column": 18,
      "endLine": 231,
      "endColumn": 47,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring-176",
      "entity": {
        "canonicalPath": "src/analyzers/utils/performance-utils.js",
        "originalIdentifier": "src/analyzers/utils/performance-utils.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "ruleId": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "line": 266,
      "column": 21,
      "endLine": 266,
      "endColumn": 96,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.browser.security.insecure-document-method.insecure-document-method-177",
      "entity": {
        "canonicalPath": "src/core/canvas-renderer/engines/three-city-renderer.js",
        "originalIdentifier": "src/core/canvas-renderer/engines/three-city-renderer.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
      "description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
      "ruleId": "javascript.browser.security.insecure-document-method.insecure-document-method",
      "line": 398,
      "column": 5,
      "endLine": 405,
      "endColumn": 7,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.browser.security.insecure-document-method.insecure-document-method-178",
      "entity": {
        "canonicalPath": "src/core/canvas-renderer/engines/three-city-renderer.js",
        "originalIdentifier": "src/core/canvas-renderer/engines/three-city-renderer.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "high",
      "analysisType": "security",
      "title": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
      "description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities",
      "ruleId": "javascript.browser.security.insecure-document-method.insecure-document-method",
      "line": 479,
      "column": 7,
      "endLine": 479,
      "endColumn": 40,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
        ],
        "owasp": [
          "A07:2017 - Cross-Site Scripting (XSS)",
          "A03:2021 - Injection"
        ],
        "references": [
          "https://owasp.org/Top10/A03_2021-Injection"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-179",
      "entity": {
        "canonicalPath": "src/core/canvas-renderer/public/3d-city-viewer.html",
        "originalIdentifier": "src/core/canvas-renderer/public/3d-city-viewer.html",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "ruleId": "html.security.audit.missing-integrity.missing-integrity",
      "line": 7,
      "column": 5,
      "endLine": 7,
      "endColumn": 94,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-353: Missing Support for Integrity Check"
        ],
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-180",
      "entity": {
        "canonicalPath": "src/core/canvas-renderer/public/3d-city-viewer.html",
        "originalIdentifier": "src/core/canvas-renderer/public/3d-city-viewer.html",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "ruleId": "html.security.audit.missing-integrity.missing-integrity",
      "line": 8,
      "column": 5,
      "endLine": 8,
      "endColumn": 109,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-353: Missing Support for Integrity Check"
        ],
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-181",
      "entity": {
        "canonicalPath": "src/core/canvas-renderer/public/DEVELOPER-VIEW.html",
        "originalIdentifier": "src/core/canvas-renderer/public/DEVELOPER-VIEW.html",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "ruleId": "html.security.audit.missing-integrity.missing-integrity",
      "line": 381,
      "column": 5,
      "endLine": 381,
      "endColumn": 94,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-353: Missing Support for Integrity Check"
        ],
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-182",
      "entity": {
        "canonicalPath": "src/core/canvas-renderer/public/DEVELOPER-VIEW.html",
        "originalIdentifier": "src/core/canvas-renderer/public/DEVELOPER-VIEW.html",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "ruleId": "html.security.audit.missing-integrity.missing-integrity",
      "line": 382,
      "column": 5,
      "endLine": 382,
      "endColumn": 109,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-353: Missing Support for Integrity Check"
        ],
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-183",
      "entity": {
        "canonicalPath": "src/core/canvas-renderer/public/MAIN-TEMPLATE.html",
        "originalIdentifier": "src/core/canvas-renderer/public/MAIN-TEMPLATE.html",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "ruleId": "html.security.audit.missing-integrity.missing-integrity",
      "line": 7,
      "column": 5,
      "endLine": 7,
      "endColumn": 94,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-353: Missing Support for Integrity Check"
        ],
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-184",
      "entity": {
        "canonicalPath": "src/core/canvas-renderer/public/MAIN-TEMPLATE.html",
        "originalIdentifier": "src/core/canvas-renderer/public/MAIN-TEMPLATE.html",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "ruleId": "html.security.audit.missing-integrity.missing-integrity",
      "line": 8,
      "column": 5,
      "endLine": 8,
      "endColumn": 109,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-353: Missing Support for Integrity Check"
        ],
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-185",
      "entity": {
        "canonicalPath": "src/core/canvas-renderer/public/immersive-unified-city.html",
        "originalIdentifier": "src/core/canvas-renderer/public/immersive-unified-city.html",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "ruleId": "html.security.audit.missing-integrity.missing-integrity",
      "line": 7,
      "column": 5,
      "endLine": 7,
      "endColumn": 94,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-353: Missing Support for Integrity Check"
        ],
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-186",
      "entity": {
        "canonicalPath": "src/core/canvas-renderer/public/immersive-unified-city.html",
        "originalIdentifier": "src/core/canvas-renderer/public/immersive-unified-city.html",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "ruleId": "html.security.audit.missing-integrity.missing-integrity",
      "line": 8,
      "column": 5,
      "endLine": 8,
      "endColumn": 109,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-353: Missing Support for Integrity Check"
        ],
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp-187",
      "entity": {
        "canonicalPath": "src/core/graph-model/src/graph-queries.js",
        "originalIdentifier": "src/core/graph-model/src/graph-queries.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
      "description": "RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
      "ruleId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
      "line": 273,
      "column": 19,
      "endLine": 273,
      "endColumn": 43,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-1333: Inefficient Regular Expression Complexity"
        ],
        "owasp": [
          "A05:2021 - Security Misconfiguration",
          "A06:2017 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp-188",
      "entity": {
        "canonicalPath": "src/core/graph-model/src/models/codebase.js",
        "originalIdentifier": "src/core/graph-model/src/models/codebase.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
      "description": "RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
      "ruleId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
      "line": 405,
      "column": 19,
      "endLine": 405,
      "endColumn": 43,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-1333: Inefficient Regular Expression Complexity"
        ],
        "owasp": [
          "A05:2021 - Security Misconfiguration",
          "A06:2017 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring-189",
      "entity": {
        "canonicalPath": "src/core/graph-model/src/performance-metrics.js",
        "originalIdentifier": "src/core/graph-model/src/performance-metrics.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "ruleId": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "line": 394,
      "column": 25,
      "endLine": 394,
      "endColumn": 62,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring-190",
      "entity": {
        "canonicalPath": "src/core/graph-model/src/visualization-transformer.js",
        "originalIdentifier": "src/core/graph-model/src/visualization-transformer.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "ruleId": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "line": 216,
      "column": 22,
      "endLine": 216,
      "endColumn": 64,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-191",
      "entity": {
        "canonicalPath": "src/core/unified-model/path-normalizer.js",
        "originalIdentifier": "src/core/unified-model/path-normalizer.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 24,
      "column": 37,
      "endLine": 24,
      "endColumn": 48,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-192",
      "entity": {
        "canonicalPath": "src/examples/3d-city-explorer.html",
        "originalIdentifier": "src/examples/3d-city-explorer.html",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "ruleId": "html.security.audit.missing-integrity.missing-integrity",
      "line": 322,
      "column": 5,
      "endLine": 322,
      "endColumn": 94,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-353: Missing Support for Integrity Check"
        ],
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-193",
      "entity": {
        "canonicalPath": "src/examples/3d-city-explorer.html",
        "originalIdentifier": "src/examples/3d-city-explorer.html",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "ruleId": "html.security.audit.missing-integrity.missing-integrity",
      "line": 323,
      "column": 5,
      "endLine": 323,
      "endColumn": 109,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-353: Missing Support for Integrity Check"
        ],
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring-194",
      "entity": {
        "canonicalPath": "src/examples/demo-visual-city-renderer.js",
        "originalIdentifier": "src/examples/demo-visual-city-renderer.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "ruleId": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "line": 251,
      "column": 19,
      "endLine": 251,
      "endColumn": 57,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-195",
      "entity": {
        "canonicalPath": "src/examples/topolop-3d-explorer-real-data.html",
        "originalIdentifier": "src/examples/topolop-3d-explorer-real-data.html",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "ruleId": "html.security.audit.missing-integrity.missing-integrity",
      "line": 371,
      "column": 5,
      "endLine": 371,
      "endColumn": 94,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-353: Missing Support for Integrity Check"
        ],
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-196",
      "entity": {
        "canonicalPath": "src/examples/topolop-3d-explorer-real-data.html",
        "originalIdentifier": "src/examples/topolop-3d-explorer-real-data.html",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "ruleId": "html.security.audit.missing-integrity.missing-integrity",
      "line": 372,
      "column": 5,
      "endLine": 372,
      "endColumn": 109,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-353: Missing Support for Integrity Check"
        ],
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-197",
      "entity": {
        "canonicalPath": "src/examples/topolop-enhanced-aggregated-3d.html",
        "originalIdentifier": "src/examples/topolop-enhanced-aggregated-3d.html",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "ruleId": "html.security.audit.missing-integrity.missing-integrity",
      "line": 306,
      "column": 5,
      "endLine": 306,
      "endColumn": 94,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-353: Missing Support for Integrity Check"
        ],
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-198",
      "entity": {
        "canonicalPath": "src/examples/topolop-enhanced-aggregated-3d.html",
        "originalIdentifier": "src/examples/topolop-enhanced-aggregated-3d.html",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "ruleId": "html.security.audit.missing-integrity.missing-integrity",
      "line": 307,
      "column": 5,
      "endLine": 307,
      "endColumn": 109,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-353: Missing Support for Integrity Check"
        ],
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-199",
      "entity": {
        "canonicalPath": "src/examples/topolop-filtered-3d-explorer.html",
        "originalIdentifier": "src/examples/topolop-filtered-3d-explorer.html",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "ruleId": "html.security.audit.missing-integrity.missing-integrity",
      "line": 367,
      "column": 5,
      "endLine": 367,
      "endColumn": 94,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-353: Missing Support for Integrity Check"
        ],
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-200",
      "entity": {
        "canonicalPath": "src/examples/topolop-filtered-3d-explorer.html",
        "originalIdentifier": "src/examples/topolop-filtered-3d-explorer.html",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "ruleId": "html.security.audit.missing-integrity.missing-integrity",
      "line": 368,
      "column": 5,
      "endLine": 368,
      "endColumn": 109,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-353: Missing Support for Integrity Check"
        ],
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-201",
      "entity": {
        "canonicalPath": "src/examples/topolop-real-data-3d.html",
        "originalIdentifier": "src/examples/topolop-real-data-3d.html",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "ruleId": "html.security.audit.missing-integrity.missing-integrity",
      "line": 306,
      "column": 5,
      "endLine": 306,
      "endColumn": 94,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-353: Missing Support for Integrity Check"
        ],
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-202",
      "entity": {
        "canonicalPath": "src/examples/topolop-real-data-3d.html",
        "originalIdentifier": "src/examples/topolop-real-data-3d.html",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
      "ruleId": "html.security.audit.missing-integrity.missing-integrity",
      "line": 307,
      "column": 5,
      "endLine": 307,
      "endColumn": 109,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-353: Missing Support for Integrity Check"
        ],
        "owasp": [
          "A08:2021 - Software and Data Integrity Failures"
        ],
        "references": [
          "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-203",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/commands/analyze.js",
        "originalIdentifier": "src/interfaces/cli/src/commands/analyze.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 20,
      "column": 39,
      "endLine": 20,
      "endColumn": 53,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-204",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/commands/init.js",
        "originalIdentifier": "src/interfaces/cli/src/commands/init.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 17,
      "column": 39,
      "endLine": 17,
      "endColumn": 53,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-205",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/commands/init.js",
        "originalIdentifier": "src/interfaces/cli/src/commands/init.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 26,
      "column": 34,
      "endLine": 26,
      "endColumn": 46,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-206",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/commands/init.js",
        "originalIdentifier": "src/interfaces/cli/src/commands/init.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 88,
      "column": 37,
      "endLine": 88,
      "endColumn": 51,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-207",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/commands/init.js",
        "originalIdentifier": "src/interfaces/cli/src/commands/init.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 89,
      "column": 38,
      "endLine": 89,
      "endColumn": 52,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-208",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/commands/init.js",
        "originalIdentifier": "src/interfaces/cli/src/commands/init.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 90,
      "column": 29,
      "endLine": 90,
      "endColumn": 43,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-209",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/commands/init.js",
        "originalIdentifier": "src/interfaces/cli/src/commands/init.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 96,
      "column": 50,
      "endLine": 96,
      "endColumn": 64,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-210",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/commands/init.js",
        "originalIdentifier": "src/interfaces/cli/src/commands/init.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 98,
      "column": 56,
      "endLine": 98,
      "endColumn": 70,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-211",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/commands/init.js",
        "originalIdentifier": "src/interfaces/cli/src/commands/init.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 161,
      "column": 59,
      "endLine": 161,
      "endColumn": 73,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-212",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/commands/init.js",
        "originalIdentifier": "src/interfaces/cli/src/commands/init.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 162,
      "column": 60,
      "endLine": 162,
      "endColumn": 74,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-213",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/commands/init.js",
        "originalIdentifier": "src/interfaces/cli/src/commands/init.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 163,
      "column": 58,
      "endLine": 163,
      "endColumn": 72,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-214",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/commands/serve.js",
        "originalIdentifier": "src/interfaces/cli/src/commands/serve.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 19,
      "column": 39,
      "endLine": 19,
      "endColumn": 53,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-215",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/config-manager.js",
        "originalIdentifier": "src/interfaces/cli/src/core/config-manager.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 11,
      "column": 47,
      "endLine": 11,
      "endColumn": 61,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-216",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "originalIdentifier": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 90,
      "column": 36,
      "endLine": 90,
      "endColumn": 50,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring-217",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "originalIdentifier": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "ruleId": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "line": 111,
      "column": 24,
      "endLine": 111,
      "endColumn": 67,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-218",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "originalIdentifier": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 128,
      "column": 39,
      "endLine": 128,
      "endColumn": 53,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-219",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "originalIdentifier": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 160,
      "column": 36,
      "endLine": 160,
      "endColumn": 50,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-220",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "originalIdentifier": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 160,
      "column": 52,
      "endLine": 160,
      "endColumn": 75,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-221",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "originalIdentifier": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 205,
      "column": 40,
      "endLine": 205,
      "endColumn": 54,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-222",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "originalIdentifier": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 235,
      "column": 37,
      "endLine": 235,
      "endColumn": 51,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-223",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "originalIdentifier": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 282,
      "column": 31,
      "endLine": 282,
      "endColumn": 45,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp-224",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "originalIdentifier": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "RegExp() called with a `tagName` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
      "description": "RegExp() called with a `tagName` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
      "ruleId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
      "line": 320,
      "column": 29,
      "endLine": 320,
      "endColumn": 75,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-1333: Inefficient Regular Expression Complexity"
        ],
        "owasp": [
          "A05:2021 - Security Misconfiguration",
          "A06:2017 - Security Misconfiguration"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-225",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "originalIdentifier": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 325,
      "column": 39,
      "endLine": 325,
      "endColumn": 53,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-226",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "originalIdentifier": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 367,
      "column": 33,
      "endLine": 367,
      "endColumn": 47,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-227",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "originalIdentifier": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 400,
      "column": 37,
      "endLine": 400,
      "endColumn": 51,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-228",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "originalIdentifier": "src/interfaces/cli/src/core/dependency-analyzer.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 427,
      "column": 40,
      "endLine": 427,
      "endColumn": 54,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-229",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/file-processor.js",
        "originalIdentifier": "src/interfaces/cli/src/core/file-processor.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 78,
      "column": 55,
      "endLine": 78,
      "endColumn": 67,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-230",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/language-detector.js",
        "originalIdentifier": "src/interfaces/cli/src/core/language-detector.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 169,
      "column": 36,
      "endLine": 169,
      "endColumn": 50,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-231",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
        "originalIdentifier": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 284,
      "column": 53,
      "endLine": 284,
      "endColumn": 65,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-232",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
        "originalIdentifier": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 341,
      "column": 45,
      "endLine": 341,
      "endColumn": 56,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-233",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
        "originalIdentifier": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 341,
      "column": 58,
      "endLine": 341,
      "endColumn": 62,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-234",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
        "originalIdentifier": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 465,
      "column": 37,
      "endLine": 465,
      "endColumn": 45,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-235",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
        "originalIdentifier": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 465,
      "column": 47,
      "endLine": 465,
      "endColumn": 64,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-236",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
        "originalIdentifier": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 472,
      "column": 36,
      "endLine": 472,
      "endColumn": 44,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-237",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
        "originalIdentifier": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 472,
      "column": 46,
      "endLine": 472,
      "endColumn": 63,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage-238",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/live-server.js",
        "originalIdentifier": "src/interfaces/cli/src/live-server.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.",
      "description": "A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.",
      "ruleId": "javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
      "line": 26,
      "column": 5,
      "endLine": 26,
      "endColumn": 25,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-352: Cross-Site Request Forgery (CSRF)"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://www.npmjs.com/package/csurf",
          "https://www.npmjs.com/package/csrf",
          "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
        ],
        "confidence": "LOW",
        "impact": "HIGH"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-problem-based-packs.insecure-transport.js-node.using-http-server.using-http-server-239",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/live-server.js",
        "originalIdentifier": "src/interfaces/cli/src/live-server.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.",
      "description": "Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.",
      "ruleId": "problem-based-packs.insecure-transport.js-node.using-http-server.using-http-server",
      "line": 27,
      "column": 19,
      "endLine": 27,
      "endColumn": 23,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
        "owasp": [
          "A02:2021 - Cryptographic Failures",
          "A03:2017 - Sensitive Data Exposure"
        ],
        "references": [
          "https://nodejs.org/api/http.html#http_class_http_agent",
          "https://groups.google.com/g/rubyonrails-security/c/NCCsca7TEtY"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-240",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/live-server.js",
        "originalIdentifier": "src/interfaces/cli/src/live-server.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 40,
      "column": 40,
      "endLine": 40,
      "endColumn": 54,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-241",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/live-server.js",
        "originalIdentifier": "src/interfaces/cli/src/live-server.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 261,
      "column": 58,
      "endLine": 261,
      "endColumn": 66,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-242",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/live-server.js",
        "originalIdentifier": "src/interfaces/cli/src/live-server.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "security",
      "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
      "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
      "line": 389,
      "column": 55,
      "endLine": 389,
      "endColumn": 63,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
        ],
        "owasp": [
          "A05:2017 - Broken Access Control",
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://owasp.org/www-community/attacks/Path_Traversal"
        ],
        "confidence": "LOW",
        "impact": "MEDIUM"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring-243",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/live-server.js",
        "originalIdentifier": "src/interfaces/cli/src/live-server.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "ruleId": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "line": 411,
      "column": 21,
      "endLine": 411,
      "endColumn": 71,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "semgrep-javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring-244",
      "entity": {
        "canonicalPath": "src/interfaces/cli/src/live-server.js",
        "originalIdentifier": "src/interfaces/cli/src/live-server.js",
        "toolName": "Semgrep",
        "confidence": 1
      },
      "severity": "info",
      "analysisType": "security",
      "title": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "description": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.",
      "ruleId": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring",
      "line": 439,
      "column": 21,
      "endLine": 439,
      "endColumn": 55,
      "toolName": "Semgrep",
      "metadata": {
        "category": "security",
        "cwe": [
          "CWE-134: Use of Externally-Controlled Format String"
        ],
        "owasp": [
          "A01:2021 - Broken Access Control"
        ],
        "references": [
          "https://cwe.mitre.org/data/definitions/134.html"
        ],
        "confidence": "LOW",
        "impact": "LOW"
      },
      "createdAt": "2025-09-07T01:38:04.355Z"
    },
    {
      "id": "codeql-js/xss-through-dom-0",
      "entity": {
        "canonicalPath": "examples/topolop-enhanced-aggregated-3d.html",
        "originalIdentifier": "examples/topolop-enhanced-aggregated-3d.html",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "[DOM text](1) is reinterpreted as HTML without escaping meta-characters.",
      "description": "[DOM text](1) is reinterpreted as HTML without escaping meta-characters.",
      "ruleId": "js/xss-through-dom",
      "line": 599,
      "column": 63,
      "endLine": 603,
      "endColumn": 14,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 7,
        "uri": "examples/topolop-enhanced-aggregated-3d.html"
      },
      "createdAt": "2025-09-07T01:38:04.369Z"
    },
    {
      "id": "codeql-js/xss-through-dom-1",
      "entity": {
        "canonicalPath": "examples/topolop-real-data-3d.html",
        "originalIdentifier": "examples/topolop-real-data-3d.html",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "[DOM text](1) is reinterpreted as HTML without escaping meta-characters.",
      "description": "[DOM text](1) is reinterpreted as HTML without escaping meta-characters.",
      "ruleId": "js/xss-through-dom",
      "line": 599,
      "column": 63,
      "endLine": 603,
      "endColumn": 14,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 7,
        "uri": "examples/topolop-real-data-3d.html"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/functionality-from-untrusted-source-2",
      "entity": {
        "canonicalPath": "core/canvas-renderer/public/3d-city-viewer.html",
        "originalIdentifier": "core/canvas-renderer/public/3d-city-viewer.html",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Script loaded from content delivery network with no integrity check.",
      "description": "Script loaded from content delivery network with no integrity check.",
      "ruleId": "js/functionality-from-untrusted-source",
      "line": 7,
      "column": 5,
      "endLine": null,
      "endColumn": 94,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 30,
        "uri": "core/canvas-renderer/public/3d-city-viewer.html"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/functionality-from-untrusted-source-3",
      "entity": {
        "canonicalPath": "core/canvas-renderer/public/DEVELOPER-VIEW.html",
        "originalIdentifier": "core/canvas-renderer/public/DEVELOPER-VIEW.html",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Script loaded from content delivery network with no integrity check.",
      "description": "Script loaded from content delivery network with no integrity check.",
      "ruleId": "js/functionality-from-untrusted-source",
      "line": 381,
      "column": 5,
      "endLine": null,
      "endColumn": 94,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 30,
        "uri": "core/canvas-renderer/public/DEVELOPER-VIEW.html"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/functionality-from-untrusted-source-4",
      "entity": {
        "canonicalPath": "core/canvas-renderer/public/MAIN-TEMPLATE.html",
        "originalIdentifier": "core/canvas-renderer/public/MAIN-TEMPLATE.html",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Script loaded from content delivery network with no integrity check.",
      "description": "Script loaded from content delivery network with no integrity check.",
      "ruleId": "js/functionality-from-untrusted-source",
      "line": 7,
      "column": 5,
      "endLine": null,
      "endColumn": 94,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 30,
        "uri": "core/canvas-renderer/public/MAIN-TEMPLATE.html"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/functionality-from-untrusted-source-5",
      "entity": {
        "canonicalPath": "core/canvas-renderer/public/immersive-unified-city.html",
        "originalIdentifier": "core/canvas-renderer/public/immersive-unified-city.html",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Script loaded from content delivery network with no integrity check.",
      "description": "Script loaded from content delivery network with no integrity check.",
      "ruleId": "js/functionality-from-untrusted-source",
      "line": 7,
      "column": 5,
      "endLine": null,
      "endColumn": 94,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 30,
        "uri": "core/canvas-renderer/public/immersive-unified-city.html"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/functionality-from-untrusted-source-6",
      "entity": {
        "canonicalPath": "examples/3d-city-explorer.html",
        "originalIdentifier": "examples/3d-city-explorer.html",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Script loaded from content delivery network with no integrity check.",
      "description": "Script loaded from content delivery network with no integrity check.",
      "ruleId": "js/functionality-from-untrusted-source",
      "line": 322,
      "column": 5,
      "endLine": null,
      "endColumn": 94,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 30,
        "uri": "examples/3d-city-explorer.html"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/functionality-from-untrusted-source-7",
      "entity": {
        "canonicalPath": "examples/topolop-3d-explorer-enhanced.html",
        "originalIdentifier": "examples/topolop-3d-explorer-enhanced.html",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Script loaded from content delivery network with no integrity check.",
      "description": "Script loaded from content delivery network with no integrity check.",
      "ruleId": "js/functionality-from-untrusted-source",
      "line": 322,
      "column": 5,
      "endLine": null,
      "endColumn": 94,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 30,
        "uri": "examples/topolop-3d-explorer-enhanced.html"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/functionality-from-untrusted-source-8",
      "entity": {
        "canonicalPath": "examples/topolop-3d-explorer-real-data.html",
        "originalIdentifier": "examples/topolop-3d-explorer-real-data.html",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Script loaded from content delivery network with no integrity check.",
      "description": "Script loaded from content delivery network with no integrity check.",
      "ruleId": "js/functionality-from-untrusted-source",
      "line": 371,
      "column": 5,
      "endLine": null,
      "endColumn": 94,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 30,
        "uri": "examples/topolop-3d-explorer-real-data.html"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/functionality-from-untrusted-source-9",
      "entity": {
        "canonicalPath": "examples/topolop-enhanced-aggregated-3d.html",
        "originalIdentifier": "examples/topolop-enhanced-aggregated-3d.html",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Script loaded from content delivery network with no integrity check.",
      "description": "Script loaded from content delivery network with no integrity check.",
      "ruleId": "js/functionality-from-untrusted-source",
      "line": 306,
      "column": 5,
      "endLine": null,
      "endColumn": 94,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 30,
        "uri": "examples/topolop-enhanced-aggregated-3d.html"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/functionality-from-untrusted-source-10",
      "entity": {
        "canonicalPath": "examples/topolop-filtered-3d-explorer.html",
        "originalIdentifier": "examples/topolop-filtered-3d-explorer.html",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Script loaded from content delivery network with no integrity check.",
      "description": "Script loaded from content delivery network with no integrity check.",
      "ruleId": "js/functionality-from-untrusted-source",
      "line": 367,
      "column": 5,
      "endLine": null,
      "endColumn": 94,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 30,
        "uri": "examples/topolop-filtered-3d-explorer.html"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/functionality-from-untrusted-source-11",
      "entity": {
        "canonicalPath": "examples/topolop-real-data-3d.html",
        "originalIdentifier": "examples/topolop-real-data-3d.html",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Script loaded from content delivery network with no integrity check.",
      "description": "Script loaded from content delivery network with no integrity check.",
      "ruleId": "js/functionality-from-untrusted-source",
      "line": 306,
      "column": 5,
      "endLine": null,
      "endColumn": 94,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 30,
        "uri": "examples/topolop-real-data-3d.html"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/incomplete-multi-character-sanitization-12",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/javascript/madge-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/javascript/madge-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "This string may still contain [../](1), which may cause a path injection vulnerability.",
      "description": "This string may still contain [../](1), which may cause a path injection vulnerability.",
      "ruleId": "js/incomplete-multi-character-sanitization",
      "line": 185,
      "column": 12,
      "endLine": 188,
      "endColumn": 30,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 43,
        "uri": "analyzers/formal-methods-adapters/javascript/madge-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/incomplete-url-substring-sanitization-13",
      "entity": {
        "canonicalPath": "analyzers/sonarqube-analyzer/src/index.js",
        "originalIdentifier": "analyzers/sonarqube-analyzer/src/index.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "'[sonarcloud.io](1)' can be anywhere in the URL, and arbitrary hosts may come before or after it.",
      "description": "'[sonarcloud.io](1)' can be anywhere in the URL, and arbitrary hosts may come before or after it.",
      "ruleId": "js/incomplete-url-substring-sanitization",
      "line": 186,
      "column": 38,
      "endLine": null,
      "endColumn": 83,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 56,
        "uri": "analyzers/sonarqube-analyzer/src/index.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/shell-command-injection-from-environment-14",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "This shell command depends on an uncontrolled [file name](1).",
      "description": "This shell command depends on an uncontrolled [file name](1).",
      "ruleId": "js/shell-command-injection-from-environment",
      "line": 66,
      "column": 31,
      "endLine": null,
      "endColumn": 42,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 66,
        "uri": "analyzers/formal-methods-adapters/c-cpp/clang-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/shell-command-injection-from-environment-15",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "This shell command depends on an uncontrolled [absolute path](1).\nThis shell command depends on an uncontrolled [absolute path](2).\nThis shell command depends on an uncontrolled [absolute path](3).\nThis shell command depends on an uncontrolled [absolute path](4).",
      "description": "This shell command depends on an uncontrolled [absolute path](1).\nThis shell command depends on an uncontrolled [absolute path](2).\nThis shell command depends on an uncontrolled [absolute path](3).\nThis shell command depends on an uncontrolled [absolute path](4).",
      "ruleId": "js/shell-command-injection-from-environment",
      "line": 206,
      "column": 31,
      "endLine": null,
      "endColumn": 38,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 66,
        "uri": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/shell-command-injection-from-environment-16",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "This shell command depends on an uncontrolled [file name](1).",
      "description": "This shell command depends on an uncontrolled [file name](1).",
      "ruleId": "js/shell-command-injection-from-environment",
      "line": 208,
      "column": 31,
      "endLine": null,
      "endColumn": 42,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 66,
        "uri": "analyzers/formal-methods-adapters/universal/klee-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/shell-command-injection-from-environment-17",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "This shell command depends on an uncontrolled [file name](1).",
      "description": "This shell command depends on an uncontrolled [file name](1).",
      "ruleId": "js/shell-command-injection-from-environment",
      "line": 190,
      "column": 31,
      "endLine": null,
      "endColumn": 42,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 66,
        "uri": "analyzers/formal-methods-adapters/universal/perf-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/shell-command-injection-from-environment-18",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "This shell command depends on an uncontrolled [file name](1).",
      "description": "This shell command depends on an uncontrolled [file name](1).",
      "ruleId": "js/shell-command-injection-from-environment",
      "line": 345,
      "column": 16,
      "endLine": null,
      "endColumn": 29,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 66,
        "uri": "analyzers/formal-methods-adapters/universal/perf-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/shell-command-injection-from-environment-19",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "This shell command depends on an uncontrolled [file name](1).",
      "description": "This shell command depends on an uncontrolled [file name](1).",
      "ruleId": "js/shell-command-injection-from-environment",
      "line": 156,
      "column": 31,
      "endLine": null,
      "endColumn": 42,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 66,
        "uri": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/shell-command-injection-from-environment-20",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "This shell command depends on an uncontrolled [file name](1).",
      "description": "This shell command depends on an uncontrolled [file name](1).",
      "ruleId": "js/shell-command-injection-from-environment",
      "line": 362,
      "column": 31,
      "endLine": null,
      "endColumn": 41,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 66,
        "uri": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/shell-command-injection-from-environment-21",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "This shell command depends on an uncontrolled [file name](1).",
      "description": "This shell command depends on an uncontrolled [file name](1).",
      "ruleId": "js/shell-command-injection-from-environment",
      "line": 484,
      "column": 31,
      "endLine": null,
      "endColumn": 43,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 66,
        "uri": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/shell-command-injection-from-environment-22",
      "entity": {
        "canonicalPath": "analyzers/github-codeql-analyzer/src/codeql-client.js",
        "originalIdentifier": "analyzers/github-codeql-analyzer/src/codeql-client.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "This shell command depends on an uncontrolled [absolute path](1).\nThis shell command depends on an uncontrolled [absolute path](2).\nThis shell command depends on an uncontrolled [absolute path](3).\nThis shell command depends on an uncontrolled [absolute path](4).\nThis shell command depends on an uncontrolled [absolute path](5).",
      "description": "This shell command depends on an uncontrolled [absolute path](1).\nThis shell command depends on an uncontrolled [absolute path](2).\nThis shell command depends on an uncontrolled [absolute path](3).\nThis shell command depends on an uncontrolled [absolute path](4).\nThis shell command depends on an uncontrolled [absolute path](5).",
      "ruleId": "js/shell-command-injection-from-environment",
      "line": 83,
      "column": 50,
      "endLine": null,
      "endColumn": 88,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 66,
        "uri": "analyzers/github-codeql-analyzer/src/codeql-client.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/shell-command-injection-from-environment-23",
      "entity": {
        "canonicalPath": "analyzers/github-codeql-analyzer/src/codeql-client.js",
        "originalIdentifier": "analyzers/github-codeql-analyzer/src/codeql-client.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "This shell command depends on an uncontrolled [absolute path](1).\nThis shell command depends on an uncontrolled [absolute path](2).\nThis shell command depends on an uncontrolled [absolute path](3).\nThis shell command depends on an uncontrolled [absolute path](4).\nThis shell command depends on an uncontrolled [absolute path](5).",
      "description": "This shell command depends on an uncontrolled [absolute path](1).\nThis shell command depends on an uncontrolled [absolute path](2).\nThis shell command depends on an uncontrolled [absolute path](3).\nThis shell command depends on an uncontrolled [absolute path](4).\nThis shell command depends on an uncontrolled [absolute path](5).",
      "ruleId": "js/shell-command-injection-from-environment",
      "line": 122,
      "column": 50,
      "endLine": null,
      "endColumn": 88,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 66,
        "uri": "analyzers/github-codeql-analyzer/src/codeql-client.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/shell-command-injection-from-environment-24",
      "entity": {
        "canonicalPath": "analyzers/semgrep-analyzer/src/semgrep-client.js",
        "originalIdentifier": "analyzers/semgrep-analyzer/src/semgrep-client.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "This shell command depends on an uncontrolled [absolute path](1).\nThis shell command depends on an uncontrolled [absolute path](2).\nThis shell command depends on an uncontrolled [absolute path](3).\nThis shell command depends on an uncontrolled [absolute path](4).",
      "description": "This shell command depends on an uncontrolled [absolute path](1).\nThis shell command depends on an uncontrolled [absolute path](2).\nThis shell command depends on an uncontrolled [absolute path](3).\nThis shell command depends on an uncontrolled [absolute path](4).",
      "ruleId": "js/shell-command-injection-from-environment",
      "line": 60,
      "column": 50,
      "endLine": null,
      "endColumn": 89,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 66,
        "uri": "analyzers/semgrep-analyzer/src/semgrep-client.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/shell-command-constructed-from-input-25",
      "entity": {
        "canonicalPath": "analyzers/github-codeql-analyzer/src/codeql-client.js",
        "originalIdentifier": "analyzers/github-codeql-analyzer/src/codeql-client.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "This string concatenation which depends on [library input](1) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](3) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](4) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](5) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](6) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](7) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](8) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](9) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](10) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](11) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](12) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](13) is later used in a [shell command](2).",
      "description": "This string concatenation which depends on [library input](1) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](3) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](4) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](5) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](6) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](7) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](8) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](9) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](10) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](11) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](12) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](13) is later used in a [shell command](2).",
      "ruleId": "js/shell-command-constructed-from-input",
      "line": 83,
      "column": 50,
      "endLine": null,
      "endColumn": 88,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 70,
        "uri": "analyzers/github-codeql-analyzer/src/codeql-client.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/shell-command-constructed-from-input-26",
      "entity": {
        "canonicalPath": "analyzers/github-codeql-analyzer/src/codeql-client.js",
        "originalIdentifier": "analyzers/github-codeql-analyzer/src/codeql-client.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "This string concatenation which depends on [library input](1) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](3) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](4) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](5) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](6) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](7) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](8) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](9) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](10) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](11) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](12) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](13) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](14) is later used in a [shell command](2).",
      "description": "This string concatenation which depends on [library input](1) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](3) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](4) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](5) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](6) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](7) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](8) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](9) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](10) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](11) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](12) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](13) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](14) is later used in a [shell command](2).",
      "ruleId": "js/shell-command-constructed-from-input",
      "line": 122,
      "column": 50,
      "endLine": null,
      "endColumn": 88,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 70,
        "uri": "analyzers/github-codeql-analyzer/src/codeql-client.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/shell-command-constructed-from-input-27",
      "entity": {
        "canonicalPath": "analyzers/github-codeql-analyzer/src/codeql-client.js",
        "originalIdentifier": "analyzers/github-codeql-analyzer/src/codeql-client.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "This string concatenation which depends on [library input](1) is later used in a [shell command](2).",
      "description": "This string concatenation which depends on [library input](1) is later used in a [shell command](2).",
      "ruleId": "js/shell-command-constructed-from-input",
      "line": 221,
      "column": 42,
      "endLine": null,
      "endColumn": 98,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 70,
        "uri": "analyzers/github-codeql-analyzer/src/codeql-client.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/shell-command-constructed-from-input-28",
      "entity": {
        "canonicalPath": "analyzers/semgrep-analyzer/src/semgrep-client.js",
        "originalIdentifier": "analyzers/semgrep-analyzer/src/semgrep-client.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "This string concatenation which depends on [library input](1) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](3) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](4) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](5) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](6) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](7) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](8) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](9) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](10) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](11) is later used in a [shell command](2).",
      "description": "This string concatenation which depends on [library input](1) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](3) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](4) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](5) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](6) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](7) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](8) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](9) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](10) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](11) is later used in a [shell command](2).",
      "ruleId": "js/shell-command-constructed-from-input",
      "line": 60,
      "column": 50,
      "endLine": null,
      "endColumn": 89,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 70,
        "uri": "analyzers/semgrep-analyzer/src/semgrep-client.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/log-injection-29",
      "entity": {
        "canonicalPath": "interfaces/cli/src/live-server.js",
        "originalIdentifier": "interfaces/cli/src/live-server.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Log entry depends on a [user-provided value](1).",
      "description": "Log entry depends on a [user-provided value](1).",
      "ruleId": "js/log-injection",
      "line": 143,
      "column": 56,
      "endLine": null,
      "endColumn": 60,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 83,
        "uri": "interfaces/cli/src/live-server.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/log-injection-30",
      "entity": {
        "canonicalPath": "interfaces/cli/src/live-server.js",
        "originalIdentifier": "interfaces/cli/src/live-server.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Log entry depends on a [user-provided value](1).",
      "description": "Log entry depends on a [user-provided value](1).",
      "ruleId": "js/log-injection",
      "line": 254,
      "column": 46,
      "endLine": null,
      "endColumn": 55,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 83,
        "uri": "interfaces/cli/src/live-server.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/file-system-race-31",
      "entity": {
        "canonicalPath": "analyzers/utils/fs-utils.js",
        "originalIdentifier": "analyzers/utils/fs-utils.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "The file may have changed since it [was checked](1).\nThe file may have changed since it [was checked](2).",
      "description": "The file may have changed since it [was checked](1).\nThe file may have changed since it [was checked](2).",
      "ruleId": "js/file-system-race",
      "line": 55,
      "column": 20,
      "endLine": null,
      "endColumn": 51,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 88,
        "uri": "analyzers/utils/fs-utils.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/file-system-race-32",
      "entity": {
        "canonicalPath": "analyzers/utils/fs-utils.js",
        "originalIdentifier": "analyzers/utils/fs-utils.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "The file may have changed since it [was checked](1).\nThe file may have changed since it [was checked](2).",
      "description": "The file may have changed since it [was checked](1).\nThe file may have changed since it [was checked](2).",
      "ruleId": "js/file-system-race",
      "line": 59,
      "column": 31,
      "endLine": null,
      "endColumn": 70,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 88,
        "uri": "analyzers/utils/fs-utils.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/file-system-race-33",
      "entity": {
        "canonicalPath": "interfaces/cli/src/live-server.js",
        "originalIdentifier": "interfaces/cli/src/live-server.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "The file may have changed since it [was checked](1).",
      "description": "The file may have changed since it [was checked](1).",
      "ruleId": "js/file-system-race",
      "line": 280,
      "column": 29,
      "endLine": null,
      "endColumn": 58,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 88,
        "uri": "interfaces/cli/src/live-server.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/file-system-race-34",
      "entity": {
        "canonicalPath": "interfaces/cli/src/live-server.js",
        "originalIdentifier": "interfaces/cli/src/live-server.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "The file may have changed since it [was checked](1).",
      "description": "The file may have changed since it [was checked](1).",
      "ruleId": "js/file-system-race",
      "line": 418,
      "column": 29,
      "endLine": null,
      "endColumn": 58,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 88,
        "uri": "interfaces/cli/src/live-server.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/http-to-file-access-35",
      "entity": {
        "canonicalPath": "analyzers/veracode-analyzer/src/cli.js",
        "originalIdentifier": "analyzers/veracode-analyzer/src/cli.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Write to file system depends on [Untrusted data](1).\nWrite to file system depends on [Untrusted data](2).\nWrite to file system depends on [Untrusted data](3).",
      "description": "Write to file system depends on [Untrusted data](1).\nWrite to file system depends on [Untrusted data](2).\nWrite to file system depends on [Untrusted data](3).",
      "ruleId": "js/http-to-file-access",
      "line": 378,
      "column": 40,
      "endLine": null,
      "endColumn": 46,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 89,
        "uri": "analyzers/veracode-analyzer/src/cli.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/insecure-temporary-file-36",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/python/secure-bandit-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/python/secure-bandit-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Insecure creation of file in [the os temp dir](1).",
      "description": "Insecure creation of file in [the os temp dir](1).",
      "ruleId": "js/insecure-temporary-file",
      "line": 321,
      "column": 24,
      "endLine": null,
      "endColumn": 34,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 93,
        "uri": "analyzers/formal-methods-adapters/python/secure-bandit-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/insecure-temporary-file-37",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/python/secure-mypy-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/python/secure-mypy-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Insecure creation of file in [the os temp dir](1).",
      "description": "Insecure creation of file in [the os temp dir](1).",
      "ruleId": "js/insecure-temporary-file",
      "line": 271,
      "column": 24,
      "endLine": null,
      "endColumn": 34,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 93,
        "uri": "analyzers/formal-methods-adapters/python/secure-mypy-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/insecure-temporary-file-38",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/python/secure-pylint-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/python/secure-pylint-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Insecure creation of file in [the os temp dir](1).",
      "description": "Insecure creation of file in [the os temp dir](1).",
      "ruleId": "js/insecure-temporary-file",
      "line": 267,
      "column": 24,
      "endLine": null,
      "endColumn": 34,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 93,
        "uri": "analyzers/formal-methods-adapters/python/secure-pylint-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/insecure-temporary-file-39",
      "entity": {
        "canonicalPath": "analyzers/utils/fs-utils.js",
        "originalIdentifier": "analyzers/utils/fs-utils.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Insecure creation of file in [the os temp dir](1).",
      "description": "Insecure creation of file in [the os temp dir](1).",
      "ruleId": "js/insecure-temporary-file",
      "line": 260,
      "column": 24,
      "endLine": null,
      "endColumn": 32,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 93,
        "uri": "analyzers/utils/fs-utils.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/indirect-command-line-injection-40",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "This command depends on an unsanitized [command-line argument](1).",
      "description": "This command depends on an unsanitized [command-line argument](1).",
      "ruleId": "js/indirect-command-line-injection",
      "line": 206,
      "column": 31,
      "endLine": null,
      "endColumn": 38,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 98,
        "uri": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/indirect-command-line-injection-41",
      "entity": {
        "canonicalPath": "analyzers/github-codeql-analyzer/src/codeql-client.js",
        "originalIdentifier": "analyzers/github-codeql-analyzer/src/codeql-client.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "This command depends on an unsanitized [command-line argument](1).",
      "description": "This command depends on an unsanitized [command-line argument](1).",
      "ruleId": "js/indirect-command-line-injection",
      "line": 83,
      "column": 50,
      "endLine": null,
      "endColumn": 88,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 98,
        "uri": "analyzers/github-codeql-analyzer/src/codeql-client.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/indirect-command-line-injection-42",
      "entity": {
        "canonicalPath": "analyzers/github-codeql-analyzer/src/codeql-client.js",
        "originalIdentifier": "analyzers/github-codeql-analyzer/src/codeql-client.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "This command depends on an unsanitized [command-line argument](1).",
      "description": "This command depends on an unsanitized [command-line argument](1).",
      "ruleId": "js/indirect-command-line-injection",
      "line": 122,
      "column": 50,
      "endLine": null,
      "endColumn": 88,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 98,
        "uri": "analyzers/github-codeql-analyzer/src/codeql-client.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/indirect-command-line-injection-43",
      "entity": {
        "canonicalPath": "analyzers/github-codeql-analyzer/src/codeql-client.js",
        "originalIdentifier": "analyzers/github-codeql-analyzer/src/codeql-client.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "This command depends on an unsanitized [command-line argument](1).",
      "description": "This command depends on an unsanitized [command-line argument](1).",
      "ruleId": "js/indirect-command-line-injection",
      "line": 221,
      "column": 42,
      "endLine": null,
      "endColumn": 98,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 98,
        "uri": "analyzers/github-codeql-analyzer/src/codeql-client.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/indirect-command-line-injection-44",
      "entity": {
        "canonicalPath": "analyzers/semgrep-analyzer/src/semgrep-client.js",
        "originalIdentifier": "analyzers/semgrep-analyzer/src/semgrep-client.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "This command depends on an unsanitized [command-line argument](1).",
      "description": "This command depends on an unsanitized [command-line argument](1).",
      "ruleId": "js/indirect-command-line-injection",
      "line": 60,
      "column": 50,
      "endLine": null,
      "endColumn": 89,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 98,
        "uri": "analyzers/semgrep-analyzer/src/semgrep-client.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/useless-assignment-to-local-45",
      "entity": {
        "canonicalPath": "analyzers/sonarqube-analyzer/src/sonarqube-client.js",
        "originalIdentifier": "analyzers/sonarqube-analyzer/src/sonarqube-client.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "The initial value of totalPages is unused, since it is always overwritten.",
      "description": "The initial value of totalPages is unused, since it is always overwritten.",
      "ruleId": "js/useless-assignment-to-local",
      "line": 182,
      "column": 9,
      "endLine": null,
      "endColumn": 23,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 126,
        "uri": "analyzers/sonarqube-analyzer/src/sonarqube-client.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/useless-assignment-to-local-46",
      "entity": {
        "canonicalPath": "examples/3d-city-explorer.html",
        "originalIdentifier": "examples/3d-city-explorer.html",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "The initial value of color is unused, since it is always overwritten.",
      "description": "The initial value of color is unused, since it is always overwritten.",
      "ruleId": "js/useless-assignment-to-local",
      "line": 471,
      "column": 29,
      "endLine": null,
      "endColumn": 45,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 126,
        "uri": "examples/3d-city-explorer.html"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/useless-assignment-to-local-47",
      "entity": {
        "canonicalPath": "examples/topolop-3d-explorer-enhanced.html",
        "originalIdentifier": "examples/topolop-3d-explorer-enhanced.html",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "The initial value of color is unused, since it is always overwritten.",
      "description": "The initial value of color is unused, since it is always overwritten.",
      "ruleId": "js/useless-assignment-to-local",
      "line": 471,
      "column": 29,
      "endLine": null,
      "endColumn": 45,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 126,
        "uri": "examples/topolop-3d-explorer-enhanced.html"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-48",
      "entity": {
        "canonicalPath": "analyzers/ast-analyzer/src/parsers/java-parser.js",
        "originalIdentifier": "analyzers/ast-analyzer/src/parsers/java-parser.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable depth.",
      "description": "Unused variable depth.",
      "ruleId": "js/unused-local-variable",
      "line": 152,
      "column": 9,
      "endLine": null,
      "endColumn": 14,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/ast-analyzer/src/parsers/java-parser.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-49",
      "entity": {
        "canonicalPath": "analyzers/ast-analyzer/src/parsers/javascript-parser.js",
        "originalIdentifier": "analyzers/ast-analyzer/src/parsers/javascript-parser.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable depth.",
      "description": "Unused variable depth.",
      "ruleId": "js/unused-local-variable",
      "line": 126,
      "column": 9,
      "endLine": null,
      "endColumn": 14,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/ast-analyzer/src/parsers/javascript-parser.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-50",
      "entity": {
        "canonicalPath": "analyzers/ast-analyzer/src/parsers/python-parser.js",
        "originalIdentifier": "analyzers/ast-analyzer/src/parsers/python-parser.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable depth.",
      "description": "Unused variable depth.",
      "ruleId": "js/unused-local-variable",
      "line": 226,
      "column": 9,
      "endLine": null,
      "endColumn": 14,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/ast-analyzer/src/parsers/python-parser.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-51",
      "entity": {
        "canonicalPath": "analyzers/checkmarx-analyzer/src/checkmarx-client.js",
        "originalIdentifier": "analyzers/checkmarx-analyzer/src/checkmarx-client.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable fs.",
      "description": "Unused variable fs.",
      "ruleId": "js/unused-local-variable",
      "line": 2,
      "column": 7,
      "endLine": null,
      "endColumn": 9,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/checkmarx-analyzer/src/checkmarx-client.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-52",
      "entity": {
        "canonicalPath": "analyzers/checkmarx-analyzer/src/checkmarx-mapper.js",
        "originalIdentifier": "analyzers/checkmarx-analyzer/src/checkmarx-mapper.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable sastMetrics.",
      "description": "Unused variable sastMetrics.",
      "ruleId": "js/unused-local-variable",
      "line": 281,
      "column": 11,
      "endLine": null,
      "endColumn": 22,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/checkmarx-analyzer/src/checkmarx-mapper.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-53",
      "entity": {
        "canonicalPath": "analyzers/checkmarx-analyzer/src/checkmarx-mapper.js",
        "originalIdentifier": "analyzers/checkmarx-analyzer/src/checkmarx-mapper.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable totalVulns.",
      "description": "Unused variable totalVulns.",
      "ruleId": "js/unused-local-variable",
      "line": 361,
      "column": 11,
      "endLine": null,
      "endColumn": 21,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/checkmarx-analyzer/src/checkmarx-mapper.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-54",
      "entity": {
        "canonicalPath": "analyzers/checkmarx-analyzer/src/cli.js",
        "originalIdentifier": "analyzers/checkmarx-analyzer/src/cli.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable fs.",
      "description": "Unused variable fs.",
      "ruleId": "js/unused-local-variable",
      "line": 5,
      "column": 7,
      "endLine": null,
      "endColumn": 9,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/checkmarx-analyzer/src/cli.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-55",
      "entity": {
        "canonicalPath": "analyzers/codacy-analyzer/src/codacy-client.js",
        "originalIdentifier": "analyzers/codacy-analyzer/src/codacy-client.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable fs.",
      "description": "Unused variable fs.",
      "ruleId": "js/unused-local-variable",
      "line": 2,
      "column": 7,
      "endLine": null,
      "endColumn": 9,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/codacy-analyzer/src/codacy-client.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-56",
      "entity": {
        "canonicalPath": "analyzers/codeclimate-analyzer/src/codeclimate-mapper.js",
        "originalIdentifier": "analyzers/codeclimate-analyzer/src/codeclimate-mapper.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable criticalIssues.",
      "description": "Unused variable criticalIssues.",
      "ruleId": "js/unused-local-variable",
      "line": 310,
      "column": 11,
      "endLine": null,
      "endColumn": 25,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/codeclimate-analyzer/src/codeclimate-mapper.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-57",
      "entity": {
        "canonicalPath": "analyzers/deepsource-analyzer/src/cli.js",
        "originalIdentifier": "analyzers/deepsource-analyzer/src/cli.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable path.",
      "description": "Unused variable path.",
      "ruleId": "js/unused-local-variable",
      "line": 6,
      "column": 7,
      "endLine": null,
      "endColumn": 11,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/deepsource-analyzer/src/cli.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-58",
      "entity": {
        "canonicalPath": "analyzers/deepsource-analyzer/src/deepsource-client.js",
        "originalIdentifier": "analyzers/deepsource-analyzer/src/deepsource-client.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable axios.",
      "description": "Unused variable axios.",
      "ruleId": "js/unused-local-variable",
      "line": 2,
      "column": 7,
      "endLine": null,
      "endColumn": 12,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/deepsource-analyzer/src/deepsource-client.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-59",
      "entity": {
        "canonicalPath": "analyzers/deepsource-analyzer/src/index.js",
        "originalIdentifier": "analyzers/deepsource-analyzer/src/index.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable aiData.",
      "description": "Unused variable aiData.",
      "ruleId": "js/unused-local-variable",
      "line": 529,
      "column": 11,
      "endLine": null,
      "endColumn": 17,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/deepsource-analyzer/src/index.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-60",
      "entity": {
        "canonicalPath": "analyzers/deepsource-analyzer/src/index.js",
        "originalIdentifier": "analyzers/deepsource-analyzer/src/index.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable aiData.",
      "description": "Unused variable aiData.",
      "ruleId": "js/unused-local-variable",
      "line": 630,
      "column": 11,
      "endLine": null,
      "endColumn": 17,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/deepsource-analyzer/src/index.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-61",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/adapter-registry.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/adapter-registry.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable fs.",
      "description": "Unused variable fs.",
      "ruleId": "js/unused-local-variable",
      "line": 12,
      "column": 7,
      "endLine": null,
      "endColumn": 9,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/adapter-registry.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-62",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable outputFile.",
      "description": "Unused variable outputFile.",
      "ruleId": "js/unused-local-variable",
      "line": 45,
      "column": 11,
      "endLine": null,
      "endColumn": 21,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-63",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable results.",
      "description": "Unused variable results.",
      "ruleId": "js/unused-local-variable",
      "line": 415,
      "column": 13,
      "endLine": null,
      "endColumn": 20,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-64",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable results.",
      "description": "Unused variable results.",
      "ruleId": "js/unused-local-variable",
      "line": 359,
      "column": 13,
      "endLine": null,
      "endColumn": 20,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/c-cpp/clang-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-65",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable results.",
      "description": "Unused variable results.",
      "ruleId": "js/unused-local-variable",
      "line": 538,
      "column": 13,
      "endLine": null,
      "endColumn": 20,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-66",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/index.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/index.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable spawn.",
      "description": "Unused variable spawn.",
      "ruleId": "js/unused-local-variable",
      "line": 365,
      "column": 25,
      "endLine": null,
      "endColumn": 30,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/index.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-67",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable resolveConfig.",
      "description": "Unused variable resolveConfig.",
      "ruleId": "js/unused-local-variable",
      "line": 16,
      "column": 9,
      "endLine": null,
      "endColumn": 22,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/javascript/eslint-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-68",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/javascript/madge-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/javascript/madge-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable tree.",
      "description": "Unused variable tree.",
      "ruleId": "js/unused-local-variable",
      "line": 278,
      "column": 37,
      "endLine": null,
      "endColumn": 41,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/javascript/madge-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-69",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/javascript/madge-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/javascript/madge-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable file.",
      "description": "Unused variable file.",
      "ruleId": "js/unused-local-variable",
      "line": 304,
      "column": 17,
      "endLine": null,
      "endColumn": 21,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/javascript/madge-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-70",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/javascript/madge-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/javascript/madge-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable file.",
      "description": "Unused variable file.",
      "ruleId": "js/unused-local-variable",
      "line": 586,
      "column": 17,
      "endLine": null,
      "endColumn": 21,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/javascript/madge-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-71",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/python/bandit-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/python/bandit-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable results.",
      "description": "Unused variable results.",
      "ruleId": "js/unused-local-variable",
      "line": 202,
      "column": 13,
      "endLine": null,
      "endColumn": 20,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/python/bandit-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-72",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/python/mypy-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/python/mypy-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable fs.",
      "description": "Unused variable fs.",
      "ruleId": "js/unused-local-variable",
      "line": 15,
      "column": 7,
      "endLine": null,
      "endColumn": 9,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/python/mypy-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-73",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/python/mypy-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/python/mypy-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable results.",
      "description": "Unused variable results.",
      "ruleId": "js/unused-local-variable",
      "line": 250,
      "column": 13,
      "endLine": null,
      "endColumn": 20,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/python/mypy-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-74",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/python/pylint-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/python/pylint-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable results.",
      "description": "Unused variable results.",
      "ruleId": "js/unused-local-variable",
      "line": 188,
      "column": 13,
      "endLine": null,
      "endColumn": 20,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/python/pylint-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-75",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/python/pylint-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/python/pylint-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable district.",
      "description": "Unused variable district.",
      "ruleId": "js/unused-local-variable",
      "line": 309,
      "column": 17,
      "endLine": null,
      "endColumn": 25,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/python/pylint-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-76",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable moduleName.",
      "description": "Unused variable moduleName.",
      "ruleId": "js/unused-local-variable",
      "line": 292,
      "column": 17,
      "endLine": null,
      "endColumn": 27,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/python/pyreverse-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-77",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/python/secure-bandit-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/python/secure-bandit-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable results.",
      "description": "Unused variable results.",
      "ruleId": "js/unused-local-variable",
      "line": 631,
      "column": 13,
      "endLine": null,
      "endColumn": 20,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/python/secure-bandit-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.370Z"
    },
    {
      "id": "codeql-js/unused-local-variable-78",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/python/secure-mypy-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/python/secure-mypy-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable results.",
      "description": "Unused variable results.",
      "ruleId": "js/unused-local-variable",
      "line": 647,
      "column": 13,
      "endLine": null,
      "endColumn": 20,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/python/secure-mypy-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-79",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/python/secure-pylint-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/python/secure-pylint-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable results.",
      "description": "Unused variable results.",
      "ruleId": "js/unused-local-variable",
      "line": 588,
      "column": 13,
      "endLine": null,
      "endColumn": 20,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/python/secure-pylint-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-80",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/python/secure-pylint-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/python/secure-pylint-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable district.",
      "description": "Unused variable district.",
      "ruleId": "js/unused-local-variable",
      "line": 707,
      "column": 17,
      "endLine": null,
      "endColumn": 25,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/python/secure-pylint-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-81",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable fs.",
      "description": "Unused variable fs.",
      "ruleId": "js/unused-local-variable",
      "line": 15,
      "column": 7,
      "endLine": null,
      "endColumn": 9,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-82",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable timed.",
      "description": "Unused variable timed.",
      "ruleId": "js/unused-local-variable",
      "line": 20,
      "column": 9,
      "endLine": null,
      "endColumn": 14,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-83",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable withTimeout.",
      "description": "Unused variable withTimeout.",
      "ruleId": "js/unused-local-variable",
      "line": 20,
      "column": 16,
      "endLine": null,
      "endColumn": 27,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-84",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable output.",
      "description": "Unused variable output.",
      "ruleId": "js/unused-local-variable",
      "line": 206,
      "column": 13,
      "endLine": null,
      "endColumn": 19,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-85",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/universal/klee-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable results.",
      "description": "Unused variable results.",
      "ruleId": "js/unused-local-variable",
      "line": 533,
      "column": 13,
      "endLine": null,
      "endColumn": 20,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/universal/klee-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-86",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/universal/perf-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable results.",
      "description": "Unused variable results.",
      "ruleId": "js/unused-local-variable",
      "line": 591,
      "column": 13,
      "endLine": null,
      "endColumn": 20,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/universal/perf-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-87",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable output.",
      "description": "Unused variable output.",
      "ruleId": "js/unused-local-variable",
      "line": 484,
      "column": 13,
      "endLine": null,
      "endColumn": 19,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-88",
      "entity": {
        "canonicalPath": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "originalIdentifier": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable results.",
      "description": "Unused variable results.",
      "ruleId": "js/unused-local-variable",
      "line": 604,
      "column": 13,
      "endLine": null,
      "endColumn": 20,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-89",
      "entity": {
        "canonicalPath": "analyzers/github-codeql-analyzer/src/cli.js",
        "originalIdentifier": "analyzers/github-codeql-analyzer/src/cli.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable path.",
      "description": "Unused variable path.",
      "ruleId": "js/unused-local-variable",
      "line": 12,
      "column": 7,
      "endLine": null,
      "endColumn": 11,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/github-codeql-analyzer/src/cli.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-90",
      "entity": {
        "canonicalPath": "analyzers/github-codeql-analyzer/src/codeql-client.js",
        "originalIdentifier": "analyzers/github-codeql-analyzer/src/codeql-client.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable spawn.",
      "description": "Unused variable spawn.",
      "ruleId": "js/unused-local-variable",
      "line": 1,
      "column": 9,
      "endLine": null,
      "endColumn": 14,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/github-codeql-analyzer/src/codeql-client.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-91",
      "entity": {
        "canonicalPath": "analyzers/github-codeql-analyzer/src/codeql-mapper.js",
        "originalIdentifier": "analyzers/github-codeql-analyzer/src/codeql-mapper.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable totalFindings.",
      "description": "Unused variable totalFindings.",
      "ruleId": "js/unused-local-variable",
      "line": 271,
      "column": 11,
      "endLine": null,
      "endColumn": 24,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/github-codeql-analyzer/src/codeql-mapper.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-92",
      "entity": {
        "canonicalPath": "analyzers/semgrep-analyzer/src/cli.js",
        "originalIdentifier": "analyzers/semgrep-analyzer/src/cli.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable path.",
      "description": "Unused variable path.",
      "ruleId": "js/unused-local-variable",
      "line": 12,
      "column": 7,
      "endLine": null,
      "endColumn": 11,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/semgrep-analyzer/src/cli.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-93",
      "entity": {
        "canonicalPath": "analyzers/semgrep-analyzer/src/semgrep-client.js",
        "originalIdentifier": "analyzers/semgrep-analyzer/src/semgrep-client.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable spawn.",
      "description": "Unused variable spawn.",
      "ruleId": "js/unused-local-variable",
      "line": 1,
      "column": 9,
      "endLine": null,
      "endColumn": 14,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/semgrep-analyzer/src/semgrep-client.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-94",
      "entity": {
        "canonicalPath": "analyzers/semgrep-analyzer/src/semgrep-client.js",
        "originalIdentifier": "analyzers/semgrep-analyzer/src/semgrep-client.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable stderr.",
      "description": "Unused variable stderr.",
      "ruleId": "js/unused-local-variable",
      "line": 60,
      "column": 23,
      "endLine": null,
      "endColumn": 29,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/semgrep-analyzer/src/semgrep-client.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-95",
      "entity": {
        "canonicalPath": "analyzers/semgrep-analyzer/src/semgrep-client.js",
        "originalIdentifier": "analyzers/semgrep-analyzer/src/semgrep-client.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable stdout.",
      "description": "Unused variable stdout.",
      "ruleId": "js/unused-local-variable",
      "line": 130,
      "column": 15,
      "endLine": null,
      "endColumn": 21,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/semgrep-analyzer/src/semgrep-client.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-96",
      "entity": {
        "canonicalPath": "analyzers/semgrep-analyzer/src/semgrep-mapper.js",
        "originalIdentifier": "analyzers/semgrep-analyzer/src/semgrep-mapper.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable totalFindings.",
      "description": "Unused variable totalFindings.",
      "ruleId": "js/unused-local-variable",
      "line": 255,
      "column": 11,
      "endLine": null,
      "endColumn": 24,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/semgrep-analyzer/src/semgrep-mapper.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-97",
      "entity": {
        "canonicalPath": "analyzers/snyk-analyzer/src/snyk-mapper.js",
        "originalIdentifier": "analyzers/snyk-analyzer/src/snyk-mapper.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable summary.",
      "description": "Unused variable summary.",
      "ruleId": "js/unused-local-variable",
      "line": 80,
      "column": 56,
      "endLine": null,
      "endColumn": 63,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/snyk-analyzer/src/snyk-mapper.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-98",
      "entity": {
        "canonicalPath": "analyzers/utils/performance-utils.js",
        "originalIdentifier": "analyzers/utils/performance-utils.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable Worker.",
      "description": "Unused variable Worker.",
      "ruleId": "js/unused-local-variable",
      "line": 8,
      "column": 9,
      "endLine": null,
      "endColumn": 15,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/utils/performance-utils.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-99",
      "entity": {
        "canonicalPath": "analyzers/utils/performance-utils.js",
        "originalIdentifier": "analyzers/utils/performance-utils.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable path.",
      "description": "Unused variable path.",
      "ruleId": "js/unused-local-variable",
      "line": 9,
      "column": 7,
      "endLine": null,
      "endColumn": 11,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/utils/performance-utils.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-100",
      "entity": {
        "canonicalPath": "analyzers/veracode-analyzer/src/cli.js",
        "originalIdentifier": "analyzers/veracode-analyzer/src/cli.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable path.",
      "description": "Unused variable path.",
      "ruleId": "js/unused-local-variable",
      "line": 6,
      "column": 7,
      "endLine": null,
      "endColumn": 11,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/veracode-analyzer/src/cli.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-101",
      "entity": {
        "canonicalPath": "analyzers/veracode-analyzer/src/veracode-mapper.js",
        "originalIdentifier": "analyzers/veracode-analyzer/src/veracode-mapper.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable totalFindings.",
      "description": "Unused variable totalFindings.",
      "ruleId": "js/unused-local-variable",
      "line": 342,
      "column": 11,
      "endLine": null,
      "endColumn": 24,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "analyzers/veracode-analyzer/src/veracode-mapper.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-102",
      "entity": {
        "canonicalPath": "core/canvas-renderer/public/immersive-unified-city.html",
        "originalIdentifier": "core/canvas-renderer/public/immersive-unified-city.html",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable targetPosition.",
      "description": "Unused variable targetPosition.",
      "ruleId": "js/unused-local-variable",
      "line": 819,
      "column": 19,
      "endLine": null,
      "endColumn": 33,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/canvas-renderer/public/immersive-unified-city.html"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-103",
      "entity": {
        "canonicalPath": "core/canvas-renderer/src/canvas-engine.js",
        "originalIdentifier": "core/canvas-renderer/src/canvas-engine.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable length.",
      "description": "Unused variable length.",
      "ruleId": "js/unused-local-variable",
      "line": 392,
      "column": 11,
      "endLine": null,
      "endColumn": 17,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/canvas-renderer/src/canvas-engine.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-104",
      "entity": {
        "canonicalPath": "core/canvas-renderer/src/engines/archived/node-canvas-engine.js",
        "originalIdentifier": "core/canvas-renderer/src/engines/archived/node-canvas-engine.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable fillColor.",
      "description": "Unused variable fillColor.",
      "ruleId": "js/unused-local-variable",
      "line": 189,
      "column": 19,
      "endLine": null,
      "endColumn": 28,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/canvas-renderer/src/engines/archived/node-canvas-engine.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-105",
      "entity": {
        "canonicalPath": "core/canvas-renderer/src/engines/archived/node-canvas-engine.js",
        "originalIdentifier": "core/canvas-renderer/src/engines/archived/node-canvas-engine.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable strokeColor.",
      "description": "Unused variable strokeColor.",
      "ruleId": "js/unused-local-variable",
      "line": 189,
      "column": 30,
      "endLine": null,
      "endColumn": 41,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/canvas-renderer/src/engines/archived/node-canvas-engine.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-106",
      "entity": {
        "canonicalPath": "core/canvas-renderer/src/engines/archived/node-canvas-engine.js",
        "originalIdentifier": "core/canvas-renderer/src/engines/archived/node-canvas-engine.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable strokeWidth.",
      "description": "Unused variable strokeWidth.",
      "ruleId": "js/unused-local-variable",
      "line": 189,
      "column": 43,
      "endLine": null,
      "endColumn": 54,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/canvas-renderer/src/engines/archived/node-canvas-engine.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-107",
      "entity": {
        "canonicalPath": "core/canvas-renderer/src/engines/threejs-canvas-engine.js",
        "originalIdentifier": "core/canvas-renderer/src/engines/threejs-canvas-engine.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable fillColor.",
      "description": "Unused variable fillColor.",
      "ruleId": "js/unused-local-variable",
      "line": 1078,
      "column": 34,
      "endLine": null,
      "endColumn": 43,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/canvas-renderer/src/engines/threejs-canvas-engine.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-108",
      "entity": {
        "canonicalPath": "core/canvas-renderer/src/engines/threejs-canvas-engine.js",
        "originalIdentifier": "core/canvas-renderer/src/engines/threejs-canvas-engine.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable strokeColor.",
      "description": "Unused variable strokeColor.",
      "ruleId": "js/unused-local-variable",
      "line": 1111,
      "column": 29,
      "endLine": null,
      "endColumn": 40,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/canvas-renderer/src/engines/threejs-canvas-engine.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-109",
      "entity": {
        "canonicalPath": "core/canvas-renderer/src/examples/create-city-visualization.js",
        "originalIdentifier": "core/canvas-renderer/src/examples/create-city-visualization.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable Codebase.",
      "description": "Unused variable Codebase.",
      "ruleId": "js/unused-local-variable",
      "line": 2,
      "column": 9,
      "endLine": null,
      "endColumn": 17,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/canvas-renderer/src/examples/create-city-visualization.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-110",
      "entity": {
        "canonicalPath": "core/canvas-renderer/src/renderers/archived/city-renderer-2d.js",
        "originalIdentifier": "core/canvas-renderer/src/renderers/archived/city-renderer-2d.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable timeRange.",
      "description": "Unused variable timeRange.",
      "ruleId": "js/unused-local-variable",
      "line": 33,
      "column": 7,
      "endLine": null,
      "endColumn": 16,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/canvas-renderer/src/renderers/archived/city-renderer-2d.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-111",
      "entity": {
        "canonicalPath": "core/canvas-renderer/src/renderers/archived/city-renderer-2d.js",
        "originalIdentifier": "core/canvas-renderer/src/renderers/archived/city-renderer-2d.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable heat.",
      "description": "Unused variable heat.",
      "ruleId": "js/unused-local-variable",
      "line": 330,
      "column": 11,
      "endLine": null,
      "endColumn": 15,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/canvas-renderer/src/renderers/archived/city-renderer-2d.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-112",
      "entity": {
        "canonicalPath": "core/canvas-renderer/src/utils/city-animations.js",
        "originalIdentifier": "core/canvas-renderer/src/utils/city-animations.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable buildingId.",
      "description": "Unused variable buildingId.",
      "ruleId": "js/unused-local-variable",
      "line": 106,
      "column": 17,
      "endLine": null,
      "endColumn": 27,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/canvas-renderer/src/utils/city-animations.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-113",
      "entity": {
        "canonicalPath": "core/canvas-renderer/src/utils/city-animations.js",
        "originalIdentifier": "core/canvas-renderer/src/utils/city-animations.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable flowId.",
      "description": "Unused variable flowId.",
      "ruleId": "js/unused-local-variable",
      "line": 125,
      "column": 17,
      "endLine": null,
      "endColumn": 23,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/canvas-renderer/src/utils/city-animations.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-114",
      "entity": {
        "canonicalPath": "core/canvas-renderer/src/utils/city-geometry.js",
        "originalIdentifier": "core/canvas-renderer/src/utils/city-geometry.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable linkDistance.",
      "description": "Unused variable linkDistance.",
      "ruleId": "js/unused-local-variable",
      "line": 22,
      "column": 7,
      "endLine": null,
      "endColumn": 19,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/canvas-renderer/src/utils/city-geometry.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-115",
      "entity": {
        "canonicalPath": "core/canvas-renderer/templates/3d-visualization-template.js",
        "originalIdentifier": "core/canvas-renderer/templates/3d-visualization-template.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable buildings.",
      "description": "Unused variable buildings.",
      "ruleId": "js/unused-local-variable",
      "line": 92,
      "column": 13,
      "endLine": null,
      "endColumn": 22,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/canvas-renderer/templates/3d-visualization-template.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-116",
      "entity": {
        "canonicalPath": "core/canvas-renderer/templates/3d-visualization-template.js",
        "originalIdentifier": "core/canvas-renderer/templates/3d-visualization-template.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable roads.",
      "description": "Unused variable roads.",
      "ruleId": "js/unused-local-variable",
      "line": 92,
      "column": 24,
      "endLine": null,
      "endColumn": 29,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/canvas-renderer/templates/3d-visualization-template.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-117",
      "entity": {
        "canonicalPath": "core/canvas-renderer/templates/3d-visualization-template.js",
        "originalIdentifier": "core/canvas-renderer/templates/3d-visualization-template.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable districts.",
      "description": "Unused variable districts.",
      "ruleId": "js/unused-local-variable",
      "line": 92,
      "column": 31,
      "endLine": null,
      "endColumn": 40,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/canvas-renderer/templates/3d-visualization-template.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-118",
      "entity": {
        "canonicalPath": "core/canvas-renderer/templates/unified-data-adapter.ts",
        "originalIdentifier": "core/canvas-renderer/templates/unified-data-adapter.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable files.",
      "description": "Unused variable files.",
      "ruleId": "js/unused-local-variable",
      "line": 345,
      "column": 11,
      "endLine": null,
      "endColumn": 16,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/canvas-renderer/templates/unified-data-adapter.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-119",
      "entity": {
        "canonicalPath": "core/canvas-renderer/templates/unified-data-adapter.ts",
        "originalIdentifier": "core/canvas-renderer/templates/unified-data-adapter.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable directory.",
      "description": "Unused variable directory.",
      "ruleId": "js/unused-local-variable",
      "line": 352,
      "column": 17,
      "endLine": null,
      "endColumn": 26,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/canvas-renderer/templates/unified-data-adapter.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-120",
      "entity": {
        "canonicalPath": "core/graph-model/src/index.js",
        "originalIdentifier": "core/graph-model/src/index.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable edgeCount.",
      "description": "Unused variable edgeCount.",
      "ruleId": "js/unused-local-variable",
      "line": 264,
      "column": 11,
      "endLine": null,
      "endColumn": 20,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/graph-model/src/index.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-121",
      "entity": {
        "canonicalPath": "core/unified-model/codeql-adapter.ts",
        "originalIdentifier": "core/unified-model/codeql-adapter.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused import UnifiedFileMetrics.",
      "description": "Unused import UnifiedFileMetrics.",
      "ruleId": "js/unused-local-variable",
      "line": 10,
      "column": null,
      "endLine": 18,
      "endColumn": 23,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/unified-model/codeql-adapter.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-122",
      "entity": {
        "canonicalPath": "core/unified-model/comprehensive-8-tool-integration-test.ts",
        "originalIdentifier": "core/unified-model/comprehensive-8-tool-integration-test.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused import UnifiedEntity.",
      "description": "Unused import UnifiedEntity.",
      "ruleId": "js/unused-local-variable",
      "line": 10,
      "column": null,
      "endLine": 16,
      "endColumn": 23,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/unified-model/comprehensive-8-tool-integration-test.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-123",
      "entity": {
        "canonicalPath": "core/unified-model/deepsource-adapter.ts",
        "originalIdentifier": "core/unified-model/deepsource-adapter.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused import UnifiedFileMetrics.",
      "description": "Unused import UnifiedFileMetrics.",
      "ruleId": "js/unused-local-variable",
      "line": 10,
      "column": null,
      "endLine": 18,
      "endColumn": 23,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/unified-model/deepsource-adapter.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-124",
      "entity": {
        "canonicalPath": "core/unified-model/full-adapter-integration-test.ts",
        "originalIdentifier": "core/unified-model/full-adapter-integration-test.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused imports IssueSeverity, UnifiedEntity, UnifiedIssue.",
      "description": "Unused imports IssueSeverity, UnifiedEntity, UnifiedIssue.",
      "ruleId": "js/unused-local-variable",
      "line": 8,
      "column": null,
      "endLine": 14,
      "endColumn": 23,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/unified-model/full-adapter-integration-test.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-125",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification-clean.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification-clean.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused import UnifiedAnalysisResult.",
      "description": "Unused import UnifiedAnalysisResult.",
      "ruleId": "js/unused-local-variable",
      "line": 7,
      "column": null,
      "endLine": 13,
      "endColumn": 23,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/unified-model/skeptical-verification-clean.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-126",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification-clean.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification-clean.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable issue.",
      "description": "Unused variable issue.",
      "ruleId": "js/unused-local-variable",
      "line": 36,
      "column": 13,
      "endLine": null,
      "endColumn": 18,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/unified-model/skeptical-verification-clean.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-127",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification-clean.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification-clean.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable capabilities.",
      "description": "Unused variable capabilities.",
      "ruleId": "js/unused-local-variable",
      "line": 69,
      "column": 13,
      "endLine": null,
      "endColumn": 25,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/unified-model/skeptical-verification-clean.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-128",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification-clean.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification-clean.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable configured.",
      "description": "Unused variable configured.",
      "ruleId": "js/unused-local-variable",
      "line": 70,
      "column": 13,
      "endLine": null,
      "endColumn": 23,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/unified-model/skeptical-verification-clean.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-129",
      "entity": {
        "canonicalPath": "core/unified-model/test-4-tool-correlation.js",
        "originalIdentifier": "core/unified-model/test-4-tool-correlation.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable metrics.",
      "description": "Unused variable metrics.",
      "ruleId": "js/unused-local-variable",
      "line": 63,
      "column": 25,
      "endLine": null,
      "endColumn": 32,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/unified-model/test-4-tool-correlation.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-130",
      "entity": {
        "canonicalPath": "core/unified-model/test-8-tool-correlation.js",
        "originalIdentifier": "core/unified-model/test-8-tool-correlation.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable path.",
      "description": "Unused variable path.",
      "ruleId": "js/unused-local-variable",
      "line": 17,
      "column": 7,
      "endLine": null,
      "endColumn": 11,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/unified-model/test-8-tool-correlation.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-131",
      "entity": {
        "canonicalPath": "core/unified-model/test-codeclimate-adapter.js",
        "originalIdentifier": "core/unified-model/test-codeclimate-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable path.",
      "description": "Unused variable path.",
      "ruleId": "js/unused-local-variable",
      "line": 8,
      "column": 7,
      "endLine": null,
      "endColumn": 11,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/unified-model/test-codeclimate-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-132",
      "entity": {
        "canonicalPath": "core/unified-model/test-deepsource-adapter.js",
        "originalIdentifier": "core/unified-model/test-deepsource-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable PathNormalizer.",
      "description": "Unused variable PathNormalizer.",
      "ruleId": "js/unused-local-variable",
      "line": 9,
      "column": 7,
      "endLine": null,
      "endColumn": 21,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/unified-model/test-deepsource-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-133",
      "entity": {
        "canonicalPath": "core/unified-model/test-semgrep-adapter.js",
        "originalIdentifier": "core/unified-model/test-semgrep-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable path.",
      "description": "Unused variable path.",
      "ruleId": "js/unused-local-variable",
      "line": 8,
      "column": 7,
      "endLine": null,
      "endColumn": 11,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/unified-model/test-semgrep-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-134",
      "entity": {
        "canonicalPath": "core/unified-model/test-sonarqube-adapter.js",
        "originalIdentifier": "core/unified-model/test-sonarqube-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable path.",
      "description": "Unused variable path.",
      "ruleId": "js/unused-local-variable",
      "line": 8,
      "column": 7,
      "endLine": null,
      "endColumn": 11,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/unified-model/test-sonarqube-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-135",
      "entity": {
        "canonicalPath": "core/unified-model/test-veracode-adapter.js",
        "originalIdentifier": "core/unified-model/test-veracode-adapter.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable PathNormalizer.",
      "description": "Unused variable PathNormalizer.",
      "ruleId": "js/unused-local-variable",
      "line": 9,
      "column": 7,
      "endLine": null,
      "endColumn": 21,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/unified-model/test-veracode-adapter.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-136",
      "entity": {
        "canonicalPath": "core/unified-model/unified-to-city-bridge.ts",
        "originalIdentifier": "core/unified-model/unified-to-city-bridge.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable fileType.",
      "description": "Unused variable fileType.",
      "ruleId": "js/unused-local-variable",
      "line": 257,
      "column": 11,
      "endLine": null,
      "endColumn": 19,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/unified-model/unified-to-city-bridge.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-137",
      "entity": {
        "canonicalPath": "core/unified-model/veracode-adapter.ts",
        "originalIdentifier": "core/unified-model/veracode-adapter.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused import UnifiedFileMetrics.",
      "description": "Unused import UnifiedFileMetrics.",
      "ruleId": "js/unused-local-variable",
      "line": 10,
      "column": null,
      "endLine": 18,
      "endColumn": 23,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "core/unified-model/veracode-adapter.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-138",
      "entity": {
        "canonicalPath": "examples/demo-3d-city.js",
        "originalIdentifier": "examples/demo-3d-city.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable path.",
      "description": "Unused variable path.",
      "ruleId": "js/unused-local-variable",
      "line": 9,
      "column": 7,
      "endLine": null,
      "endColumn": 11,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "examples/demo-3d-city.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-139",
      "entity": {
        "canonicalPath": "examples/demo-catzen-city.js",
        "originalIdentifier": "examples/demo-catzen-city.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable path.",
      "description": "Unused variable path.",
      "ruleId": "js/unused-local-variable",
      "line": 11,
      "column": 7,
      "endLine": null,
      "endColumn": 11,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "examples/demo-catzen-city.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-140",
      "entity": {
        "canonicalPath": "examples/demo-performance-integration.js",
        "originalIdentifier": "examples/demo-performance-integration.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable path.",
      "description": "Unused variable path.",
      "ruleId": "js/unused-local-variable",
      "line": 9,
      "column": 7,
      "endLine": null,
      "endColumn": 11,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "examples/demo-performance-integration.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-141",
      "entity": {
        "canonicalPath": "examples/demo-performance-integration.js",
        "originalIdentifier": "examples/demo-performance-integration.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable PerformanceMetrics.",
      "description": "Unused variable PerformanceMetrics.",
      "ruleId": "js/unused-local-variable",
      "line": 13,
      "column": 9,
      "endLine": null,
      "endColumn": 27,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "examples/demo-performance-integration.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-142",
      "entity": {
        "canonicalPath": "examples/demo-performance-integration.js",
        "originalIdentifier": "examples/demo-performance-integration.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable ProfilerCollector.",
      "description": "Unused variable ProfilerCollector.",
      "ruleId": "js/unused-local-variable",
      "line": 13,
      "column": 29,
      "endLine": null,
      "endColumn": 46,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "examples/demo-performance-integration.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-143",
      "entity": {
        "canonicalPath": "examples/demo-performance-visualization.js",
        "originalIdentifier": "examples/demo-performance-visualization.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable path.",
      "description": "Unused variable path.",
      "ruleId": "js/unused-local-variable",
      "line": 11,
      "column": 7,
      "endLine": null,
      "endColumn": 11,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "examples/demo-performance-visualization.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-144",
      "entity": {
        "canonicalPath": "examples/demo-performance-visualization.js",
        "originalIdentifier": "examples/demo-performance-visualization.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable ProfilerCollector.",
      "description": "Unused variable ProfilerCollector.",
      "ruleId": "js/unused-local-variable",
      "line": 14,
      "column": 29,
      "endLine": null,
      "endColumn": 46,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "examples/demo-performance-visualization.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-145",
      "entity": {
        "canonicalPath": "examples/demo-spaceful-city.js",
        "originalIdentifier": "examples/demo-spaceful-city.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable path.",
      "description": "Unused variable path.",
      "ruleId": "js/unused-local-variable",
      "line": 11,
      "column": 7,
      "endLine": null,
      "endColumn": 11,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "examples/demo-spaceful-city.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-146",
      "entity": {
        "canonicalPath": "examples/demo-topolop-complete.js",
        "originalIdentifier": "examples/demo-topolop-complete.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable path.",
      "description": "Unused variable path.",
      "ruleId": "js/unused-local-variable",
      "line": 15,
      "column": 7,
      "endLine": null,
      "endColumn": 11,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "examples/demo-topolop-complete.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-147",
      "entity": {
        "canonicalPath": "examples/demo-topolop-complete.js",
        "originalIdentifier": "examples/demo-topolop-complete.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable PythonParser.",
      "description": "Unused variable PythonParser.",
      "ruleId": "js/unused-local-variable",
      "line": 27,
      "column": 7,
      "endLine": null,
      "endColumn": 19,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "examples/demo-topolop-complete.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-148",
      "entity": {
        "canonicalPath": "examples/demo-topolop-complete.js",
        "originalIdentifier": "examples/demo-topolop-complete.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable JavaScriptParser.",
      "description": "Unused variable JavaScriptParser.",
      "ruleId": "js/unused-local-variable",
      "line": 28,
      "column": 7,
      "endLine": null,
      "endColumn": 23,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "examples/demo-topolop-complete.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-149",
      "entity": {
        "canonicalPath": "examples/demo-topolop-complete.js",
        "originalIdentifier": "examples/demo-topolop-complete.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable TypeScriptParser.",
      "description": "Unused variable TypeScriptParser.",
      "ruleId": "js/unused-local-variable",
      "line": 29,
      "column": 7,
      "endLine": null,
      "endColumn": 23,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "examples/demo-topolop-complete.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-150",
      "entity": {
        "canonicalPath": "examples/demo-topolop-complete.js",
        "originalIdentifier": "examples/demo-topolop-complete.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable testResult.",
      "description": "Unused variable testResult.",
      "ruleId": "js/unused-local-variable",
      "line": 39,
      "column": 11,
      "endLine": null,
      "endColumn": 21,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "examples/demo-topolop-complete.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-151",
      "entity": {
        "canonicalPath": "examples/demo-visual-city-renderer.js",
        "originalIdentifier": "examples/demo-visual-city-renderer.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable path.",
      "description": "Unused variable path.",
      "ruleId": "js/unused-local-variable",
      "line": 1,
      "column": 7,
      "endLine": null,
      "endColumn": 11,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "examples/demo-visual-city-renderer.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-152",
      "entity": {
        "canonicalPath": "examples/demo-visual-city-renderer.js",
        "originalIdentifier": "examples/demo-visual-city-renderer.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable ASTAnalyzer.",
      "description": "Unused variable ASTAnalyzer.",
      "ruleId": "js/unused-local-variable",
      "line": 3,
      "column": 9,
      "endLine": null,
      "endColumn": 20,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "examples/demo-visual-city-renderer.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-153",
      "entity": {
        "canonicalPath": "examples/topolop-enhanced-aggregated-3d.html",
        "originalIdentifier": "examples/topolop-enhanced-aggregated-3d.html",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable binary.",
      "description": "Unused variable binary.",
      "ruleId": "js/unused-local-variable",
      "line": 579,
      "column": 19,
      "endLine": null,
      "endColumn": 25,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "examples/topolop-enhanced-aggregated-3d.html"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-154",
      "entity": {
        "canonicalPath": "examples/topolop-real-data-3d.html",
        "originalIdentifier": "examples/topolop-real-data-3d.html",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable binary.",
      "description": "Unused variable binary.",
      "ruleId": "js/unused-local-variable",
      "line": 579,
      "column": 19,
      "endLine": null,
      "endColumn": 25,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "examples/topolop-real-data-3d.html"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-155",
      "entity": {
        "canonicalPath": "examples/unified-city-live-demo.js",
        "originalIdentifier": "examples/unified-city-live-demo.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable runComprehensive8ToolIntegrationTest.",
      "description": "Unused variable runComprehensive8ToolIntegrationTest.",
      "ruleId": "js/unused-local-variable",
      "line": 14,
      "column": 11,
      "endLine": null,
      "endColumn": 47,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "examples/unified-city-live-demo.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-156",
      "entity": {
        "canonicalPath": "interfaces/cli/bin/topolop.js",
        "originalIdentifier": "interfaces/cli/bin/topolop.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable path.",
      "description": "Unused variable path.",
      "ruleId": "js/unused-local-variable",
      "line": 14,
      "column": 7,
      "endLine": null,
      "endColumn": 11,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "interfaces/cli/bin/topolop.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-157",
      "entity": {
        "canonicalPath": "interfaces/cli/bin/topolop.js",
        "originalIdentifier": "interfaces/cli/bin/topolop.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable fs.",
      "description": "Unused variable fs.",
      "ruleId": "js/unused-local-variable",
      "line": 15,
      "column": 7,
      "endLine": null,
      "endColumn": 9,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "interfaces/cli/bin/topolop.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-158",
      "entity": {
        "canonicalPath": "interfaces/cli/src/commands/init.js",
        "originalIdentifier": "interfaces/cli/src/commands/init.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused function suggestTemplate.",
      "description": "Unused function suggestTemplate.",
      "ruleId": "js/unused-local-variable",
      "line": 77,
      "column": 16,
      "endLine": null,
      "endColumn": 31,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "interfaces/cli/src/commands/init.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-159",
      "entity": {
        "canonicalPath": "interfaces/cli/src/commands/init.js",
        "originalIdentifier": "interfaces/cli/src/commands/init.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable requirementsPath.",
      "description": "Unused variable requirementsPath.",
      "ruleId": "js/unused-local-variable",
      "line": 89,
      "column": 9,
      "endLine": null,
      "endColumn": 25,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "interfaces/cli/src/commands/init.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-160",
      "entity": {
        "canonicalPath": "interfaces/cli/src/commands/init.js",
        "originalIdentifier": "interfaces/cli/src/commands/init.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable pomPath.",
      "description": "Unused variable pomPath.",
      "ruleId": "js/unused-local-variable",
      "line": 90,
      "column": 9,
      "endLine": null,
      "endColumn": 16,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "interfaces/cli/src/commands/init.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-161",
      "entity": {
        "canonicalPath": "interfaces/cli/src/core/file-processor.js",
        "originalIdentifier": "interfaces/cli/src/core/file-processor.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable validResults.",
      "description": "Unused variable validResults.",
      "ruleId": "js/unused-local-variable",
      "line": 61,
      "column": 13,
      "endLine": null,
      "endColumn": 25,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "interfaces/cli/src/core/file-processor.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-162",
      "entity": {
        "canonicalPath": "interfaces/cli/src/core/git-analyzer.js",
        "originalIdentifier": "interfaces/cli/src/core/git-analyzer.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable fs.",
      "description": "Unused variable fs.",
      "ruleId": "js/unused-local-variable",
      "line": 6,
      "column": 7,
      "endLine": null,
      "endColumn": 9,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "interfaces/cli/src/core/git-analyzer.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-163",
      "entity": {
        "canonicalPath": "interfaces/cli/src/core/git-analyzer.js",
        "originalIdentifier": "interfaces/cli/src/core/git-analyzer.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable diffSummary.",
      "description": "Unused variable diffSummary.",
      "ruleId": "js/unused-local-variable",
      "line": 110,
      "column": 13,
      "endLine": null,
      "endColumn": 24,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "interfaces/cli/src/core/git-analyzer.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-164",
      "entity": {
        "canonicalPath": "interfaces/cli/src/core/module-hierarchy-builder.js",
        "originalIdentifier": "interfaces/cli/src/core/module-hierarchy-builder.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable modulePath.",
      "description": "Unused variable modulePath.",
      "ruleId": "js/unused-local-variable",
      "line": 88,
      "column": 17,
      "endLine": null,
      "endColumn": 27,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "interfaces/cli/src/core/module-hierarchy-builder.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-165",
      "entity": {
        "canonicalPath": "interfaces/cli/src/core/output-generator.js",
        "originalIdentifier": "interfaces/cli/src/core/output-generator.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable insights.",
      "description": "Unused variable insights.",
      "ruleId": "js/unused-local-variable",
      "line": 346,
      "column": 30,
      "endLine": null,
      "endColumn": 38,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "interfaces/cli/src/core/output-generator.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-166",
      "entity": {
        "canonicalPath": "interfaces/cli/src/core/output-generator.js",
        "originalIdentifier": "interfaces/cli/src/core/output-generator.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable hotspots.",
      "description": "Unused variable hotspots.",
      "ruleId": "js/unused-local-variable",
      "line": 346,
      "column": 40,
      "endLine": null,
      "endColumn": 48,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "interfaces/cli/src/core/output-generator.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-local-variable-167",
      "entity": {
        "canonicalPath": "interfaces/cli/src/core/repository-analyzer-legacy.js",
        "originalIdentifier": "interfaces/cli/src/core/repository-analyzer-legacy.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Unused variable simpleGit.",
      "description": "Unused variable simpleGit.",
      "ruleId": "js/unused-local-variable",
      "line": 8,
      "column": 7,
      "endLine": null,
      "endColumn": 16,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 134,
        "uri": "interfaces/cli/src/core/repository-analyzer-legacy.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/unused-loop-variable-168",
      "entity": {
        "canonicalPath": "core/unified-model/test-4-tool-correlation.js",
        "originalIdentifier": "core/unified-model/test-4-tool-correlation.js",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "For loop variable metrics is not used in the loop body.",
      "description": "For loop variable metrics is not used in the loop body.",
      "ruleId": "js/unused-loop-variable",
      "line": 63,
      "column": 12,
      "endLine": null,
      "endColumn": 33,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 149,
        "uri": "core/unified-model/test-4-tool-correlation.js"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/syntax-error-169",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: Invalid character.",
      "description": "Error: Invalid character.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 19,
      "endLine": null,
      "endColumn": 20,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/syntax-error-170",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: Invalid character.",
      "description": "Error: Invalid character.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 24,
      "endLine": null,
      "endColumn": 25,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/syntax-error-171",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: Invalid character.",
      "description": "Error: Invalid character.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 28,
      "endLine": null,
      "endColumn": 29,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/syntax-error-172",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: Invalid character.",
      "description": "Error: Invalid character.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 83,
      "endLine": null,
      "endColumn": 84,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/syntax-error-173",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: Unexpected keyword or identifier.",
      "description": "Error: Unexpected keyword or identifier.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 84,
      "endLine": null,
      "endColumn": 85,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/syntax-error-174",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: Invalid character.",
      "description": "Error: Invalid character.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 136,
      "endLine": null,
      "endColumn": 137,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/syntax-error-175",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: Unexpected keyword or identifier.",
      "description": "Error: Unexpected keyword or identifier.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 137,
      "endLine": null,
      "endColumn": 138,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/syntax-error-176",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: Invalid character.",
      "description": "Error: Invalid character.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 163,
      "endLine": null,
      "endColumn": 164,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/syntax-error-177",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: Unexpected keyword or identifier.",
      "description": "Error: Unexpected keyword or identifier.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 164,
      "endLine": null,
      "endColumn": 165,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/syntax-error-178",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: Invalid character.",
      "description": "Error: Invalid character.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 185,
      "endLine": null,
      "endColumn": 186,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/syntax-error-179",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: Unexpected keyword or identifier.",
      "description": "Error: Unexpected keyword or identifier.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 186,
      "endLine": null,
      "endColumn": 187,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/syntax-error-180",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: Invalid character.",
      "description": "Error: Invalid character.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 225,
      "endLine": null,
      "endColumn": 226,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.371Z"
    },
    {
      "id": "codeql-js/syntax-error-181",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: Expression expected.",
      "description": "Error: Expression expected.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 230,
      "endLine": null,
      "endColumn": 231,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.372Z"
    },
    {
      "id": "codeql-js/syntax-error-182",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: Invalid character.",
      "description": "Error: Invalid character.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 233,
      "endLine": null,
      "endColumn": 234,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.372Z"
    },
    {
      "id": "codeql-js/syntax-error-183",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: ',' expected.",
      "description": "Error: ',' expected.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 239,
      "endLine": null,
      "endColumn": 240,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.372Z"
    },
    {
      "id": "codeql-js/syntax-error-184",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: ',' expected.",
      "description": "Error: ',' expected.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 246,
      "endLine": null,
      "endColumn": 247,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.372Z"
    },
    {
      "id": "codeql-js/syntax-error-185",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: ',' expected.",
      "description": "Error: ',' expected.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 300,
      "endLine": null,
      "endColumn": 301,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.372Z"
    },
    {
      "id": "codeql-js/syntax-error-186",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: Invalid character.",
      "description": "Error: Invalid character.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 301,
      "endLine": null,
      "endColumn": 302,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.372Z"
    },
    {
      "id": "codeql-js/syntax-error-187",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: ',' expected.",
      "description": "Error: ',' expected.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 307,
      "endLine": null,
      "endColumn": 308,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.372Z"
    },
    {
      "id": "codeql-js/syntax-error-188",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: ',' expected.",
      "description": "Error: ',' expected.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 314,
      "endLine": null,
      "endColumn": 315,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.372Z"
    },
    {
      "id": "codeql-js/syntax-error-189",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: ',' expected.",
      "description": "Error: ',' expected.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 372,
      "endLine": null,
      "endColumn": 373,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.372Z"
    },
    {
      "id": "codeql-js/syntax-error-190",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: Invalid character.",
      "description": "Error: Invalid character.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 373,
      "endLine": null,
      "endColumn": 374,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.372Z"
    },
    {
      "id": "codeql-js/syntax-error-191",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: Invalid character.",
      "description": "Error: Invalid character.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 379,
      "endLine": null,
      "endColumn": 380,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.372Z"
    },
    {
      "id": "codeql-js/syntax-error-192",
      "entity": {
        "canonicalPath": "core/unified-model/skeptical-verification.ts",
        "originalIdentifier": "core/unified-model/skeptical-verification.ts",
        "toolName": "CodeQL",
        "confidence": 1
      },
      "severity": "medium",
      "analysisType": "semantic",
      "title": "Error: '}}' expected.",
      "description": "Error: '}}' expected.",
      "ruleId": "js/syntax-error",
      "line": 307,
      "column": 2602,
      "endLine": null,
      "endColumn": 2603,
      "toolName": "CodeQL",
      "metadata": {
        "ruleIndex": 173,
        "uri": "core/unified-model/skeptical-verification.ts"
      },
      "createdAt": "2025-09-07T01:38:04.372Z"
    }
  ],
  "fileMetrics": {
    "src/analyzers/ast-analyzer/src/analyzer.js": {
      "entity": "src/analyzers/ast-analyzer/src/analyzer.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 2,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.353Z",
      "metadata": {}
    },
    "src/analyzers/checkmarx-analyzer/src/index.js": {
      "entity": "src/analyzers/checkmarx-analyzer/src/index.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 2,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.353Z",
      "metadata": {}
    },
    "src/analyzers/codacy-analyzer/src/cli.js": {
      "entity": "src/analyzers/codacy-analyzer/src/cli.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.353Z",
      "metadata": {}
    },
    "src/analyzers/codacy-analyzer/src/index.js": {
      "entity": "src/analyzers/codacy-analyzer/src/index.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 2,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.353Z",
      "metadata": {}
    },
    "src/analyzers/codeclimate-analyzer/src/codeclimate-client.js": {
      "entity": "src/analyzers/codeclimate-analyzer/src/codeclimate-client.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0,
        "info": 1
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 3,
      "lastUpdated": "2025-09-07T01:38:04.353Z",
      "metadata": {}
    },
    "src/analyzers/codeclimate-analyzer/src/index.js": {
      "entity": "src/analyzers/codeclimate-analyzer/src/index.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0,
        "info": 1
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 3,
      "lastUpdated": "2025-09-07T01:38:04.353Z",
      "metadata": {}
    },
    "src/analyzers/config/default-config.js": {
      "entity": "src/analyzers/config/default-config.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.353Z",
      "metadata": {}
    },
    "src/analyzers/deepsource-analyzer/src/index.js": {
      "entity": "src/analyzers/deepsource-analyzer/src/index.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0,
        "info": 1
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 3,
      "lastUpdated": "2025-09-07T01:38:04.353Z",
      "metadata": {}
    },
    "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js": {
      "entity": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
      "issueCount": 6,
      "severityDistribution": {
        "critical": 0,
        "high": 1,
        "medium": 5,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 6,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 17,
      "lastUpdated": "2025-09-07T01:38:04.353Z",
      "metadata": {}
    },
    "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js": {
      "entity": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
      "issueCount": 12,
      "severityDistribution": {
        "critical": 0,
        "high": 3,
        "medium": 9,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 12,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 25,
      "lastUpdated": "2025-09-07T01:38:04.354Z",
      "metadata": {}
    },
    "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js": {
      "entity": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
      "issueCount": 10,
      "severityDistribution": {
        "critical": 0,
        "high": 3,
        "medium": 7,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 10,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 23,
      "lastUpdated": "2025-09-07T01:38:04.354Z",
      "metadata": {}
    },
    "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js": {
      "entity": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
      "issueCount": 8,
      "severityDistribution": {
        "critical": 0,
        "high": 1,
        "medium": 7,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 8,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 20,
      "lastUpdated": "2025-09-07T01:38:04.354Z",
      "metadata": {}
    },
    "src/analyzers/formal-methods-adapters/javascript/eslint-adapter.js": {
      "entity": "src/analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
      "issueCount": 4,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 4,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 4,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 13,
      "lastUpdated": "2025-09-07T01:38:04.354Z",
      "metadata": {}
    },
    "src/analyzers/formal-methods-adapters/javascript/madge-adapter.js": {
      "entity": "src/analyzers/formal-methods-adapters/javascript/madge-adapter.js",
      "issueCount": 4,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 4,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 4,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 13,
      "lastUpdated": "2025-09-07T01:38:04.354Z",
      "metadata": {}
    },
    "src/analyzers/formal-methods-adapters/python/bandit-adapter.js": {
      "entity": "src/analyzers/formal-methods-adapters/python/bandit-adapter.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 1,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 2,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 11,
      "lastUpdated": "2025-09-07T01:38:04.354Z",
      "metadata": {}
    },
    "src/analyzers/formal-methods-adapters/python/mypy-adapter.js": {
      "entity": "src/analyzers/formal-methods-adapters/python/mypy-adapter.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 2,
        "medium": 0,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 2,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 12,
      "lastUpdated": "2025-09-07T01:38:04.354Z",
      "metadata": {}
    },
    "src/analyzers/formal-methods-adapters/python/pylint-adapter.js": {
      "entity": "src/analyzers/formal-methods-adapters/python/pylint-adapter.js",
      "issueCount": 3,
      "severityDistribution": {
        "critical": 0,
        "high": 2,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 3,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 14,
      "lastUpdated": "2025-09-07T01:38:04.354Z",
      "metadata": {}
    },
    "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js": {
      "entity": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
      "issueCount": 9,
      "severityDistribution": {
        "critical": 0,
        "high": 2,
        "medium": 7,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 9,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 22,
      "lastUpdated": "2025-09-07T01:38:04.354Z",
      "metadata": {}
    },
    "src/analyzers/formal-methods-adapters/python/secure-bandit-adapter.js": {
      "entity": "src/analyzers/formal-methods-adapters/python/secure-bandit-adapter.js",
      "issueCount": 3,
      "severityDistribution": {
        "critical": 0,
        "high": 1,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 3,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 13,
      "lastUpdated": "2025-09-07T01:38:04.354Z",
      "metadata": {}
    },
    "src/analyzers/formal-methods-adapters/python/secure-container-adapter.js": {
      "entity": "src/analyzers/formal-methods-adapters/python/secure-container-adapter.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 1,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 2,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 11,
      "lastUpdated": "2025-09-07T01:38:04.354Z",
      "metadata": {}
    },
    "src/analyzers/formal-methods-adapters/python/secure-mypy-adapter.js": {
      "entity": "src/analyzers/formal-methods-adapters/python/secure-mypy-adapter.js",
      "issueCount": 3,
      "severityDistribution": {
        "critical": 0,
        "high": 1,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 3,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 13,
      "lastUpdated": "2025-09-07T01:38:04.354Z",
      "metadata": {}
    },
    "src/analyzers/formal-methods-adapters/python/secure-pylint-adapter.js": {
      "entity": "src/analyzers/formal-methods-adapters/python/secure-pylint-adapter.js",
      "issueCount": 3,
      "severityDistribution": {
        "critical": 0,
        "high": 1,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 3,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 13,
      "lastUpdated": "2025-09-07T01:38:04.354Z",
      "metadata": {}
    },
    "src/analyzers/formal-methods-adapters/security/input-validator.js": {
      "entity": "src/analyzers/formal-methods-adapters/security/input-validator.js",
      "issueCount": 3,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 3,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 3,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 12,
      "lastUpdated": "2025-09-07T01:38:04.354Z",
      "metadata": {}
    },
    "src/analyzers/formal-methods-adapters/typescript/tsc-adapter.js": {
      "entity": "src/analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
      "issueCount": 4,
      "severityDistribution": {
        "critical": 0,
        "high": 2,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 4,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 16,
      "lastUpdated": "2025-09-07T01:38:04.354Z",
      "metadata": {}
    },
    "src/analyzers/formal-methods-adapters/universal/klee-adapter.js": {
      "entity": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
      "issueCount": 11,
      "severityDistribution": {
        "critical": 0,
        "high": 4,
        "medium": 7,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 11,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 25,
      "lastUpdated": "2025-09-07T01:38:04.354Z",
      "metadata": {}
    },
    "src/analyzers/formal-methods-adapters/universal/perf-adapter.js": {
      "entity": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
      "issueCount": 10,
      "severityDistribution": {
        "critical": 0,
        "high": 4,
        "medium": 6,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 10,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 24,
      "lastUpdated": "2025-09-07T01:38:04.354Z",
      "metadata": {}
    },
    "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js": {
      "entity": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
      "issueCount": 8,
      "severityDistribution": {
        "critical": 0,
        "high": 4,
        "medium": 4,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 8,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 22,
      "lastUpdated": "2025-09-07T01:38:04.354Z",
      "metadata": {}
    },
    "src/analyzers/git-analyzer/src/git-reader.js": {
      "entity": "src/analyzers/git-analyzer/src/git-reader.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.354Z",
      "metadata": {}
    },
    "src/analyzers/github-codeql-analyzer/src/codeql-client.js": {
      "entity": "src/analyzers/github-codeql-analyzer/src/codeql-client.js",
      "issueCount": 7,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 5,
        "low": 0,
        "info": 2
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 7,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 16,
      "lastUpdated": "2025-09-07T01:38:04.354Z",
      "metadata": {}
    },
    "src/analyzers/github-codeql-analyzer/src/index.js": {
      "entity": "src/analyzers/github-codeql-analyzer/src/index.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0,
        "info": 2
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 2,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 5,
      "lastUpdated": "2025-09-07T01:38:04.354Z",
      "metadata": {}
    },
    "src/analyzers/runtime-profiling/nodejs-profiler-integration.js": {
      "entity": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
      "issueCount": 11,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 11,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 11,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 22,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/analyzers/semgrep-analyzer/src/index.js": {
      "entity": "src/analyzers/semgrep-analyzer/src/index.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0,
        "info": 1
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 3,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/analyzers/semgrep-analyzer/src/semgrep-client.js": {
      "entity": "src/analyzers/semgrep-analyzer/src/semgrep-client.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/analyzers/snyk-analyzer/src/cli.js": {
      "entity": "src/analyzers/snyk-analyzer/src/cli.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 2,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/analyzers/snyk-analyzer/src/index.js": {
      "entity": "src/analyzers/snyk-analyzer/src/index.js",
      "issueCount": 4,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 3
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 4,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/analyzers/snyk-analyzer/src/snyk-client.js": {
      "entity": "src/analyzers/snyk-analyzer/src/snyk-client.js",
      "issueCount": 7,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 7,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 7,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 18,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/analyzers/sonarqube-analyzer/src/index.js": {
      "entity": "src/analyzers/sonarqube-analyzer/src/index.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0,
        "info": 1
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 3,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/analyzers/sonarqube-analyzer/src/sonarqube-client.js": {
      "entity": "src/analyzers/sonarqube-analyzer/src/sonarqube-client.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0,
        "info": 1
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 3,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/analyzers/utils/cache-manager.js": {
      "entity": "src/analyzers/utils/cache-manager.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/analyzers/utils/fs-utils.js": {
      "entity": "src/analyzers/utils/fs-utils.js",
      "issueCount": 4,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 4,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 4,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 13,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/analyzers/utils/path-utils.js": {
      "entity": "src/analyzers/utils/path-utils.js",
      "issueCount": 15,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 14,
        "low": 0,
        "info": 1
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 15,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 25,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/analyzers/utils/performance-utils.js": {
      "entity": "src/analyzers/utils/performance-utils.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0,
        "info": 1
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 3,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/core/canvas-renderer/engines/three-city-renderer.js": {
      "entity": "src/core/canvas-renderer/engines/three-city-renderer.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 2,
        "medium": 0,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 2,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 12,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/core/canvas-renderer/public/3d-city-viewer.html": {
      "entity": "src/core/canvas-renderer/public/3d-city-viewer.html",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 2,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/core/canvas-renderer/public/DEVELOPER-VIEW.html": {
      "entity": "src/core/canvas-renderer/public/DEVELOPER-VIEW.html",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 2,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/core/canvas-renderer/public/MAIN-TEMPLATE.html": {
      "entity": "src/core/canvas-renderer/public/MAIN-TEMPLATE.html",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 2,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/core/canvas-renderer/public/immersive-unified-city.html": {
      "entity": "src/core/canvas-renderer/public/immersive-unified-city.html",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 2,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/core/graph-model/src/graph-queries.js": {
      "entity": "src/core/graph-model/src/graph-queries.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/core/graph-model/src/models/codebase.js": {
      "entity": "src/core/graph-model/src/models/codebase.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/core/graph-model/src/performance-metrics.js": {
      "entity": "src/core/graph-model/src/performance-metrics.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0,
        "info": 1
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 3,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/core/graph-model/src/visualization-transformer.js": {
      "entity": "src/core/graph-model/src/visualization-transformer.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0,
        "info": 1
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 3,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/core/unified-model/path-normalizer.js": {
      "entity": "src/core/unified-model/path-normalizer.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/examples/3d-city-explorer.html": {
      "entity": "src/examples/3d-city-explorer.html",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 2,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/examples/demo-visual-city-renderer.js": {
      "entity": "src/examples/demo-visual-city-renderer.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0,
        "info": 1
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 3,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/examples/topolop-3d-explorer-real-data.html": {
      "entity": "src/examples/topolop-3d-explorer-real-data.html",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 2,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/examples/topolop-enhanced-aggregated-3d.html": {
      "entity": "src/examples/topolop-enhanced-aggregated-3d.html",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 2,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/examples/topolop-filtered-3d-explorer.html": {
      "entity": "src/examples/topolop-filtered-3d-explorer.html",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 2,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/examples/topolop-real-data-3d.html": {
      "entity": "src/examples/topolop-real-data-3d.html",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 2,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/interfaces/cli/src/commands/analyze.js": {
      "entity": "src/interfaces/cli/src/commands/analyze.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/interfaces/cli/src/commands/init.js": {
      "entity": "src/interfaces/cli/src/commands/init.js",
      "issueCount": 10,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 10,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 10,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 21,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/interfaces/cli/src/commands/serve.js": {
      "entity": "src/interfaces/cli/src/commands/serve.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/interfaces/cli/src/core/config-manager.js": {
      "entity": "src/interfaces/cli/src/core/config-manager.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/interfaces/cli/src/core/dependency-analyzer.js": {
      "entity": "src/interfaces/cli/src/core/dependency-analyzer.js",
      "issueCount": 13,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 12,
        "low": 0,
        "info": 1
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 13,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 23,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/interfaces/cli/src/core/file-processor.js": {
      "entity": "src/interfaces/cli/src/core/file-processor.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/interfaces/cli/src/core/language-detector.js": {
      "entity": "src/interfaces/cli/src/core/language-detector.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 1,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/interfaces/cli/src/core/repository-analyzer-legacy.js": {
      "entity": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
      "issueCount": 7,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 7,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 7,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 18,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "src/interfaces/cli/src/live-server.js": {
      "entity": "src/interfaces/cli/src/live-server.js",
      "issueCount": 7,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 4,
        "low": 0,
        "info": 3
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 7,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 0,
        "ai_powered": 0
      },
      "toolCoverage": [
        "Semgrep"
      ],
      "hotspotScore": 15,
      "lastUpdated": "2025-09-07T01:38:04.355Z",
      "metadata": {}
    },
    "examples/topolop-enhanced-aggregated-3d.html": {
      "entity": "examples/topolop-enhanced-aggregated-3d.html",
      "issueCount": 3,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 3,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 3,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 12,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "examples/topolop-real-data-3d.html": {
      "entity": "examples/topolop-real-data-3d.html",
      "issueCount": 3,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 3,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 3,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 12,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/canvas-renderer/public/3d-city-viewer.html": {
      "entity": "core/canvas-renderer/public/3d-city-viewer.html",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "core/canvas-renderer/public/DEVELOPER-VIEW.html": {
      "entity": "core/canvas-renderer/public/DEVELOPER-VIEW.html",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "core/canvas-renderer/public/MAIN-TEMPLATE.html": {
      "entity": "core/canvas-renderer/public/MAIN-TEMPLATE.html",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "core/canvas-renderer/public/immersive-unified-city.html": {
      "entity": "core/canvas-renderer/public/immersive-unified-city.html",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "examples/3d-city-explorer.html": {
      "entity": "examples/3d-city-explorer.html",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "examples/topolop-3d-explorer-enhanced.html": {
      "entity": "examples/topolop-3d-explorer-enhanced.html",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "examples/topolop-3d-explorer-real-data.html": {
      "entity": "examples/topolop-3d-explorer-real-data.html",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "examples/topolop-filtered-3d-explorer.html": {
      "entity": "examples/topolop-filtered-3d-explorer.html",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/formal-methods-adapters/javascript/madge-adapter.js": {
      "entity": "analyzers/formal-methods-adapters/javascript/madge-adapter.js",
      "issueCount": 4,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 4,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 4,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 13,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/sonarqube-analyzer/src/index.js": {
      "entity": "analyzers/sonarqube-analyzer/src/index.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/formal-methods-adapters/c-cpp/clang-adapter.js": {
      "entity": "analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/formal-methods-adapters/typescript/tsc-adapter.js": {
      "entity": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
      "issueCount": 6,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 6,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 6,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 16,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "analyzers/formal-methods-adapters/universal/klee-adapter.js": {
      "entity": "analyzers/formal-methods-adapters/universal/klee-adapter.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "analyzers/formal-methods-adapters/universal/perf-adapter.js": {
      "entity": "analyzers/formal-methods-adapters/universal/perf-adapter.js",
      "issueCount": 3,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 3,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 3,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 12,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js": {
      "entity": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
      "issueCount": 5,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 5,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 5,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 15,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "analyzers/github-codeql-analyzer/src/codeql-client.js": {
      "entity": "analyzers/github-codeql-analyzer/src/codeql-client.js",
      "issueCount": 9,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 9,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 9,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 20,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "analyzers/semgrep-analyzer/src/semgrep-client.js": {
      "entity": "analyzers/semgrep-analyzer/src/semgrep-client.js",
      "issueCount": 6,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 6,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 6,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 16,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "interfaces/cli/src/live-server.js": {
      "entity": "interfaces/cli/src/live-server.js",
      "issueCount": 4,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 4,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 4,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 13,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/utils/fs-utils.js": {
      "entity": "analyzers/utils/fs-utils.js",
      "issueCount": 3,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 3,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 3,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 12,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/veracode-analyzer/src/cli.js": {
      "entity": "analyzers/veracode-analyzer/src/cli.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "analyzers/formal-methods-adapters/python/secure-bandit-adapter.js": {
      "entity": "analyzers/formal-methods-adapters/python/secure-bandit-adapter.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/formal-methods-adapters/python/secure-mypy-adapter.js": {
      "entity": "analyzers/formal-methods-adapters/python/secure-mypy-adapter.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "analyzers/formal-methods-adapters/python/secure-pylint-adapter.js": {
      "entity": "analyzers/formal-methods-adapters/python/secure-pylint-adapter.js",
      "issueCount": 3,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 3,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 3,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 12,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "analyzers/sonarqube-analyzer/src/sonarqube-client.js": {
      "entity": "analyzers/sonarqube-analyzer/src/sonarqube-client.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/ast-analyzer/src/parsers/java-parser.js": {
      "entity": "analyzers/ast-analyzer/src/parsers/java-parser.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/ast-analyzer/src/parsers/javascript-parser.js": {
      "entity": "analyzers/ast-analyzer/src/parsers/javascript-parser.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/ast-analyzer/src/parsers/python-parser.js": {
      "entity": "analyzers/ast-analyzer/src/parsers/python-parser.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/checkmarx-analyzer/src/checkmarx-client.js": {
      "entity": "analyzers/checkmarx-analyzer/src/checkmarx-client.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/checkmarx-analyzer/src/checkmarx-mapper.js": {
      "entity": "analyzers/checkmarx-analyzer/src/checkmarx-mapper.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/checkmarx-analyzer/src/cli.js": {
      "entity": "analyzers/checkmarx-analyzer/src/cli.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/codacy-analyzer/src/codacy-client.js": {
      "entity": "analyzers/codacy-analyzer/src/codacy-client.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/codeclimate-analyzer/src/codeclimate-mapper.js": {
      "entity": "analyzers/codeclimate-analyzer/src/codeclimate-mapper.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/deepsource-analyzer/src/cli.js": {
      "entity": "analyzers/deepsource-analyzer/src/cli.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/deepsource-analyzer/src/deepsource-client.js": {
      "entity": "analyzers/deepsource-analyzer/src/deepsource-client.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/deepsource-analyzer/src/index.js": {
      "entity": "analyzers/deepsource-analyzer/src/index.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/formal-methods-adapters/adapter-registry.js": {
      "entity": "analyzers/formal-methods-adapters/adapter-registry.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js": {
      "entity": "analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js": {
      "entity": "analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/formal-methods-adapters/index.js": {
      "entity": "analyzers/formal-methods-adapters/index.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/formal-methods-adapters/javascript/eslint-adapter.js": {
      "entity": "analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/formal-methods-adapters/python/bandit-adapter.js": {
      "entity": "analyzers/formal-methods-adapters/python/bandit-adapter.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/formal-methods-adapters/python/mypy-adapter.js": {
      "entity": "analyzers/formal-methods-adapters/python/mypy-adapter.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/formal-methods-adapters/python/pylint-adapter.js": {
      "entity": "analyzers/formal-methods-adapters/python/pylint-adapter.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/formal-methods-adapters/python/pyreverse-adapter.js": {
      "entity": "analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.370Z",
      "metadata": {}
    },
    "analyzers/github-codeql-analyzer/src/cli.js": {
      "entity": "analyzers/github-codeql-analyzer/src/cli.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "analyzers/github-codeql-analyzer/src/codeql-mapper.js": {
      "entity": "analyzers/github-codeql-analyzer/src/codeql-mapper.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "analyzers/semgrep-analyzer/src/cli.js": {
      "entity": "analyzers/semgrep-analyzer/src/cli.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "analyzers/semgrep-analyzer/src/semgrep-mapper.js": {
      "entity": "analyzers/semgrep-analyzer/src/semgrep-mapper.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "analyzers/snyk-analyzer/src/snyk-mapper.js": {
      "entity": "analyzers/snyk-analyzer/src/snyk-mapper.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "analyzers/utils/performance-utils.js": {
      "entity": "analyzers/utils/performance-utils.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "analyzers/veracode-analyzer/src/veracode-mapper.js": {
      "entity": "analyzers/veracode-analyzer/src/veracode-mapper.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/canvas-renderer/src/canvas-engine.js": {
      "entity": "core/canvas-renderer/src/canvas-engine.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/canvas-renderer/src/engines/archived/node-canvas-engine.js": {
      "entity": "core/canvas-renderer/src/engines/archived/node-canvas-engine.js",
      "issueCount": 3,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 3,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 3,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 12,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/canvas-renderer/src/engines/threejs-canvas-engine.js": {
      "entity": "core/canvas-renderer/src/engines/threejs-canvas-engine.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/canvas-renderer/src/examples/create-city-visualization.js": {
      "entity": "core/canvas-renderer/src/examples/create-city-visualization.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/canvas-renderer/src/renderers/archived/city-renderer-2d.js": {
      "entity": "core/canvas-renderer/src/renderers/archived/city-renderer-2d.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/canvas-renderer/src/utils/city-animations.js": {
      "entity": "core/canvas-renderer/src/utils/city-animations.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/canvas-renderer/src/utils/city-geometry.js": {
      "entity": "core/canvas-renderer/src/utils/city-geometry.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/canvas-renderer/templates/3d-visualization-template.js": {
      "entity": "core/canvas-renderer/templates/3d-visualization-template.js",
      "issueCount": 3,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 3,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 3,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 12,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/canvas-renderer/templates/unified-data-adapter.ts": {
      "entity": "core/canvas-renderer/templates/unified-data-adapter.ts",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/graph-model/src/index.js": {
      "entity": "core/graph-model/src/index.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/unified-model/codeql-adapter.ts": {
      "entity": "core/unified-model/codeql-adapter.ts",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/unified-model/comprehensive-8-tool-integration-test.ts": {
      "entity": "core/unified-model/comprehensive-8-tool-integration-test.ts",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/unified-model/deepsource-adapter.ts": {
      "entity": "core/unified-model/deepsource-adapter.ts",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/unified-model/full-adapter-integration-test.ts": {
      "entity": "core/unified-model/full-adapter-integration-test.ts",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/unified-model/skeptical-verification-clean.ts": {
      "entity": "core/unified-model/skeptical-verification-clean.ts",
      "issueCount": 4,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 4,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 4,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 13,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/unified-model/test-4-tool-correlation.js": {
      "entity": "core/unified-model/test-4-tool-correlation.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/unified-model/test-8-tool-correlation.js": {
      "entity": "core/unified-model/test-8-tool-correlation.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/unified-model/test-codeclimate-adapter.js": {
      "entity": "core/unified-model/test-codeclimate-adapter.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/unified-model/test-deepsource-adapter.js": {
      "entity": "core/unified-model/test-deepsource-adapter.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/unified-model/test-semgrep-adapter.js": {
      "entity": "core/unified-model/test-semgrep-adapter.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/unified-model/test-sonarqube-adapter.js": {
      "entity": "core/unified-model/test-sonarqube-adapter.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/unified-model/test-veracode-adapter.js": {
      "entity": "core/unified-model/test-veracode-adapter.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/unified-model/unified-to-city-bridge.ts": {
      "entity": "core/unified-model/unified-to-city-bridge.ts",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/unified-model/veracode-adapter.ts": {
      "entity": "core/unified-model/veracode-adapter.ts",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "examples/demo-3d-city.js": {
      "entity": "examples/demo-3d-city.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "examples/demo-catzen-city.js": {
      "entity": "examples/demo-catzen-city.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "examples/demo-performance-integration.js": {
      "entity": "examples/demo-performance-integration.js",
      "issueCount": 3,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 3,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 3,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 12,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "examples/demo-performance-visualization.js": {
      "entity": "examples/demo-performance-visualization.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "examples/demo-spaceful-city.js": {
      "entity": "examples/demo-spaceful-city.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "examples/demo-topolop-complete.js": {
      "entity": "examples/demo-topolop-complete.js",
      "issueCount": 5,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 5,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 5,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 15,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "examples/demo-visual-city-renderer.js": {
      "entity": "examples/demo-visual-city-renderer.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "examples/unified-city-live-demo.js": {
      "entity": "examples/unified-city-live-demo.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "interfaces/cli/bin/topolop.js": {
      "entity": "interfaces/cli/bin/topolop.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "interfaces/cli/src/commands/init.js": {
      "entity": "interfaces/cli/src/commands/init.js",
      "issueCount": 3,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 3,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 3,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 12,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "interfaces/cli/src/core/file-processor.js": {
      "entity": "interfaces/cli/src/core/file-processor.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "interfaces/cli/src/core/git-analyzer.js": {
      "entity": "interfaces/cli/src/core/git-analyzer.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "interfaces/cli/src/core/module-hierarchy-builder.js": {
      "entity": "interfaces/cli/src/core/module-hierarchy-builder.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "interfaces/cli/src/core/output-generator.js": {
      "entity": "interfaces/cli/src/core/output-generator.js",
      "issueCount": 2,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 2,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 2,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 9,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "interfaces/cli/src/core/repository-analyzer-legacy.js": {
      "entity": "interfaces/cli/src/core/repository-analyzer-legacy.js",
      "issueCount": 1,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 1,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 1,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 7,
      "lastUpdated": "2025-09-07T01:38:04.371Z",
      "metadata": {}
    },
    "core/unified-model/skeptical-verification.ts": {
      "entity": "core/unified-model/skeptical-verification.ts",
      "issueCount": 24,
      "severityDistribution": {
        "critical": 0,
        "high": 0,
        "medium": 24,
        "low": 0,
        "info": 0
      },
      "analysisTypeDistribution": {
        "quality": 0,
        "security": 0,
        "performance": 0,
        "style": 0,
        "complexity": 0,
        "semantic": 24,
        "ai_powered": 0
      },
      "toolCoverage": [
        "CodeQL"
      ],
      "hotspotScore": 33,
      "lastUpdated": "2025-09-07T01:38:04.372Z",
      "metadata": {}
    }
  },
  "correlationGroups": [
    {
      "id": "correlation-src-analyzers-ast-analyzer-src-analyzer-js-288",
      "canonicalPath": "src/analyzers/ast-analyzer/src/analyzer.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-0",
          "entity": {
            "canonicalPath": "src/analyzers/ast-analyzer/src/analyzer.js",
            "originalIdentifier": "src/analyzers/ast-analyzer/src/analyzer.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 288,
          "column": 38,
          "endLine": 288,
          "endColumn": 49,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.352Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-1",
          "entity": {
            "canonicalPath": "src/analyzers/ast-analyzer/src/analyzer.js",
            "originalIdentifier": "src/analyzers/ast-analyzer/src/analyzer.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 288,
          "column": 51,
          "endLine": 288,
          "endColumn": 61,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.353Z"
        }
      ],
      "lineRange": {
        "start": 288,
        "end": 288
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-checkmarx-analyzer-src-index-js-304",
      "canonicalPath": "src/analyzers/checkmarx-analyzer/src/index.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-2",
          "entity": {
            "canonicalPath": "src/analyzers/checkmarx-analyzer/src/index.js",
            "originalIdentifier": "src/analyzers/checkmarx-analyzer/src/index.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 304,
          "column": 32,
          "endLine": 304,
          "endColumn": 42,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.353Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-3",
          "entity": {
            "canonicalPath": "src/analyzers/checkmarx-analyzer/src/index.js",
            "originalIdentifier": "src/analyzers/checkmarx-analyzer/src/index.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 304,
          "column": 44,
          "endLine": 304,
          "endColumn": 52,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.353Z"
        }
      ],
      "lineRange": {
        "start": 304,
        "end": 304
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-codacy-analyzer-src-index-js-338",
      "canonicalPath": "src/analyzers/codacy-analyzer/src/index.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-5",
          "entity": {
            "canonicalPath": "src/analyzers/codacy-analyzer/src/index.js",
            "originalIdentifier": "src/analyzers/codacy-analyzer/src/index.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 338,
          "column": 32,
          "endLine": 338,
          "endColumn": 42,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.353Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-6",
          "entity": {
            "canonicalPath": "src/analyzers/codacy-analyzer/src/index.js",
            "originalIdentifier": "src/analyzers/codacy-analyzer/src/index.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 338,
          "column": 44,
          "endLine": 338,
          "endColumn": 52,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.353Z"
        }
      ],
      "lineRange": {
        "start": 338,
        "end": 338
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-c-cpp-cbmc-adapter-js-65",
      "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-12",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 65,
          "column": 38,
          "endLine": 65,
          "endColumn": 50,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.353Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-13",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 65,
          "column": 52,
          "endLine": 65,
          "endColumn": 62,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.353Z"
        }
      ],
      "lineRange": {
        "start": 65,
        "end": 65
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-c-cpp-cbmc-adapter-js-136",
      "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-15",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 136,
          "column": 38,
          "endLine": 136,
          "endColumn": 41,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.353Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-16",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/cbmc-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 136,
          "column": 43,
          "endLine": 136,
          "endColumn": 52,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.353Z"
        }
      ],
      "lineRange": {
        "start": 136,
        "end": 136
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-c-cpp-clang-adapter-js-46",
      "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-17",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 46,
          "column": 33,
          "endLine": 46,
          "endColumn": 45,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.353Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-18",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 47,
          "column": 32,
          "endLine": 47,
          "endColumn": 41,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.353Z"
        }
      ],
      "lineRange": {
        "start": 46,
        "end": 47
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-c-cpp-clang-adapter-js-66",
      "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-19",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "high",
          "analysisType": "security",
          "title": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "description": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
          "line": 66,
          "column": 31,
          "endLine": 66,
          "endColumn": 42,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
            ],
            "owasp": [
              "A01:2017 - Injection",
              "A03:2021 - Injection"
            ],
            "references": [
              "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
            ],
            "confidence": "LOW",
            "impact": "HIGH"
          },
          "createdAt": "2025-09-07T01:38:04.353Z"
        },
        {
          "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-20",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "high",
          "analysisType": "security",
          "title": "Detected calls to child_process from a function argument `options`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "description": "Detected calls to child_process from a function argument `options`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
          "line": 66,
          "column": 31,
          "endLine": 66,
          "endColumn": 42,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
            ],
            "owasp": [
              "A01:2017 - Injection",
              "A03:2021 - Injection"
            ],
            "references": [
              "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
            ],
            "confidence": "LOW",
            "impact": "HIGH"
          },
          "createdAt": "2025-09-07T01:38:04.353Z"
        }
      ],
      "lineRange": {
        "start": 66,
        "end": 66
      },
      "riskScore": 7,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-c-cpp-clang-adapter-js-108",
      "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-21",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 108,
          "column": 33,
          "endLine": 108,
          "endColumn": 45,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.353Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-22",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 111,
          "column": 33,
          "endLine": 111,
          "endColumn": 45,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.353Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-23",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 114,
          "column": 33,
          "endLine": 114,
          "endColumn": 45,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.353Z"
        }
      ],
      "lineRange": {
        "start": 108,
        "end": 114
      },
      "riskScore": 6,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-c-cpp-clang-adapter-js-134",
      "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-24",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 134,
          "column": 38,
          "endLine": 134,
          "endColumn": 41,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.353Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-25",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 134,
          "column": 43,
          "endLine": 134,
          "endColumn": 52,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.353Z"
        }
      ],
      "lineRange": {
        "start": 134,
        "end": 134
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-c-cpp-clang-adapter-js-158",
      "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-26",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 158,
          "column": 38,
          "endLine": 158,
          "endColumn": 41,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.353Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-27",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/clang-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 158,
          "column": 43,
          "endLine": 158,
          "endColumn": 52,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 158,
        "end": 158
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-c-cpp-valgrind-adapter-js-132",
      "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-29",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 132,
          "column": 38,
          "endLine": 132,
          "endColumn": 41,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-30",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 132,
          "column": 43,
          "endLine": 132,
          "endColumn": 52,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 132,
        "end": 132
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-c-cpp-valgrind-adapter-js-184",
      "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-31",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 184,
          "column": 38,
          "endLine": 184,
          "endColumn": 41,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-32",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 184,
          "column": 43,
          "endLine": 184,
          "endColumn": 52,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 184,
        "end": 184
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-c-cpp-valgrind-adapter-js-203",
      "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-33",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 203,
          "column": 34,
          "endLine": 203,
          "endColumn": 58,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-34",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 203,
          "column": 60,
          "endLine": 203,
          "endColumn": 86,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-35",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/c-cpp/valgrind-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "high",
          "analysisType": "security",
          "title": "Detected calls to child_process from a function argument `sourceFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "description": "Detected calls to child_process from a function argument `sourceFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
          "line": 213,
          "column": 16,
          "endLine": 213,
          "endColumn": 30,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
            ],
            "owasp": [
              "A01:2017 - Injection",
              "A03:2021 - Injection"
            ],
            "references": [
              "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
            ],
            "confidence": "LOW",
            "impact": "HIGH"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 203,
        "end": 213
      },
      "riskScore": 8,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-cpp-secure-container-adapter-js-63",
      "canonicalPath": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-40",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 63,
          "column": 44,
          "endLine": 63,
          "endColumn": 47,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-41",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 63,
          "column": 49,
          "endLine": 63,
          "endColumn": 59,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 63,
        "end": 63
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-cpp-secure-container-adapter-js-196",
      "canonicalPath": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-43",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 196,
          "column": 41,
          "endLine": 196,
          "endColumn": 50,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-44",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 204,
          "column": 69,
          "endLine": 204,
          "endColumn": 78,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-45",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/cpp/secure-container-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 204,
          "column": 80,
          "endLine": 204,
          "endColumn": 84,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 196,
        "end": 204
      },
      "riskScore": 6,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-javascript-eslint-adapter-js-181",
      "canonicalPath": "src/analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-47",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 181,
          "column": 38,
          "endLine": 181,
          "endColumn": 41,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-48",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 181,
          "column": 43,
          "endLine": 181,
          "endColumn": 53,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 181,
        "end": 181
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-javascript-eslint-adapter-js-224",
      "canonicalPath": "src/analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-49",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 224,
          "column": 39,
          "endLine": 224,
          "endColumn": 47,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-50",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/javascript/eslint-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 225,
          "column": 39,
          "endLine": 225,
          "endColumn": 47,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 224,
        "end": 225
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-javascript-madge-adapter-js-257",
      "canonicalPath": "src/analyzers/formal-methods-adapters/javascript/madge-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-53",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/javascript/madge-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/javascript/madge-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 257,
          "column": 40,
          "endLine": 257,
          "endColumn": 49,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-54",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/javascript/madge-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/javascript/madge-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 258,
          "column": 39,
          "endLine": 258,
          "endColumn": 47,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 257,
        "end": 258
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-python-bandit-adapter-js-45",
      "canonicalPath": "src/analyzers/formal-methods-adapters/python/bandit-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-55",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/python/bandit-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/python/bandit-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 45,
          "column": 34,
          "endLine": 45,
          "endColumn": 46,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-56",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/python/bandit-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/python/bandit-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "high",
          "analysisType": "security",
          "title": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "description": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
          "line": 50,
          "column": 16,
          "endLine": 50,
          "endColumn": 29,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
            ],
            "owasp": [
              "A01:2017 - Injection",
              "A03:2021 - Injection"
            ],
            "references": [
              "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
            ],
            "confidence": "LOW",
            "impact": "HIGH"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 45,
        "end": 50
      },
      "riskScore": 6,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-python-pylint-adapter-js-44",
      "canonicalPath": "src/analyzers/formal-methods-adapters/python/pylint-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-59",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/python/pylint-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pylint-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 44,
          "column": 34,
          "endLine": 44,
          "endColumn": 46,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-60",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/python/pylint-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pylint-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "high",
          "analysisType": "security",
          "title": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "description": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
          "line": 49,
          "column": 16,
          "endLine": 49,
          "endColumn": 29,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
            ],
            "owasp": [
              "A01:2017 - Injection",
              "A03:2021 - Injection"
            ],
            "references": [
              "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
            ],
            "confidence": "LOW",
            "impact": "HIGH"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-61",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/python/pylint-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pylint-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "high",
          "analysisType": "security",
          "title": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "description": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
          "line": 57,
          "column": 9,
          "endLine": 57,
          "endColumn": 108,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
            ],
            "owasp": [
              "A01:2017 - Injection",
              "A03:2021 - Injection"
            ],
            "references": [
              "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
            ],
            "confidence": "LOW",
            "impact": "HIGH"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 44,
        "end": 57
      },
      "riskScore": 9,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-python-pyreverse-adapter-js-45",
      "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-62",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 45,
          "column": 31,
          "endLine": 45,
          "endColumn": 43,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-63",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "high",
          "analysisType": "security",
          "title": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "description": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
          "line": 55,
          "column": 16,
          "endLine": 55,
          "endColumn": 30,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
            ],
            "owasp": [
              "A01:2017 - Injection",
              "A03:2021 - Injection"
            ],
            "references": [
              "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
            ],
            "confidence": "LOW",
            "impact": "HIGH"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-64",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "high",
          "analysisType": "security",
          "title": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "description": "Detected calls to child_process from a function argument `codebasePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
          "line": 58,
          "column": 16,
          "endLine": 58,
          "endColumn": 28,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
            ],
            "owasp": [
              "A01:2017 - Injection",
              "A03:2021 - Injection"
            ],
            "references": [
              "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
            ],
            "confidence": "LOW",
            "impact": "HIGH"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 45,
        "end": 58
      },
      "riskScore": 9,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-python-pyreverse-adapter-js-91",
      "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-65",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 91,
          "column": 34,
          "endLine": 91,
          "endColumn": 41,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-66",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 91,
          "column": 43,
          "endLine": 91,
          "endColumn": 58,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 91,
        "end": 91
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-python-pyreverse-adapter-js-140",
      "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-67",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 140,
          "column": 36,
          "endLine": 140,
          "endColumn": 39,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-68",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 140,
          "column": 41,
          "endLine": 140,
          "endColumn": 50,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 140,
        "end": 140
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-python-pyreverse-adapter-js-222",
      "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-69",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 222,
          "column": 35,
          "endLine": 222,
          "endColumn": 42,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-70",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/python/pyreverse-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 222,
          "column": 44,
          "endLine": 222,
          "endColumn": 48,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 222,
        "end": 222
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-python-secure-bandit-adapter-js-398",
      "canonicalPath": "src/analyzers/formal-methods-adapters/python/secure-bandit-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-72",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/python/secure-bandit-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/python/secure-bandit-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 398,
          "column": 36,
          "endLine": 398,
          "endColumn": 43,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-73",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/python/secure-bandit-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/python/secure-bandit-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 398,
          "column": 45,
          "endLine": 398,
          "endColumn": 55,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 398,
        "end": 398
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-python-secure-mypy-adapter-js-348",
      "canonicalPath": "src/analyzers/formal-methods-adapters/python/secure-mypy-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-77",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/python/secure-mypy-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/python/secure-mypy-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 348,
          "column": 36,
          "endLine": 348,
          "endColumn": 43,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-78",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/python/secure-mypy-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/python/secure-mypy-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 348,
          "column": 45,
          "endLine": 348,
          "endColumn": 55,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 348,
        "end": 348
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-python-secure-pylint-adapter-js-344",
      "canonicalPath": "src/analyzers/formal-methods-adapters/python/secure-pylint-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-80",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/python/secure-pylint-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/python/secure-pylint-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 344,
          "column": 36,
          "endLine": 344,
          "endColumn": 43,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-81",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/python/secure-pylint-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/python/secure-pylint-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 344,
          "column": 45,
          "endLine": 344,
          "endColumn": 55,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 344,
        "end": 344
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-security-input-validator-js-372",
      "canonicalPath": "src/analyzers/formal-methods-adapters/security/input-validator.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-83",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/security/input-validator.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/security/input-validator.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 372,
          "column": 38,
          "endLine": 372,
          "endColumn": 41,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-84",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/security/input-validator.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/security/input-validator.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 372,
          "column": 43,
          "endLine": 372,
          "endColumn": 53,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 372,
        "end": 372
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-typescript-tsc-adapter-js-206",
      "canonicalPath": "src/analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-87",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "high",
          "analysisType": "security",
          "title": "Detected calls to child_process from a function argument `basePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "description": "Detected calls to child_process from a function argument `basePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
          "line": 206,
          "column": 31,
          "endLine": 206,
          "endColumn": 38,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
            ],
            "owasp": [
              "A01:2017 - Injection",
              "A03:2021 - Injection"
            ],
            "references": [
              "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
            ],
            "confidence": "LOW",
            "impact": "HIGH"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-88",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "high",
          "analysisType": "security",
          "title": "Detected calls to child_process from a function argument `tsconfigPath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "description": "Detected calls to child_process from a function argument `tsconfigPath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
          "line": 206,
          "column": 31,
          "endLine": 206,
          "endColumn": 38,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
            ],
            "owasp": [
              "A01:2017 - Injection",
              "A03:2021 - Injection"
            ],
            "references": [
              "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
            ],
            "confidence": "LOW",
            "impact": "HIGH"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 206,
        "end": 206
      },
      "riskScore": 7,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-universal-klee-adapter-js-111",
      "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-89",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 111,
          "column": 38,
          "endLine": 111,
          "endColumn": 41,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-90",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 111,
          "column": 43,
          "endLine": 111,
          "endColumn": 52,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 111,
        "end": 111
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-universal-klee-adapter-js-149",
      "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-91",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 149,
          "column": 34,
          "endLine": 149,
          "endColumn": 58,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-92",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 149,
          "column": 60,
          "endLine": 149,
          "endColumn": 75,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-93",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "high",
          "analysisType": "security",
          "title": "Detected calls to child_process from a function argument `sourceFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "description": "Detected calls to child_process from a function argument `sourceFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
          "line": 155,
          "column": 16,
          "endLine": 155,
          "endColumn": 30,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
            ],
            "owasp": [
              "A01:2017 - Injection",
              "A03:2021 - Injection"
            ],
            "references": [
              "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
            ],
            "confidence": "LOW",
            "impact": "HIGH"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 149,
        "end": 155
      },
      "riskScore": 8,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-universal-klee-adapter-js-208",
      "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-95",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "high",
          "analysisType": "security",
          "title": "Detected calls to child_process from a function argument `bitcodeFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "description": "Detected calls to child_process from a function argument `bitcodeFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
          "line": 208,
          "column": 31,
          "endLine": 208,
          "endColumn": 42,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
            ],
            "owasp": [
              "A01:2017 - Injection",
              "A03:2021 - Injection"
            ],
            "references": [
              "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
            ],
            "confidence": "LOW",
            "impact": "HIGH"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-96",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "high",
          "analysisType": "security",
          "title": "Detected calls to child_process from a function argument `options`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "description": "Detected calls to child_process from a function argument `options`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
          "line": 208,
          "column": 31,
          "endLine": 208,
          "endColumn": 42,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
            ],
            "owasp": [
              "A01:2017 - Injection",
              "A03:2021 - Injection"
            ],
            "references": [
              "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
            ],
            "confidence": "LOW",
            "impact": "HIGH"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 208,
        "end": 208
      },
      "riskScore": 7,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-universal-klee-adapter-js-328",
      "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-97",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 328,
          "column": 37,
          "endLine": 328,
          "endColumn": 46,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-98",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/klee-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 328,
          "column": 48,
          "endLine": 328,
          "endColumn": 52,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 328,
        "end": 328
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-universal-perf-adapter-js-137",
      "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-100",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 137,
          "column": 38,
          "endLine": 137,
          "endColumn": 41,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-101",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 137,
          "column": 43,
          "endLine": 137,
          "endColumn": 52,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 137,
        "end": 137
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-universal-perf-adapter-js-167",
      "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-102",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 167,
          "column": 33,
          "endLine": 167,
          "endColumn": 45,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-103",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 170,
          "column": 33,
          "endLine": 170,
          "endColumn": 45,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-104",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 173,
          "column": 33,
          "endLine": 173,
          "endColumn": 45,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-105",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 176,
          "column": 33,
          "endLine": 176,
          "endColumn": 45,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 167,
        "end": 176
      },
      "riskScore": 8,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-universal-perf-adapter-js-345",
      "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-107",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "high",
          "analysisType": "security",
          "title": "Detected calls to child_process from a function argument `basePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "description": "Detected calls to child_process from a function argument `basePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
          "line": 345,
          "column": 16,
          "endLine": 345,
          "endColumn": 29,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
            ],
            "owasp": [
              "A01:2017 - Injection",
              "A03:2021 - Injection"
            ],
            "references": [
              "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
            ],
            "confidence": "LOW",
            "impact": "HIGH"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-108",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "high",
          "analysisType": "security",
          "title": "Detected calls to child_process from a function argument `target`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "description": "Detected calls to child_process from a function argument `target`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
          "line": 345,
          "column": 16,
          "endLine": 345,
          "endColumn": 29,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
            ],
            "owasp": [
              "A01:2017 - Injection",
              "A03:2021 - Injection"
            ],
            "references": [
              "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
            ],
            "confidence": "LOW",
            "impact": "HIGH"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-109",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/perf-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "high",
          "analysisType": "security",
          "title": "Detected calls to child_process from a function argument `basePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "description": "Detected calls to child_process from a function argument `basePath`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
          "line": 353,
          "column": 37,
          "endLine": 353,
          "endColumn": 50,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
            ],
            "owasp": [
              "A01:2017 - Injection",
              "A03:2021 - Injection"
            ],
            "references": [
              "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
            ],
            "confidence": "LOW",
            "impact": "HIGH"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 345,
        "end": 353
      },
      "riskScore": 11,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-universal-tlaplus-adapter-js-124",
      "canonicalPath": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-110",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 124,
          "column": 38,
          "endLine": 124,
          "endColumn": 41,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-111",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 124,
          "column": 43,
          "endLine": 124,
          "endColumn": 52,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 124,
        "end": 124
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-universal-tlaplus-adapter-js-143",
      "canonicalPath": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-112",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 143,
          "column": 34,
          "endLine": 143,
          "endColumn": 37,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-113",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 143,
          "column": 39,
          "endLine": 143,
          "endColumn": 55,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 143,
        "end": 143
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-formal-methods-adapters-universal-tlaplus-adapter-js-362",
      "canonicalPath": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-115",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "high",
          "analysisType": "security",
          "title": "Detected calls to child_process from a function argument `configFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "description": "Detected calls to child_process from a function argument `configFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
          "line": 362,
          "column": 31,
          "endLine": 362,
          "endColumn": 41,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
            ],
            "owasp": [
              "A01:2017 - Injection",
              "A03:2021 - Injection"
            ],
            "references": [
              "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
            ],
            "confidence": "LOW",
            "impact": "HIGH"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.detect-child-process.detect-child-process-116",
          "entity": {
            "canonicalPath": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
            "originalIdentifier": "src/analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "high",
          "analysisType": "security",
          "title": "Detected calls to child_process from a function argument `tlaFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "description": "Detected calls to child_process from a function argument `tlaFile`. This could lead to a command injection if the input is user controllable. Try to avoid calls to child_process, and if it is needed ensure user input is correctly sanitized or sandboxed. ",
          "ruleId": "javascript.lang.security.detect-child-process.detect-child-process",
          "line": 362,
          "column": 31,
          "endLine": 362,
          "endColumn": 41,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
            ],
            "owasp": [
              "A01:2017 - Injection",
              "A03:2021 - Injection"
            ],
            "references": [
              "https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions"
            ],
            "confidence": "LOW",
            "impact": "HIGH"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 362,
        "end": 362
      },
      "riskScore": 7,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-github-codeql-analyzer-src-codeql-client-js-114",
      "canonicalPath": "src/analyzers/github-codeql-analyzer/src/codeql-client.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-121",
          "entity": {
            "canonicalPath": "src/analyzers/github-codeql-analyzer/src/codeql-client.js",
            "originalIdentifier": "src/analyzers/github-codeql-analyzer/src/codeql-client.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 114,
          "column": 56,
          "endLine": 114,
          "endColumn": 82,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-122",
          "entity": {
            "canonicalPath": "src/analyzers/github-codeql-analyzer/src/codeql-client.js",
            "originalIdentifier": "src/analyzers/github-codeql-analyzer/src/codeql-client.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 114,
          "column": 84,
          "endLine": 114,
          "endColumn": 129,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 114,
        "end": 114
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-runtime-profiling-nodejs-profiler-integration-js-71",
      "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-128",
          "entity": {
            "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
            "originalIdentifier": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 71,
          "column": 17,
          "endLine": 71,
          "endColumn": 28,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-129",
          "entity": {
            "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
            "originalIdentifier": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 71,
          "column": 30,
          "endLine": 71,
          "endColumn": 40,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-130",
          "entity": {
            "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
            "originalIdentifier": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 72,
          "column": 17,
          "endLine": 72,
          "endColumn": 28,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-131",
          "entity": {
            "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
            "originalIdentifier": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 73,
          "column": 17,
          "endLine": 73,
          "endColumn": 28,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-132",
          "entity": {
            "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
            "originalIdentifier": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 74,
          "column": 17,
          "endLine": 74,
          "endColumn": 28,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-133",
          "entity": {
            "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
            "originalIdentifier": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 75,
          "column": 17,
          "endLine": 75,
          "endColumn": 28,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-134",
          "entity": {
            "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
            "originalIdentifier": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 76,
          "column": 17,
          "endLine": 76,
          "endColumn": 28,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        }
      ],
      "lineRange": {
        "start": 71,
        "end": 76
      },
      "riskScore": 14,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-runtime-profiling-nodejs-profiler-integration-js-90",
      "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-135",
          "entity": {
            "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
            "originalIdentifier": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 90,
          "column": 41,
          "endLine": 90,
          "endColumn": 52,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-136",
          "entity": {
            "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
            "originalIdentifier": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 93,
          "column": 36,
          "endLine": 93,
          "endColumn": 47,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.354Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-137",
          "entity": {
            "canonicalPath": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
            "originalIdentifier": "src/analyzers/runtime-profiling/nodejs-profiler-integration.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 93,
          "column": 49,
          "endLine": 93,
          "endColumn": 65,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        }
      ],
      "lineRange": {
        "start": 90,
        "end": 93
      },
      "riskScore": 6,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-snyk-analyzer-src-snyk-client-js-122",
      "canonicalPath": "src/analyzers/snyk-analyzer/src/snyk-client.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-148",
          "entity": {
            "canonicalPath": "src/analyzers/snyk-analyzer/src/snyk-client.js",
            "originalIdentifier": "src/analyzers/snyk-analyzer/src/snyk-client.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 122,
          "column": 37,
          "endLine": 122,
          "endColumn": 45,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-149",
          "entity": {
            "canonicalPath": "src/analyzers/snyk-analyzer/src/snyk-client.js",
            "originalIdentifier": "src/analyzers/snyk-analyzer/src/snyk-client.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 122,
          "column": 47,
          "endLine": 122,
          "endColumn": 51,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        }
      ],
      "lineRange": {
        "start": 122,
        "end": 122
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-utils-fs-utils-js-190",
      "canonicalPath": "src/analyzers/utils/fs-utils.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-157",
          "entity": {
            "canonicalPath": "src/analyzers/utils/fs-utils.js",
            "originalIdentifier": "src/analyzers/utils/fs-utils.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 190,
          "column": 34,
          "endLine": 190,
          "endColumn": 43,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-158",
          "entity": {
            "canonicalPath": "src/analyzers/utils/fs-utils.js",
            "originalIdentifier": "src/analyzers/utils/fs-utils.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 194,
          "column": 37,
          "endLine": 194,
          "endColumn": 48,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-159",
          "entity": {
            "canonicalPath": "src/analyzers/utils/fs-utils.js",
            "originalIdentifier": "src/analyzers/utils/fs-utils.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 194,
          "column": 50,
          "endLine": 194,
          "endColumn": 58,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        }
      ],
      "lineRange": {
        "start": 190,
        "end": 194
      },
      "riskScore": 6,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-analyzers-utils-path-utils-js-101",
      "canonicalPath": "src/analyzers/utils/path-utils.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-164",
          "entity": {
            "canonicalPath": "src/analyzers/utils/path-utils.js",
            "originalIdentifier": "src/analyzers/utils/path-utils.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 101,
          "column": 29,
          "endLine": 101,
          "endColumn": 38,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-165",
          "entity": {
            "canonicalPath": "src/analyzers/utils/path-utils.js",
            "originalIdentifier": "src/analyzers/utils/path-utils.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 102,
          "column": 30,
          "endLine": 102,
          "endColumn": 39,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-166",
          "entity": {
            "canonicalPath": "src/analyzers/utils/path-utils.js",
            "originalIdentifier": "src/analyzers/utils/path-utils.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 106,
          "column": 28,
          "endLine": 106,
          "endColumn": 37,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-167",
          "entity": {
            "canonicalPath": "src/analyzers/utils/path-utils.js",
            "originalIdentifier": "src/analyzers/utils/path-utils.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 107,
          "column": 30,
          "endLine": 107,
          "endColumn": 39,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-168",
          "entity": {
            "canonicalPath": "src/analyzers/utils/path-utils.js",
            "originalIdentifier": "src/analyzers/utils/path-utils.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 111,
          "column": 30,
          "endLine": 111,
          "endColumn": 39,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-169",
          "entity": {
            "canonicalPath": "src/analyzers/utils/path-utils.js",
            "originalIdentifier": "src/analyzers/utils/path-utils.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 112,
          "column": 30,
          "endLine": 112,
          "endColumn": 39,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-170",
          "entity": {
            "canonicalPath": "src/analyzers/utils/path-utils.js",
            "originalIdentifier": "src/analyzers/utils/path-utils.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 116,
          "column": 30,
          "endLine": 116,
          "endColumn": 39,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-171",
          "entity": {
            "canonicalPath": "src/analyzers/utils/path-utils.js",
            "originalIdentifier": "src/analyzers/utils/path-utils.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 120,
          "column": 30,
          "endLine": 120,
          "endColumn": 39,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-172",
          "entity": {
            "canonicalPath": "src/analyzers/utils/path-utils.js",
            "originalIdentifier": "src/analyzers/utils/path-utils.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 124,
          "column": 50,
          "endLine": 124,
          "endColumn": 59,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-173",
          "entity": {
            "canonicalPath": "src/analyzers/utils/path-utils.js",
            "originalIdentifier": "src/analyzers/utils/path-utils.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 124,
          "column": 61,
          "endLine": 124,
          "endColumn": 65,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        }
      ],
      "lineRange": {
        "start": 101,
        "end": 124
      },
      "riskScore": 20,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-core-canvas-renderer-public-3d-city-viewer-html-7",
      "canonicalPath": "src/core/canvas-renderer/public/3d-city-viewer.html",
      "issues": [
        {
          "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-179",
          "entity": {
            "canonicalPath": "src/core/canvas-renderer/public/3d-city-viewer.html",
            "originalIdentifier": "src/core/canvas-renderer/public/3d-city-viewer.html",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "ruleId": "html.security.audit.missing-integrity.missing-integrity",
          "line": 7,
          "column": 5,
          "endLine": 7,
          "endColumn": 94,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp": [
              "A08:2021 - Software and Data Integrity Failures"
            ],
            "references": [
              "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
            ],
            "confidence": "LOW",
            "impact": "LOW"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-180",
          "entity": {
            "canonicalPath": "src/core/canvas-renderer/public/3d-city-viewer.html",
            "originalIdentifier": "src/core/canvas-renderer/public/3d-city-viewer.html",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "ruleId": "html.security.audit.missing-integrity.missing-integrity",
          "line": 8,
          "column": 5,
          "endLine": 8,
          "endColumn": 109,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp": [
              "A08:2021 - Software and Data Integrity Failures"
            ],
            "references": [
              "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
            ],
            "confidence": "LOW",
            "impact": "LOW"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        }
      ],
      "lineRange": {
        "start": 7,
        "end": 8
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-core-canvas-renderer-public-DEVELOPER-VIEW-html-381",
      "canonicalPath": "src/core/canvas-renderer/public/DEVELOPER-VIEW.html",
      "issues": [
        {
          "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-181",
          "entity": {
            "canonicalPath": "src/core/canvas-renderer/public/DEVELOPER-VIEW.html",
            "originalIdentifier": "src/core/canvas-renderer/public/DEVELOPER-VIEW.html",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "ruleId": "html.security.audit.missing-integrity.missing-integrity",
          "line": 381,
          "column": 5,
          "endLine": 381,
          "endColumn": 94,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp": [
              "A08:2021 - Software and Data Integrity Failures"
            ],
            "references": [
              "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
            ],
            "confidence": "LOW",
            "impact": "LOW"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-182",
          "entity": {
            "canonicalPath": "src/core/canvas-renderer/public/DEVELOPER-VIEW.html",
            "originalIdentifier": "src/core/canvas-renderer/public/DEVELOPER-VIEW.html",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "ruleId": "html.security.audit.missing-integrity.missing-integrity",
          "line": 382,
          "column": 5,
          "endLine": 382,
          "endColumn": 109,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp": [
              "A08:2021 - Software and Data Integrity Failures"
            ],
            "references": [
              "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
            ],
            "confidence": "LOW",
            "impact": "LOW"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        }
      ],
      "lineRange": {
        "start": 381,
        "end": 382
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-core-canvas-renderer-public-MAIN-TEMPLATE-html-7",
      "canonicalPath": "src/core/canvas-renderer/public/MAIN-TEMPLATE.html",
      "issues": [
        {
          "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-183",
          "entity": {
            "canonicalPath": "src/core/canvas-renderer/public/MAIN-TEMPLATE.html",
            "originalIdentifier": "src/core/canvas-renderer/public/MAIN-TEMPLATE.html",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "ruleId": "html.security.audit.missing-integrity.missing-integrity",
          "line": 7,
          "column": 5,
          "endLine": 7,
          "endColumn": 94,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp": [
              "A08:2021 - Software and Data Integrity Failures"
            ],
            "references": [
              "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
            ],
            "confidence": "LOW",
            "impact": "LOW"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-184",
          "entity": {
            "canonicalPath": "src/core/canvas-renderer/public/MAIN-TEMPLATE.html",
            "originalIdentifier": "src/core/canvas-renderer/public/MAIN-TEMPLATE.html",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "ruleId": "html.security.audit.missing-integrity.missing-integrity",
          "line": 8,
          "column": 5,
          "endLine": 8,
          "endColumn": 109,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp": [
              "A08:2021 - Software and Data Integrity Failures"
            ],
            "references": [
              "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
            ],
            "confidence": "LOW",
            "impact": "LOW"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        }
      ],
      "lineRange": {
        "start": 7,
        "end": 8
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-core-canvas-renderer-public-immersive-unified-city-html-7",
      "canonicalPath": "src/core/canvas-renderer/public/immersive-unified-city.html",
      "issues": [
        {
          "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-185",
          "entity": {
            "canonicalPath": "src/core/canvas-renderer/public/immersive-unified-city.html",
            "originalIdentifier": "src/core/canvas-renderer/public/immersive-unified-city.html",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "ruleId": "html.security.audit.missing-integrity.missing-integrity",
          "line": 7,
          "column": 5,
          "endLine": 7,
          "endColumn": 94,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp": [
              "A08:2021 - Software and Data Integrity Failures"
            ],
            "references": [
              "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
            ],
            "confidence": "LOW",
            "impact": "LOW"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-186",
          "entity": {
            "canonicalPath": "src/core/canvas-renderer/public/immersive-unified-city.html",
            "originalIdentifier": "src/core/canvas-renderer/public/immersive-unified-city.html",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "ruleId": "html.security.audit.missing-integrity.missing-integrity",
          "line": 8,
          "column": 5,
          "endLine": 8,
          "endColumn": 109,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp": [
              "A08:2021 - Software and Data Integrity Failures"
            ],
            "references": [
              "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
            ],
            "confidence": "LOW",
            "impact": "LOW"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        }
      ],
      "lineRange": {
        "start": 7,
        "end": 8
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-examples-3d-city-explorer-html-322",
      "canonicalPath": "src/examples/3d-city-explorer.html",
      "issues": [
        {
          "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-192",
          "entity": {
            "canonicalPath": "src/examples/3d-city-explorer.html",
            "originalIdentifier": "src/examples/3d-city-explorer.html",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "ruleId": "html.security.audit.missing-integrity.missing-integrity",
          "line": 322,
          "column": 5,
          "endLine": 322,
          "endColumn": 94,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp": [
              "A08:2021 - Software and Data Integrity Failures"
            ],
            "references": [
              "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
            ],
            "confidence": "LOW",
            "impact": "LOW"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-193",
          "entity": {
            "canonicalPath": "src/examples/3d-city-explorer.html",
            "originalIdentifier": "src/examples/3d-city-explorer.html",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "ruleId": "html.security.audit.missing-integrity.missing-integrity",
          "line": 323,
          "column": 5,
          "endLine": 323,
          "endColumn": 109,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp": [
              "A08:2021 - Software and Data Integrity Failures"
            ],
            "references": [
              "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
            ],
            "confidence": "LOW",
            "impact": "LOW"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        }
      ],
      "lineRange": {
        "start": 322,
        "end": 323
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-examples-topolop-3d-explorer-real-data-html-371",
      "canonicalPath": "src/examples/topolop-3d-explorer-real-data.html",
      "issues": [
        {
          "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-195",
          "entity": {
            "canonicalPath": "src/examples/topolop-3d-explorer-real-data.html",
            "originalIdentifier": "src/examples/topolop-3d-explorer-real-data.html",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "ruleId": "html.security.audit.missing-integrity.missing-integrity",
          "line": 371,
          "column": 5,
          "endLine": 371,
          "endColumn": 94,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp": [
              "A08:2021 - Software and Data Integrity Failures"
            ],
            "references": [
              "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
            ],
            "confidence": "LOW",
            "impact": "LOW"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-196",
          "entity": {
            "canonicalPath": "src/examples/topolop-3d-explorer-real-data.html",
            "originalIdentifier": "src/examples/topolop-3d-explorer-real-data.html",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "ruleId": "html.security.audit.missing-integrity.missing-integrity",
          "line": 372,
          "column": 5,
          "endLine": 372,
          "endColumn": 109,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp": [
              "A08:2021 - Software and Data Integrity Failures"
            ],
            "references": [
              "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
            ],
            "confidence": "LOW",
            "impact": "LOW"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        }
      ],
      "lineRange": {
        "start": 371,
        "end": 372
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-examples-topolop-enhanced-aggregated-3d-html-306",
      "canonicalPath": "src/examples/topolop-enhanced-aggregated-3d.html",
      "issues": [
        {
          "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-197",
          "entity": {
            "canonicalPath": "src/examples/topolop-enhanced-aggregated-3d.html",
            "originalIdentifier": "src/examples/topolop-enhanced-aggregated-3d.html",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "ruleId": "html.security.audit.missing-integrity.missing-integrity",
          "line": 306,
          "column": 5,
          "endLine": 306,
          "endColumn": 94,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp": [
              "A08:2021 - Software and Data Integrity Failures"
            ],
            "references": [
              "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
            ],
            "confidence": "LOW",
            "impact": "LOW"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-198",
          "entity": {
            "canonicalPath": "src/examples/topolop-enhanced-aggregated-3d.html",
            "originalIdentifier": "src/examples/topolop-enhanced-aggregated-3d.html",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "ruleId": "html.security.audit.missing-integrity.missing-integrity",
          "line": 307,
          "column": 5,
          "endLine": 307,
          "endColumn": 109,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp": [
              "A08:2021 - Software and Data Integrity Failures"
            ],
            "references": [
              "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
            ],
            "confidence": "LOW",
            "impact": "LOW"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        }
      ],
      "lineRange": {
        "start": 306,
        "end": 307
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-examples-topolop-filtered-3d-explorer-html-367",
      "canonicalPath": "src/examples/topolop-filtered-3d-explorer.html",
      "issues": [
        {
          "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-199",
          "entity": {
            "canonicalPath": "src/examples/topolop-filtered-3d-explorer.html",
            "originalIdentifier": "src/examples/topolop-filtered-3d-explorer.html",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "ruleId": "html.security.audit.missing-integrity.missing-integrity",
          "line": 367,
          "column": 5,
          "endLine": 367,
          "endColumn": 94,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp": [
              "A08:2021 - Software and Data Integrity Failures"
            ],
            "references": [
              "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
            ],
            "confidence": "LOW",
            "impact": "LOW"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-200",
          "entity": {
            "canonicalPath": "src/examples/topolop-filtered-3d-explorer.html",
            "originalIdentifier": "src/examples/topolop-filtered-3d-explorer.html",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "ruleId": "html.security.audit.missing-integrity.missing-integrity",
          "line": 368,
          "column": 5,
          "endLine": 368,
          "endColumn": 109,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp": [
              "A08:2021 - Software and Data Integrity Failures"
            ],
            "references": [
              "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
            ],
            "confidence": "LOW",
            "impact": "LOW"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        }
      ],
      "lineRange": {
        "start": 367,
        "end": 368
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-examples-topolop-real-data-3d-html-306",
      "canonicalPath": "src/examples/topolop-real-data-3d.html",
      "issues": [
        {
          "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-201",
          "entity": {
            "canonicalPath": "src/examples/topolop-real-data-3d.html",
            "originalIdentifier": "src/examples/topolop-real-data-3d.html",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "ruleId": "html.security.audit.missing-integrity.missing-integrity",
          "line": 306,
          "column": 5,
          "endLine": 306,
          "endColumn": 94,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp": [
              "A08:2021 - Software and Data Integrity Failures"
            ],
            "references": [
              "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
            ],
            "confidence": "LOW",
            "impact": "LOW"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-html.security.audit.missing-integrity.missing-integrity-202",
          "entity": {
            "canonicalPath": "src/examples/topolop-real-data-3d.html",
            "originalIdentifier": "src/examples/topolop-real-data-3d.html",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.",
          "ruleId": "html.security.audit.missing-integrity.missing-integrity",
          "line": 307,
          "column": 5,
          "endLine": 307,
          "endColumn": 109,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-353: Missing Support for Integrity Check"
            ],
            "owasp": [
              "A08:2021 - Software and Data Integrity Failures"
            ],
            "references": [
              "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"
            ],
            "confidence": "LOW",
            "impact": "LOW"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        }
      ],
      "lineRange": {
        "start": 306,
        "end": 307
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-interfaces-cli-src-commands-init-js-17",
      "canonicalPath": "src/interfaces/cli/src/commands/init.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-204",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/commands/init.js",
            "originalIdentifier": "src/interfaces/cli/src/commands/init.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 17,
          "column": 39,
          "endLine": 17,
          "endColumn": 53,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-205",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/commands/init.js",
            "originalIdentifier": "src/interfaces/cli/src/commands/init.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 26,
          "column": 34,
          "endLine": 26,
          "endColumn": 46,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        }
      ],
      "lineRange": {
        "start": 17,
        "end": 26
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-interfaces-cli-src-commands-init-js-88",
      "canonicalPath": "src/interfaces/cli/src/commands/init.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-206",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/commands/init.js",
            "originalIdentifier": "src/interfaces/cli/src/commands/init.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 88,
          "column": 37,
          "endLine": 88,
          "endColumn": 51,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-207",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/commands/init.js",
            "originalIdentifier": "src/interfaces/cli/src/commands/init.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 89,
          "column": 38,
          "endLine": 89,
          "endColumn": 52,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-208",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/commands/init.js",
            "originalIdentifier": "src/interfaces/cli/src/commands/init.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 90,
          "column": 29,
          "endLine": 90,
          "endColumn": 43,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-209",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/commands/init.js",
            "originalIdentifier": "src/interfaces/cli/src/commands/init.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 96,
          "column": 50,
          "endLine": 96,
          "endColumn": 64,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-210",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/commands/init.js",
            "originalIdentifier": "src/interfaces/cli/src/commands/init.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 98,
          "column": 56,
          "endLine": 98,
          "endColumn": 70,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        }
      ],
      "lineRange": {
        "start": 88,
        "end": 98
      },
      "riskScore": 10,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-interfaces-cli-src-commands-init-js-161",
      "canonicalPath": "src/interfaces/cli/src/commands/init.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-211",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/commands/init.js",
            "originalIdentifier": "src/interfaces/cli/src/commands/init.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 161,
          "column": 59,
          "endLine": 161,
          "endColumn": 73,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-212",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/commands/init.js",
            "originalIdentifier": "src/interfaces/cli/src/commands/init.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 162,
          "column": 60,
          "endLine": 162,
          "endColumn": 74,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-213",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/commands/init.js",
            "originalIdentifier": "src/interfaces/cli/src/commands/init.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 163,
          "column": 58,
          "endLine": 163,
          "endColumn": 72,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        }
      ],
      "lineRange": {
        "start": 161,
        "end": 163
      },
      "riskScore": 6,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-interfaces-cli-src-core-dependency-analyzer-js-160",
      "canonicalPath": "src/interfaces/cli/src/core/dependency-analyzer.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-219",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/core/dependency-analyzer.js",
            "originalIdentifier": "src/interfaces/cli/src/core/dependency-analyzer.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 160,
          "column": 36,
          "endLine": 160,
          "endColumn": 50,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-220",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/core/dependency-analyzer.js",
            "originalIdentifier": "src/interfaces/cli/src/core/dependency-analyzer.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 160,
          "column": 52,
          "endLine": 160,
          "endColumn": 75,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        }
      ],
      "lineRange": {
        "start": 160,
        "end": 160
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-interfaces-cli-src-core-dependency-analyzer-js-320",
      "canonicalPath": "src/interfaces/cli/src/core/dependency-analyzer.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp-224",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/core/dependency-analyzer.js",
            "originalIdentifier": "src/interfaces/cli/src/core/dependency-analyzer.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "RegExp() called with a `tagName` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
          "description": "RegExp() called with a `tagName` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.",
          "ruleId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp",
          "line": 320,
          "column": 29,
          "endLine": 320,
          "endColumn": 75,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-1333: Inefficient Regular Expression Complexity"
            ],
            "owasp": [
              "A05:2021 - Security Misconfiguration",
              "A06:2017 - Security Misconfiguration"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-225",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/core/dependency-analyzer.js",
            "originalIdentifier": "src/interfaces/cli/src/core/dependency-analyzer.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 325,
          "column": 39,
          "endLine": 325,
          "endColumn": 53,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        }
      ],
      "lineRange": {
        "start": 320,
        "end": 325
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-interfaces-cli-src-core-repository-analyzer-legacy-js-341",
      "canonicalPath": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-232",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
            "originalIdentifier": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 341,
          "column": 45,
          "endLine": 341,
          "endColumn": 56,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-233",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
            "originalIdentifier": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 341,
          "column": 58,
          "endLine": 341,
          "endColumn": 62,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        }
      ],
      "lineRange": {
        "start": 341,
        "end": 341
      },
      "riskScore": 4,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-interfaces-cli-src-core-repository-analyzer-legacy-js-465",
      "canonicalPath": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
      "issues": [
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-234",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
            "originalIdentifier": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 465,
          "column": 37,
          "endLine": 465,
          "endColumn": 45,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-235",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
            "originalIdentifier": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 465,
          "column": 47,
          "endLine": 465,
          "endColumn": 64,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-236",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
            "originalIdentifier": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 472,
          "column": 36,
          "endLine": 472,
          "endColumn": 44,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal-237",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
            "originalIdentifier": "src/interfaces/cli/src/core/repository-analyzer-legacy.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "description": "Detected possible user input going into a `path.join` or `path.resolve` function. This could possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files stored in the file system. Instead, be sure to sanitize or validate user input first.",
          "ruleId": "javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal",
          "line": 472,
          "column": 46,
          "endLine": 472,
          "endColumn": 63,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
            ],
            "owasp": [
              "A05:2017 - Broken Access Control",
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://owasp.org/www-community/attacks/Path_Traversal"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        }
      ],
      "lineRange": {
        "start": 465,
        "end": 472
      },
      "riskScore": 8,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-src-interfaces-cli-src-live-server-js-26",
      "canonicalPath": "src/interfaces/cli/src/live-server.js",
      "issues": [
        {
          "id": "semgrep-javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage-238",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/live-server.js",
            "originalIdentifier": "src/interfaces/cli/src/live-server.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "info",
          "analysisType": "security",
          "title": "A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.",
          "description": "A CSRF middleware was not detected in your express application. Ensure you are either using one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF validation in your routes with a token or cookies.",
          "ruleId": "javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage",
          "line": 26,
          "column": 5,
          "endLine": 26,
          "endColumn": 25,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": [
              "CWE-352: Cross-Site Request Forgery (CSRF)"
            ],
            "owasp": [
              "A01:2021 - Broken Access Control"
            ],
            "references": [
              "https://www.npmjs.com/package/csurf",
              "https://www.npmjs.com/package/csrf",
              "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"
            ],
            "confidence": "LOW",
            "impact": "HIGH"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        },
        {
          "id": "semgrep-problem-based-packs.insecure-transport.js-node.using-http-server.using-http-server-239",
          "entity": {
            "canonicalPath": "src/interfaces/cli/src/live-server.js",
            "originalIdentifier": "src/interfaces/cli/src/live-server.js",
            "toolName": "Semgrep",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "security",
          "title": "Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.",
          "description": "Checks for any usage of http servers instead of https servers. Encourages the usage of https protocol instead of http, which does not have TLS and is therefore unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker is able to read sensitive information.",
          "ruleId": "problem-based-packs.insecure-transport.js-node.using-http-server.using-http-server",
          "line": 27,
          "column": 19,
          "endLine": 27,
          "endColumn": 23,
          "toolName": "Semgrep",
          "metadata": {
            "category": "security",
            "cwe": "CWE-319: Cleartext Transmission of Sensitive Information",
            "owasp": [
              "A02:2021 - Cryptographic Failures",
              "A03:2017 - Sensitive Data Exposure"
            ],
            "references": [
              "https://nodejs.org/api/http.html#http_class_http_agent",
              "https://groups.google.com/g/rubyonrails-security/c/NCCsca7TEtY"
            ],
            "confidence": "LOW",
            "impact": "MEDIUM"
          },
          "createdAt": "2025-09-07T01:38:04.355Z"
        }
      ],
      "lineRange": {
        "start": 26,
        "end": 27
      },
      "riskScore": 3,
      "analysisTypes": [
        "security"
      ],
      "toolCoverage": [
        "Semgrep"
      ]
    },
    {
      "id": "correlation-analyzers-formal-methods-adapters-typescript-tsc-adapter-js-15",
      "canonicalPath": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
      "issues": [
        {
          "id": "codeql-js/unused-local-variable-81",
          "entity": {
            "canonicalPath": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
            "originalIdentifier": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable fs.",
          "description": "Unused variable fs.",
          "ruleId": "js/unused-local-variable",
          "line": 15,
          "column": 7,
          "endLine": null,
          "endColumn": 9,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/unused-local-variable-82",
          "entity": {
            "canonicalPath": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
            "originalIdentifier": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable timed.",
          "description": "Unused variable timed.",
          "ruleId": "js/unused-local-variable",
          "line": 20,
          "column": 9,
          "endLine": null,
          "endColumn": 14,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/unused-local-variable-83",
          "entity": {
            "canonicalPath": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
            "originalIdentifier": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable withTimeout.",
          "description": "Unused variable withTimeout.",
          "ruleId": "js/unused-local-variable",
          "line": 20,
          "column": 16,
          "endLine": null,
          "endColumn": 27,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        }
      ],
      "lineRange": {
        "start": 15,
        "end": 20
      },
      "riskScore": 6,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    },
    {
      "id": "correlation-analyzers-formal-methods-adapters-typescript-tsc-adapter-js-206",
      "canonicalPath": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
      "issues": [
        {
          "id": "codeql-js/shell-command-injection-from-environment-15",
          "entity": {
            "canonicalPath": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
            "originalIdentifier": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "This shell command depends on an uncontrolled [absolute path](1).\nThis shell command depends on an uncontrolled [absolute path](2).\nThis shell command depends on an uncontrolled [absolute path](3).\nThis shell command depends on an uncontrolled [absolute path](4).",
          "description": "This shell command depends on an uncontrolled [absolute path](1).\nThis shell command depends on an uncontrolled [absolute path](2).\nThis shell command depends on an uncontrolled [absolute path](3).\nThis shell command depends on an uncontrolled [absolute path](4).",
          "ruleId": "js/shell-command-injection-from-environment",
          "line": 206,
          "column": 31,
          "endLine": null,
          "endColumn": 38,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 66,
            "uri": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js"
          },
          "createdAt": "2025-09-07T01:38:04.370Z"
        },
        {
          "id": "codeql-js/indirect-command-line-injection-40",
          "entity": {
            "canonicalPath": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
            "originalIdentifier": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "This command depends on an unsanitized [command-line argument](1).",
          "description": "This command depends on an unsanitized [command-line argument](1).",
          "ruleId": "js/indirect-command-line-injection",
          "line": 206,
          "column": 31,
          "endLine": null,
          "endColumn": 38,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 98,
            "uri": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js"
          },
          "createdAt": "2025-09-07T01:38:04.370Z"
        },
        {
          "id": "codeql-js/unused-local-variable-84",
          "entity": {
            "canonicalPath": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
            "originalIdentifier": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable output.",
          "description": "Unused variable output.",
          "ruleId": "js/unused-local-variable",
          "line": 206,
          "column": 13,
          "endLine": null,
          "endColumn": 19,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "analyzers/formal-methods-adapters/typescript/tsc-adapter.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        }
      ],
      "lineRange": {
        "start": 206,
        "end": 206
      },
      "riskScore": 6,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    },
    {
      "id": "correlation-analyzers-formal-methods-adapters-universal-tlaplus-adapter-js-484",
      "canonicalPath": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
      "issues": [
        {
          "id": "codeql-js/shell-command-injection-from-environment-21",
          "entity": {
            "canonicalPath": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
            "originalIdentifier": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "This shell command depends on an uncontrolled [file name](1).",
          "description": "This shell command depends on an uncontrolled [file name](1).",
          "ruleId": "js/shell-command-injection-from-environment",
          "line": 484,
          "column": 31,
          "endLine": null,
          "endColumn": 43,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 66,
            "uri": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js"
          },
          "createdAt": "2025-09-07T01:38:04.370Z"
        },
        {
          "id": "codeql-js/unused-local-variable-87",
          "entity": {
            "canonicalPath": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
            "originalIdentifier": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable output.",
          "description": "Unused variable output.",
          "ruleId": "js/unused-local-variable",
          "line": 484,
          "column": 13,
          "endLine": null,
          "endColumn": 19,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "analyzers/formal-methods-adapters/universal/tlaplus-adapter.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        }
      ],
      "lineRange": {
        "start": 484,
        "end": 484
      },
      "riskScore": 4,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    },
    {
      "id": "correlation-analyzers-github-codeql-analyzer-src-codeql-client-js-83",
      "canonicalPath": "analyzers/github-codeql-analyzer/src/codeql-client.js",
      "issues": [
        {
          "id": "codeql-js/shell-command-injection-from-environment-22",
          "entity": {
            "canonicalPath": "analyzers/github-codeql-analyzer/src/codeql-client.js",
            "originalIdentifier": "analyzers/github-codeql-analyzer/src/codeql-client.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "This shell command depends on an uncontrolled [absolute path](1).\nThis shell command depends on an uncontrolled [absolute path](2).\nThis shell command depends on an uncontrolled [absolute path](3).\nThis shell command depends on an uncontrolled [absolute path](4).\nThis shell command depends on an uncontrolled [absolute path](5).",
          "description": "This shell command depends on an uncontrolled [absolute path](1).\nThis shell command depends on an uncontrolled [absolute path](2).\nThis shell command depends on an uncontrolled [absolute path](3).\nThis shell command depends on an uncontrolled [absolute path](4).\nThis shell command depends on an uncontrolled [absolute path](5).",
          "ruleId": "js/shell-command-injection-from-environment",
          "line": 83,
          "column": 50,
          "endLine": null,
          "endColumn": 88,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 66,
            "uri": "analyzers/github-codeql-analyzer/src/codeql-client.js"
          },
          "createdAt": "2025-09-07T01:38:04.370Z"
        },
        {
          "id": "codeql-js/shell-command-constructed-from-input-25",
          "entity": {
            "canonicalPath": "analyzers/github-codeql-analyzer/src/codeql-client.js",
            "originalIdentifier": "analyzers/github-codeql-analyzer/src/codeql-client.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "This string concatenation which depends on [library input](1) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](3) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](4) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](5) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](6) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](7) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](8) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](9) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](10) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](11) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](12) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](13) is later used in a [shell command](2).",
          "description": "This string concatenation which depends on [library input](1) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](3) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](4) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](5) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](6) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](7) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](8) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](9) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](10) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](11) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](12) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](13) is later used in a [shell command](2).",
          "ruleId": "js/shell-command-constructed-from-input",
          "line": 83,
          "column": 50,
          "endLine": null,
          "endColumn": 88,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 70,
            "uri": "analyzers/github-codeql-analyzer/src/codeql-client.js"
          },
          "createdAt": "2025-09-07T01:38:04.370Z"
        },
        {
          "id": "codeql-js/indirect-command-line-injection-41",
          "entity": {
            "canonicalPath": "analyzers/github-codeql-analyzer/src/codeql-client.js",
            "originalIdentifier": "analyzers/github-codeql-analyzer/src/codeql-client.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "This command depends on an unsanitized [command-line argument](1).",
          "description": "This command depends on an unsanitized [command-line argument](1).",
          "ruleId": "js/indirect-command-line-injection",
          "line": 83,
          "column": 50,
          "endLine": null,
          "endColumn": 88,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 98,
            "uri": "analyzers/github-codeql-analyzer/src/codeql-client.js"
          },
          "createdAt": "2025-09-07T01:38:04.370Z"
        }
      ],
      "lineRange": {
        "start": 83,
        "end": 83
      },
      "riskScore": 6,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    },
    {
      "id": "correlation-analyzers-github-codeql-analyzer-src-codeql-client-js-122",
      "canonicalPath": "analyzers/github-codeql-analyzer/src/codeql-client.js",
      "issues": [
        {
          "id": "codeql-js/shell-command-injection-from-environment-23",
          "entity": {
            "canonicalPath": "analyzers/github-codeql-analyzer/src/codeql-client.js",
            "originalIdentifier": "analyzers/github-codeql-analyzer/src/codeql-client.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "This shell command depends on an uncontrolled [absolute path](1).\nThis shell command depends on an uncontrolled [absolute path](2).\nThis shell command depends on an uncontrolled [absolute path](3).\nThis shell command depends on an uncontrolled [absolute path](4).\nThis shell command depends on an uncontrolled [absolute path](5).",
          "description": "This shell command depends on an uncontrolled [absolute path](1).\nThis shell command depends on an uncontrolled [absolute path](2).\nThis shell command depends on an uncontrolled [absolute path](3).\nThis shell command depends on an uncontrolled [absolute path](4).\nThis shell command depends on an uncontrolled [absolute path](5).",
          "ruleId": "js/shell-command-injection-from-environment",
          "line": 122,
          "column": 50,
          "endLine": null,
          "endColumn": 88,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 66,
            "uri": "analyzers/github-codeql-analyzer/src/codeql-client.js"
          },
          "createdAt": "2025-09-07T01:38:04.370Z"
        },
        {
          "id": "codeql-js/shell-command-constructed-from-input-26",
          "entity": {
            "canonicalPath": "analyzers/github-codeql-analyzer/src/codeql-client.js",
            "originalIdentifier": "analyzers/github-codeql-analyzer/src/codeql-client.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "This string concatenation which depends on [library input](1) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](3) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](4) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](5) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](6) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](7) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](8) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](9) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](10) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](11) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](12) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](13) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](14) is later used in a [shell command](2).",
          "description": "This string concatenation which depends on [library input](1) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](3) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](4) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](5) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](6) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](7) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](8) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](9) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](10) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](11) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](12) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](13) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](14) is later used in a [shell command](2).",
          "ruleId": "js/shell-command-constructed-from-input",
          "line": 122,
          "column": 50,
          "endLine": null,
          "endColumn": 88,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 70,
            "uri": "analyzers/github-codeql-analyzer/src/codeql-client.js"
          },
          "createdAt": "2025-09-07T01:38:04.370Z"
        },
        {
          "id": "codeql-js/indirect-command-line-injection-42",
          "entity": {
            "canonicalPath": "analyzers/github-codeql-analyzer/src/codeql-client.js",
            "originalIdentifier": "analyzers/github-codeql-analyzer/src/codeql-client.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "This command depends on an unsanitized [command-line argument](1).",
          "description": "This command depends on an unsanitized [command-line argument](1).",
          "ruleId": "js/indirect-command-line-injection",
          "line": 122,
          "column": 50,
          "endLine": null,
          "endColumn": 88,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 98,
            "uri": "analyzers/github-codeql-analyzer/src/codeql-client.js"
          },
          "createdAt": "2025-09-07T01:38:04.370Z"
        }
      ],
      "lineRange": {
        "start": 122,
        "end": 122
      },
      "riskScore": 6,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    },
    {
      "id": "correlation-analyzers-github-codeql-analyzer-src-codeql-client-js-221",
      "canonicalPath": "analyzers/github-codeql-analyzer/src/codeql-client.js",
      "issues": [
        {
          "id": "codeql-js/shell-command-constructed-from-input-27",
          "entity": {
            "canonicalPath": "analyzers/github-codeql-analyzer/src/codeql-client.js",
            "originalIdentifier": "analyzers/github-codeql-analyzer/src/codeql-client.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "This string concatenation which depends on [library input](1) is later used in a [shell command](2).",
          "description": "This string concatenation which depends on [library input](1) is later used in a [shell command](2).",
          "ruleId": "js/shell-command-constructed-from-input",
          "line": 221,
          "column": 42,
          "endLine": null,
          "endColumn": 98,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 70,
            "uri": "analyzers/github-codeql-analyzer/src/codeql-client.js"
          },
          "createdAt": "2025-09-07T01:38:04.370Z"
        },
        {
          "id": "codeql-js/indirect-command-line-injection-43",
          "entity": {
            "canonicalPath": "analyzers/github-codeql-analyzer/src/codeql-client.js",
            "originalIdentifier": "analyzers/github-codeql-analyzer/src/codeql-client.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "This command depends on an unsanitized [command-line argument](1).",
          "description": "This command depends on an unsanitized [command-line argument](1).",
          "ruleId": "js/indirect-command-line-injection",
          "line": 221,
          "column": 42,
          "endLine": null,
          "endColumn": 98,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 98,
            "uri": "analyzers/github-codeql-analyzer/src/codeql-client.js"
          },
          "createdAt": "2025-09-07T01:38:04.370Z"
        }
      ],
      "lineRange": {
        "start": 221,
        "end": 221
      },
      "riskScore": 4,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    },
    {
      "id": "correlation-analyzers-semgrep-analyzer-src-semgrep-client-js-60",
      "canonicalPath": "analyzers/semgrep-analyzer/src/semgrep-client.js",
      "issues": [
        {
          "id": "codeql-js/shell-command-injection-from-environment-24",
          "entity": {
            "canonicalPath": "analyzers/semgrep-analyzer/src/semgrep-client.js",
            "originalIdentifier": "analyzers/semgrep-analyzer/src/semgrep-client.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "This shell command depends on an uncontrolled [absolute path](1).\nThis shell command depends on an uncontrolled [absolute path](2).\nThis shell command depends on an uncontrolled [absolute path](3).\nThis shell command depends on an uncontrolled [absolute path](4).",
          "description": "This shell command depends on an uncontrolled [absolute path](1).\nThis shell command depends on an uncontrolled [absolute path](2).\nThis shell command depends on an uncontrolled [absolute path](3).\nThis shell command depends on an uncontrolled [absolute path](4).",
          "ruleId": "js/shell-command-injection-from-environment",
          "line": 60,
          "column": 50,
          "endLine": null,
          "endColumn": 89,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 66,
            "uri": "analyzers/semgrep-analyzer/src/semgrep-client.js"
          },
          "createdAt": "2025-09-07T01:38:04.370Z"
        },
        {
          "id": "codeql-js/shell-command-constructed-from-input-28",
          "entity": {
            "canonicalPath": "analyzers/semgrep-analyzer/src/semgrep-client.js",
            "originalIdentifier": "analyzers/semgrep-analyzer/src/semgrep-client.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "This string concatenation which depends on [library input](1) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](3) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](4) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](5) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](6) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](7) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](8) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](9) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](10) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](11) is later used in a [shell command](2).",
          "description": "This string concatenation which depends on [library input](1) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](3) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](4) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](5) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](6) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](7) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](8) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](9) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](10) is later used in a [shell command](2).\nThis string concatenation which depends on [library input](11) is later used in a [shell command](2).",
          "ruleId": "js/shell-command-constructed-from-input",
          "line": 60,
          "column": 50,
          "endLine": null,
          "endColumn": 89,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 70,
            "uri": "analyzers/semgrep-analyzer/src/semgrep-client.js"
          },
          "createdAt": "2025-09-07T01:38:04.370Z"
        },
        {
          "id": "codeql-js/indirect-command-line-injection-44",
          "entity": {
            "canonicalPath": "analyzers/semgrep-analyzer/src/semgrep-client.js",
            "originalIdentifier": "analyzers/semgrep-analyzer/src/semgrep-client.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "This command depends on an unsanitized [command-line argument](1).",
          "description": "This command depends on an unsanitized [command-line argument](1).",
          "ruleId": "js/indirect-command-line-injection",
          "line": 60,
          "column": 50,
          "endLine": null,
          "endColumn": 89,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 98,
            "uri": "analyzers/semgrep-analyzer/src/semgrep-client.js"
          },
          "createdAt": "2025-09-07T01:38:04.370Z"
        },
        {
          "id": "codeql-js/unused-local-variable-94",
          "entity": {
            "canonicalPath": "analyzers/semgrep-analyzer/src/semgrep-client.js",
            "originalIdentifier": "analyzers/semgrep-analyzer/src/semgrep-client.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable stderr.",
          "description": "Unused variable stderr.",
          "ruleId": "js/unused-local-variable",
          "line": 60,
          "column": 23,
          "endLine": null,
          "endColumn": 29,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "analyzers/semgrep-analyzer/src/semgrep-client.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        }
      ],
      "lineRange": {
        "start": 60,
        "end": 60
      },
      "riskScore": 8,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    },
    {
      "id": "correlation-analyzers-utils-fs-utils-js-55",
      "canonicalPath": "analyzers/utils/fs-utils.js",
      "issues": [
        {
          "id": "codeql-js/file-system-race-31",
          "entity": {
            "canonicalPath": "analyzers/utils/fs-utils.js",
            "originalIdentifier": "analyzers/utils/fs-utils.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "The file may have changed since it [was checked](1).\nThe file may have changed since it [was checked](2).",
          "description": "The file may have changed since it [was checked](1).\nThe file may have changed since it [was checked](2).",
          "ruleId": "js/file-system-race",
          "line": 55,
          "column": 20,
          "endLine": null,
          "endColumn": 51,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 88,
            "uri": "analyzers/utils/fs-utils.js"
          },
          "createdAt": "2025-09-07T01:38:04.370Z"
        },
        {
          "id": "codeql-js/file-system-race-32",
          "entity": {
            "canonicalPath": "analyzers/utils/fs-utils.js",
            "originalIdentifier": "analyzers/utils/fs-utils.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "The file may have changed since it [was checked](1).\nThe file may have changed since it [was checked](2).",
          "description": "The file may have changed since it [was checked](1).\nThe file may have changed since it [was checked](2).",
          "ruleId": "js/file-system-race",
          "line": 59,
          "column": 31,
          "endLine": null,
          "endColumn": 70,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 88,
            "uri": "analyzers/utils/fs-utils.js"
          },
          "createdAt": "2025-09-07T01:38:04.370Z"
        }
      ],
      "lineRange": {
        "start": 55,
        "end": 59
      },
      "riskScore": 4,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    },
    {
      "id": "correlation-analyzers-utils-performance-utils-js-8",
      "canonicalPath": "analyzers/utils/performance-utils.js",
      "issues": [
        {
          "id": "codeql-js/unused-local-variable-98",
          "entity": {
            "canonicalPath": "analyzers/utils/performance-utils.js",
            "originalIdentifier": "analyzers/utils/performance-utils.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable Worker.",
          "description": "Unused variable Worker.",
          "ruleId": "js/unused-local-variable",
          "line": 8,
          "column": 9,
          "endLine": null,
          "endColumn": 15,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "analyzers/utils/performance-utils.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/unused-local-variable-99",
          "entity": {
            "canonicalPath": "analyzers/utils/performance-utils.js",
            "originalIdentifier": "analyzers/utils/performance-utils.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable path.",
          "description": "Unused variable path.",
          "ruleId": "js/unused-local-variable",
          "line": 9,
          "column": 7,
          "endLine": null,
          "endColumn": 11,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "analyzers/utils/performance-utils.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        }
      ],
      "lineRange": {
        "start": 8,
        "end": 9
      },
      "riskScore": 4,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    },
    {
      "id": "correlation-core-canvas-renderer-src-engines-archived-node-canvas-engine-js-189",
      "canonicalPath": "core/canvas-renderer/src/engines/archived/node-canvas-engine.js",
      "issues": [
        {
          "id": "codeql-js/unused-local-variable-104",
          "entity": {
            "canonicalPath": "core/canvas-renderer/src/engines/archived/node-canvas-engine.js",
            "originalIdentifier": "core/canvas-renderer/src/engines/archived/node-canvas-engine.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable fillColor.",
          "description": "Unused variable fillColor.",
          "ruleId": "js/unused-local-variable",
          "line": 189,
          "column": 19,
          "endLine": null,
          "endColumn": 28,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "core/canvas-renderer/src/engines/archived/node-canvas-engine.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/unused-local-variable-105",
          "entity": {
            "canonicalPath": "core/canvas-renderer/src/engines/archived/node-canvas-engine.js",
            "originalIdentifier": "core/canvas-renderer/src/engines/archived/node-canvas-engine.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable strokeColor.",
          "description": "Unused variable strokeColor.",
          "ruleId": "js/unused-local-variable",
          "line": 189,
          "column": 30,
          "endLine": null,
          "endColumn": 41,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "core/canvas-renderer/src/engines/archived/node-canvas-engine.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/unused-local-variable-106",
          "entity": {
            "canonicalPath": "core/canvas-renderer/src/engines/archived/node-canvas-engine.js",
            "originalIdentifier": "core/canvas-renderer/src/engines/archived/node-canvas-engine.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable strokeWidth.",
          "description": "Unused variable strokeWidth.",
          "ruleId": "js/unused-local-variable",
          "line": 189,
          "column": 43,
          "endLine": null,
          "endColumn": 54,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "core/canvas-renderer/src/engines/archived/node-canvas-engine.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        }
      ],
      "lineRange": {
        "start": 189,
        "end": 189
      },
      "riskScore": 6,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    },
    {
      "id": "correlation-core-canvas-renderer-templates-3d-visualization-template-js-92",
      "canonicalPath": "core/canvas-renderer/templates/3d-visualization-template.js",
      "issues": [
        {
          "id": "codeql-js/unused-local-variable-115",
          "entity": {
            "canonicalPath": "core/canvas-renderer/templates/3d-visualization-template.js",
            "originalIdentifier": "core/canvas-renderer/templates/3d-visualization-template.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable buildings.",
          "description": "Unused variable buildings.",
          "ruleId": "js/unused-local-variable",
          "line": 92,
          "column": 13,
          "endLine": null,
          "endColumn": 22,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "core/canvas-renderer/templates/3d-visualization-template.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/unused-local-variable-116",
          "entity": {
            "canonicalPath": "core/canvas-renderer/templates/3d-visualization-template.js",
            "originalIdentifier": "core/canvas-renderer/templates/3d-visualization-template.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable roads.",
          "description": "Unused variable roads.",
          "ruleId": "js/unused-local-variable",
          "line": 92,
          "column": 24,
          "endLine": null,
          "endColumn": 29,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "core/canvas-renderer/templates/3d-visualization-template.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/unused-local-variable-117",
          "entity": {
            "canonicalPath": "core/canvas-renderer/templates/3d-visualization-template.js",
            "originalIdentifier": "core/canvas-renderer/templates/3d-visualization-template.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable districts.",
          "description": "Unused variable districts.",
          "ruleId": "js/unused-local-variable",
          "line": 92,
          "column": 31,
          "endLine": null,
          "endColumn": 40,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "core/canvas-renderer/templates/3d-visualization-template.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        }
      ],
      "lineRange": {
        "start": 92,
        "end": 92
      },
      "riskScore": 6,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    },
    {
      "id": "correlation-core-canvas-renderer-templates-unified-data-adapter-ts-345",
      "canonicalPath": "core/canvas-renderer/templates/unified-data-adapter.ts",
      "issues": [
        {
          "id": "codeql-js/unused-local-variable-118",
          "entity": {
            "canonicalPath": "core/canvas-renderer/templates/unified-data-adapter.ts",
            "originalIdentifier": "core/canvas-renderer/templates/unified-data-adapter.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable files.",
          "description": "Unused variable files.",
          "ruleId": "js/unused-local-variable",
          "line": 345,
          "column": 11,
          "endLine": null,
          "endColumn": 16,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "core/canvas-renderer/templates/unified-data-adapter.ts"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/unused-local-variable-119",
          "entity": {
            "canonicalPath": "core/canvas-renderer/templates/unified-data-adapter.ts",
            "originalIdentifier": "core/canvas-renderer/templates/unified-data-adapter.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable directory.",
          "description": "Unused variable directory.",
          "ruleId": "js/unused-local-variable",
          "line": 352,
          "column": 17,
          "endLine": null,
          "endColumn": 26,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "core/canvas-renderer/templates/unified-data-adapter.ts"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        }
      ],
      "lineRange": {
        "start": 345,
        "end": 352
      },
      "riskScore": 4,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    },
    {
      "id": "correlation-core-unified-model-skeptical-verification-clean-ts-69",
      "canonicalPath": "core/unified-model/skeptical-verification-clean.ts",
      "issues": [
        {
          "id": "codeql-js/unused-local-variable-127",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification-clean.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification-clean.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable capabilities.",
          "description": "Unused variable capabilities.",
          "ruleId": "js/unused-local-variable",
          "line": 69,
          "column": 13,
          "endLine": null,
          "endColumn": 25,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "core/unified-model/skeptical-verification-clean.ts"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/unused-local-variable-128",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification-clean.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification-clean.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable configured.",
          "description": "Unused variable configured.",
          "ruleId": "js/unused-local-variable",
          "line": 70,
          "column": 13,
          "endLine": null,
          "endColumn": 23,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "core/unified-model/skeptical-verification-clean.ts"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        }
      ],
      "lineRange": {
        "start": 69,
        "end": 70
      },
      "riskScore": 4,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    },
    {
      "id": "correlation-core-unified-model-test-4-tool-correlation-js-63",
      "canonicalPath": "core/unified-model/test-4-tool-correlation.js",
      "issues": [
        {
          "id": "codeql-js/unused-local-variable-129",
          "entity": {
            "canonicalPath": "core/unified-model/test-4-tool-correlation.js",
            "originalIdentifier": "core/unified-model/test-4-tool-correlation.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable metrics.",
          "description": "Unused variable metrics.",
          "ruleId": "js/unused-local-variable",
          "line": 63,
          "column": 25,
          "endLine": null,
          "endColumn": 32,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "core/unified-model/test-4-tool-correlation.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/unused-loop-variable-168",
          "entity": {
            "canonicalPath": "core/unified-model/test-4-tool-correlation.js",
            "originalIdentifier": "core/unified-model/test-4-tool-correlation.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "For loop variable metrics is not used in the loop body.",
          "description": "For loop variable metrics is not used in the loop body.",
          "ruleId": "js/unused-loop-variable",
          "line": 63,
          "column": 12,
          "endLine": null,
          "endColumn": 33,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 149,
            "uri": "core/unified-model/test-4-tool-correlation.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        }
      ],
      "lineRange": {
        "start": 63,
        "end": 63
      },
      "riskScore": 4,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    },
    {
      "id": "correlation-examples-demo-performance-integration-js-9",
      "canonicalPath": "examples/demo-performance-integration.js",
      "issues": [
        {
          "id": "codeql-js/unused-local-variable-140",
          "entity": {
            "canonicalPath": "examples/demo-performance-integration.js",
            "originalIdentifier": "examples/demo-performance-integration.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable path.",
          "description": "Unused variable path.",
          "ruleId": "js/unused-local-variable",
          "line": 9,
          "column": 7,
          "endLine": null,
          "endColumn": 11,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "examples/demo-performance-integration.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/unused-local-variable-141",
          "entity": {
            "canonicalPath": "examples/demo-performance-integration.js",
            "originalIdentifier": "examples/demo-performance-integration.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable PerformanceMetrics.",
          "description": "Unused variable PerformanceMetrics.",
          "ruleId": "js/unused-local-variable",
          "line": 13,
          "column": 9,
          "endLine": null,
          "endColumn": 27,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "examples/demo-performance-integration.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/unused-local-variable-142",
          "entity": {
            "canonicalPath": "examples/demo-performance-integration.js",
            "originalIdentifier": "examples/demo-performance-integration.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable ProfilerCollector.",
          "description": "Unused variable ProfilerCollector.",
          "ruleId": "js/unused-local-variable",
          "line": 13,
          "column": 29,
          "endLine": null,
          "endColumn": 46,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "examples/demo-performance-integration.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        }
      ],
      "lineRange": {
        "start": 9,
        "end": 13
      },
      "riskScore": 6,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    },
    {
      "id": "correlation-examples-demo-performance-visualization-js-11",
      "canonicalPath": "examples/demo-performance-visualization.js",
      "issues": [
        {
          "id": "codeql-js/unused-local-variable-143",
          "entity": {
            "canonicalPath": "examples/demo-performance-visualization.js",
            "originalIdentifier": "examples/demo-performance-visualization.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable path.",
          "description": "Unused variable path.",
          "ruleId": "js/unused-local-variable",
          "line": 11,
          "column": 7,
          "endLine": null,
          "endColumn": 11,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "examples/demo-performance-visualization.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/unused-local-variable-144",
          "entity": {
            "canonicalPath": "examples/demo-performance-visualization.js",
            "originalIdentifier": "examples/demo-performance-visualization.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable ProfilerCollector.",
          "description": "Unused variable ProfilerCollector.",
          "ruleId": "js/unused-local-variable",
          "line": 14,
          "column": 29,
          "endLine": null,
          "endColumn": 46,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "examples/demo-performance-visualization.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        }
      ],
      "lineRange": {
        "start": 11,
        "end": 14
      },
      "riskScore": 4,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    },
    {
      "id": "correlation-examples-demo-topolop-complete-js-27",
      "canonicalPath": "examples/demo-topolop-complete.js",
      "issues": [
        {
          "id": "codeql-js/unused-local-variable-147",
          "entity": {
            "canonicalPath": "examples/demo-topolop-complete.js",
            "originalIdentifier": "examples/demo-topolop-complete.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable PythonParser.",
          "description": "Unused variable PythonParser.",
          "ruleId": "js/unused-local-variable",
          "line": 27,
          "column": 7,
          "endLine": null,
          "endColumn": 19,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "examples/demo-topolop-complete.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/unused-local-variable-148",
          "entity": {
            "canonicalPath": "examples/demo-topolop-complete.js",
            "originalIdentifier": "examples/demo-topolop-complete.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable JavaScriptParser.",
          "description": "Unused variable JavaScriptParser.",
          "ruleId": "js/unused-local-variable",
          "line": 28,
          "column": 7,
          "endLine": null,
          "endColumn": 23,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "examples/demo-topolop-complete.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/unused-local-variable-149",
          "entity": {
            "canonicalPath": "examples/demo-topolop-complete.js",
            "originalIdentifier": "examples/demo-topolop-complete.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable TypeScriptParser.",
          "description": "Unused variable TypeScriptParser.",
          "ruleId": "js/unused-local-variable",
          "line": 29,
          "column": 7,
          "endLine": null,
          "endColumn": 23,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "examples/demo-topolop-complete.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/unused-local-variable-150",
          "entity": {
            "canonicalPath": "examples/demo-topolop-complete.js",
            "originalIdentifier": "examples/demo-topolop-complete.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable testResult.",
          "description": "Unused variable testResult.",
          "ruleId": "js/unused-local-variable",
          "line": 39,
          "column": 11,
          "endLine": null,
          "endColumn": 21,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "examples/demo-topolop-complete.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        }
      ],
      "lineRange": {
        "start": 27,
        "end": 39
      },
      "riskScore": 8,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    },
    {
      "id": "correlation-examples-demo-visual-city-renderer-js-1",
      "canonicalPath": "examples/demo-visual-city-renderer.js",
      "issues": [
        {
          "id": "codeql-js/unused-local-variable-151",
          "entity": {
            "canonicalPath": "examples/demo-visual-city-renderer.js",
            "originalIdentifier": "examples/demo-visual-city-renderer.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable path.",
          "description": "Unused variable path.",
          "ruleId": "js/unused-local-variable",
          "line": 1,
          "column": 7,
          "endLine": null,
          "endColumn": 11,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "examples/demo-visual-city-renderer.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/unused-local-variable-152",
          "entity": {
            "canonicalPath": "examples/demo-visual-city-renderer.js",
            "originalIdentifier": "examples/demo-visual-city-renderer.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable ASTAnalyzer.",
          "description": "Unused variable ASTAnalyzer.",
          "ruleId": "js/unused-local-variable",
          "line": 3,
          "column": 9,
          "endLine": null,
          "endColumn": 20,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "examples/demo-visual-city-renderer.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        }
      ],
      "lineRange": {
        "start": 1,
        "end": 3
      },
      "riskScore": 4,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    },
    {
      "id": "correlation-interfaces-cli-bin-topolop-js-14",
      "canonicalPath": "interfaces/cli/bin/topolop.js",
      "issues": [
        {
          "id": "codeql-js/unused-local-variable-156",
          "entity": {
            "canonicalPath": "interfaces/cli/bin/topolop.js",
            "originalIdentifier": "interfaces/cli/bin/topolop.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable path.",
          "description": "Unused variable path.",
          "ruleId": "js/unused-local-variable",
          "line": 14,
          "column": 7,
          "endLine": null,
          "endColumn": 11,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "interfaces/cli/bin/topolop.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/unused-local-variable-157",
          "entity": {
            "canonicalPath": "interfaces/cli/bin/topolop.js",
            "originalIdentifier": "interfaces/cli/bin/topolop.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable fs.",
          "description": "Unused variable fs.",
          "ruleId": "js/unused-local-variable",
          "line": 15,
          "column": 7,
          "endLine": null,
          "endColumn": 9,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "interfaces/cli/bin/topolop.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        }
      ],
      "lineRange": {
        "start": 14,
        "end": 15
      },
      "riskScore": 4,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    },
    {
      "id": "correlation-interfaces-cli-src-commands-init-js-89",
      "canonicalPath": "interfaces/cli/src/commands/init.js",
      "issues": [
        {
          "id": "codeql-js/unused-local-variable-159",
          "entity": {
            "canonicalPath": "interfaces/cli/src/commands/init.js",
            "originalIdentifier": "interfaces/cli/src/commands/init.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable requirementsPath.",
          "description": "Unused variable requirementsPath.",
          "ruleId": "js/unused-local-variable",
          "line": 89,
          "column": 9,
          "endLine": null,
          "endColumn": 25,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "interfaces/cli/src/commands/init.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/unused-local-variable-160",
          "entity": {
            "canonicalPath": "interfaces/cli/src/commands/init.js",
            "originalIdentifier": "interfaces/cli/src/commands/init.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable pomPath.",
          "description": "Unused variable pomPath.",
          "ruleId": "js/unused-local-variable",
          "line": 90,
          "column": 9,
          "endLine": null,
          "endColumn": 16,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "interfaces/cli/src/commands/init.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        }
      ],
      "lineRange": {
        "start": 89,
        "end": 90
      },
      "riskScore": 4,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    },
    {
      "id": "correlation-interfaces-cli-src-core-output-generator-js-346",
      "canonicalPath": "interfaces/cli/src/core/output-generator.js",
      "issues": [
        {
          "id": "codeql-js/unused-local-variable-165",
          "entity": {
            "canonicalPath": "interfaces/cli/src/core/output-generator.js",
            "originalIdentifier": "interfaces/cli/src/core/output-generator.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable insights.",
          "description": "Unused variable insights.",
          "ruleId": "js/unused-local-variable",
          "line": 346,
          "column": 30,
          "endLine": null,
          "endColumn": 38,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "interfaces/cli/src/core/output-generator.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/unused-local-variable-166",
          "entity": {
            "canonicalPath": "interfaces/cli/src/core/output-generator.js",
            "originalIdentifier": "interfaces/cli/src/core/output-generator.js",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Unused variable hotspots.",
          "description": "Unused variable hotspots.",
          "ruleId": "js/unused-local-variable",
          "line": 346,
          "column": 40,
          "endLine": null,
          "endColumn": 48,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 134,
            "uri": "interfaces/cli/src/core/output-generator.js"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        }
      ],
      "lineRange": {
        "start": 346,
        "end": 346
      },
      "riskScore": 4,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    },
    {
      "id": "correlation-core-unified-model-skeptical-verification-ts-307",
      "canonicalPath": "core/unified-model/skeptical-verification.ts",
      "issues": [
        {
          "id": "codeql-js/syntax-error-169",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: Invalid character.",
          "description": "Error: Invalid character.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 19,
          "endLine": null,
          "endColumn": 20,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/syntax-error-170",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: Invalid character.",
          "description": "Error: Invalid character.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 24,
          "endLine": null,
          "endColumn": 25,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/syntax-error-171",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: Invalid character.",
          "description": "Error: Invalid character.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 28,
          "endLine": null,
          "endColumn": 29,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/syntax-error-172",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: Invalid character.",
          "description": "Error: Invalid character.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 83,
          "endLine": null,
          "endColumn": 84,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/syntax-error-173",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: Unexpected keyword or identifier.",
          "description": "Error: Unexpected keyword or identifier.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 84,
          "endLine": null,
          "endColumn": 85,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/syntax-error-174",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: Invalid character.",
          "description": "Error: Invalid character.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 136,
          "endLine": null,
          "endColumn": 137,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/syntax-error-175",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: Unexpected keyword or identifier.",
          "description": "Error: Unexpected keyword or identifier.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 137,
          "endLine": null,
          "endColumn": 138,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/syntax-error-176",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: Invalid character.",
          "description": "Error: Invalid character.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 163,
          "endLine": null,
          "endColumn": 164,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/syntax-error-177",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: Unexpected keyword or identifier.",
          "description": "Error: Unexpected keyword or identifier.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 164,
          "endLine": null,
          "endColumn": 165,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/syntax-error-178",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: Invalid character.",
          "description": "Error: Invalid character.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 185,
          "endLine": null,
          "endColumn": 186,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/syntax-error-179",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: Unexpected keyword or identifier.",
          "description": "Error: Unexpected keyword or identifier.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 186,
          "endLine": null,
          "endColumn": 187,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/syntax-error-180",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: Invalid character.",
          "description": "Error: Invalid character.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 225,
          "endLine": null,
          "endColumn": 226,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.371Z"
        },
        {
          "id": "codeql-js/syntax-error-181",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: Expression expected.",
          "description": "Error: Expression expected.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 230,
          "endLine": null,
          "endColumn": 231,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.372Z"
        },
        {
          "id": "codeql-js/syntax-error-182",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: Invalid character.",
          "description": "Error: Invalid character.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 233,
          "endLine": null,
          "endColumn": 234,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.372Z"
        },
        {
          "id": "codeql-js/syntax-error-183",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: ',' expected.",
          "description": "Error: ',' expected.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 239,
          "endLine": null,
          "endColumn": 240,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.372Z"
        },
        {
          "id": "codeql-js/syntax-error-184",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: ',' expected.",
          "description": "Error: ',' expected.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 246,
          "endLine": null,
          "endColumn": 247,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.372Z"
        },
        {
          "id": "codeql-js/syntax-error-185",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: ',' expected.",
          "description": "Error: ',' expected.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 300,
          "endLine": null,
          "endColumn": 301,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.372Z"
        },
        {
          "id": "codeql-js/syntax-error-186",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: Invalid character.",
          "description": "Error: Invalid character.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 301,
          "endLine": null,
          "endColumn": 302,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.372Z"
        },
        {
          "id": "codeql-js/syntax-error-187",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: ',' expected.",
          "description": "Error: ',' expected.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 307,
          "endLine": null,
          "endColumn": 308,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.372Z"
        },
        {
          "id": "codeql-js/syntax-error-188",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: ',' expected.",
          "description": "Error: ',' expected.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 314,
          "endLine": null,
          "endColumn": 315,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.372Z"
        },
        {
          "id": "codeql-js/syntax-error-189",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: ',' expected.",
          "description": "Error: ',' expected.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 372,
          "endLine": null,
          "endColumn": 373,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.372Z"
        },
        {
          "id": "codeql-js/syntax-error-190",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: Invalid character.",
          "description": "Error: Invalid character.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 373,
          "endLine": null,
          "endColumn": 374,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.372Z"
        },
        {
          "id": "codeql-js/syntax-error-191",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: Invalid character.",
          "description": "Error: Invalid character.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 379,
          "endLine": null,
          "endColumn": 380,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.372Z"
        },
        {
          "id": "codeql-js/syntax-error-192",
          "entity": {
            "canonicalPath": "core/unified-model/skeptical-verification.ts",
            "originalIdentifier": "core/unified-model/skeptical-verification.ts",
            "toolName": "CodeQL",
            "confidence": 1
          },
          "severity": "medium",
          "analysisType": "semantic",
          "title": "Error: '}}' expected.",
          "description": "Error: '}}' expected.",
          "ruleId": "js/syntax-error",
          "line": 307,
          "column": 2602,
          "endLine": null,
          "endColumn": 2603,
          "toolName": "CodeQL",
          "metadata": {
            "ruleIndex": 173,
            "uri": "core/unified-model/skeptical-verification.ts"
          },
          "createdAt": "2025-09-07T01:38:04.372Z"
        }
      ],
      "lineRange": {
        "start": 307,
        "end": 307
      },
      "riskScore": 48,
      "analysisTypes": [
        "semantic"
      ],
      "toolCoverage": [
        "CodeQL"
      ]
    }
  ],
  "hotspots": [],
  "metadata": {
    "source": "simple-real-data-processor",
    "sourceVersion": "1.0.0",
    "analyzedAt": "2025-09-07T01:38:04.374Z",
    "message": "Direct processing of real analysis data"
  },
  "createdAt": "2025-09-07T01:38:04.348Z",
  "summary": {
    "totalIssues": 438,
    "filesAnalyzed": 160,
    "correlationGroups": 84,
    "hotspots": 0,
    "toolsCovered": [
      "Semgrep",
      "CodeQL"
    ],
    "severityBreakdown": {
      "critical": 0,
      "high": 35,
      "medium": 381,
      "low": 0,
      "info": 22
    },
    "analysisTypeBreakdown": {
      "quality": 0,
      "security": 245,
      "performance": 0,
      "style": 0,
      "complexity": 0,
      "semantic": 193,
      "ai_powered": 0
    }
  }
}